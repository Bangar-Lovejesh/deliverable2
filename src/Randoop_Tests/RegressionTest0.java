package Randoop_Tests;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        boolean boolean1 = team_001.PasswordValidator.hasUppercase("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        team_001.PasswordValidator passwordValidator0 = new team_001.PasswordValidator();
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        boolean boolean1 = team_001.PasswordValidator.hasNumber("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        java.lang.Class<?> wildcardClass9 = libraryFacade2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        boolean boolean1 = team_001.PasswordValidator.hasSymbol("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        team_001.Client.current_id = '#';
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        int int0 = team_001.Client.current_id;
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int0 + "' != '" + 36 + "'", int0 == 36);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            team_001.BorrowedIterator borrowedIterator1 = new team_001.BorrowedIterator(itemMap0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.HashMap.keySet()\" because \"borrowed\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        boolean boolean1 = team_001.PasswordValidator.hasLowercase("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        team_001.Magazine magazine2 = new team_001.Magazine("", "hi!");
        int int3 = magazine2.ID;
        java.lang.String str4 = magazine2.getTitle();
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 174 + "'", int3 == 174);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "" + "'", str4.equals(""));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        userBuilder0.password = "";
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap2 = client1.getSubcribed();
        java.lang.String str3 = client1.getUsername();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder5 = userBuilder0.setPassword("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid password format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        int int12 = student7.getId();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = null;
        student7.setBorrowed(itemMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 83 + "'", int12 == 83);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        team_001.CD cD2 = new team_001.CD("", "");
        cD2.ID = 47;
        java.lang.Class<?> wildcardClass5 = cD2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        boolean boolean1 = team_001.PasswordValidator.hasSymbol("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        team_001.ItemFactory itemFactory0 = new team_001.ItemFactory();
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        boolean boolean1 = team_001.PasswordValidator.validatePassword("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder7 = userBuilder0.setPassword("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid password format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        boolean boolean1 = team_001.PasswordValidator.hasLowercase("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = student7.borrowed;
        team_001.BorrowedIterator borrowedIterator13 = new team_001.BorrowedIterator(itemMap12);
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item14 = borrowedIterator13.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap12);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = student7.borrowed;
        team_001.BorrowedIterator borrowedIterator13 = new team_001.BorrowedIterator(itemMap12);
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator13.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap12);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.populizer("hi!", strList37);
        libraryFacade2.populizer("hi!", strList37);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        team_001.Student student49 = new team_001.Student("", "", "hi!", strList47);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap50 = student49.getSubcribed();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        team_001.Student student58 = new team_001.Student("", "", "hi!", strList56);
        team_001.VirtualBook virtualBook61 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int62 = student58.checkOverdue((team_001.Item) virtualBook61);
        virtualBook61.ID = 10;
        int int65 = student49.checkOverdue((team_001.Item) virtualBook61);
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        team_001.Student student73 = new team_001.Student("", "", "hi!", strList71);
        team_001.Magazine magazine76 = new team_001.Magazine("", "hi!");
        student73.returnItem((team_001.Item) magazine76);
        java.lang.String str78 = student73.getEmail();
        student73.setPassword("");
        team_001.VirtualBook virtualBook83 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook83.ID = '4';
        int int86 = student73.checkOverdue((team_001.Item) virtualBook83);
        boolean boolean87 = libraryFacade2.borrowItem((team_001.Client) student49, (team_001.Item) virtualBook83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "" + "'", str78.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "");
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap3 = libraryFacade2.getInventory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap3);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder26 = userBuilder24.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.lang.String str8 = student7.getEmail();
        student7.setUsername("hi!");
        student7.setEmail("hi!");
        team_001.VirtualBook virtualBook15 = team_001.ItemFactory.createVirtualBook("hi!", "");
        student7.returnItem((team_001.Item) virtualBook15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook15);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        team_001.CD cD2 = new team_001.CD("", "");
        cD2.ID = 47;
        java.lang.String str5 = cD2.getTitle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "" + "'", str5.equals(""));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        team_001.Library library4 = userBuilder3.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library4);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        java.lang.String str3 = userManagement1.getType("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap14 = student9.borrowed;
        team_001.BorrowedIterator borrowedIterator15 = new team_001.BorrowedIterator(itemMap14);
        java.util.ArrayList<team_001.Item> itemList16 = client1.checkItemsOverdue(borrowedIterator15);
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item17 = borrowedIterator15.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList16);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        team_001.Magazine magazine2 = new team_001.Magazine("", "");
        java.lang.Class<?> wildcardClass3 = magazine2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        student7.setPassword("");
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap15 = student7.getSubcribed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap15);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = null;
        student7.borrowed = itemMap13;
        java.lang.String str15 = student7.getPassword();
        team_001.Item item16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = student7.checkOverdue(item16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.HashMap.get(Object)\" because \"this.borrowed\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        team_001.CD cD2 = new team_001.CD("", "");
        cD2.ID = 47;
        int int5 = cD2.getID();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 47 + "'", int5 == 47);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        userBuilder23.email = "";
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder27 = userBuilder23.setPassword("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid password format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        team_001.NonFacultyStaff nonFacultyStaff3 = new team_001.NonFacultyStaff("hi!", "hi!", "hi!");
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        team_001.Magazine magazine2 = team_001.ItemFactory.createMagazine("", "hi!");
        java.lang.Class<?> wildcardClass3 = magazine2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        boolean boolean1 = team_001.PasswordValidator.hasNumber("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        team_001.Student student13 = new team_001.Student("", "", "hi!", strList11);
        team_001.Magazine magazine16 = new team_001.Magazine("", "hi!");
        student13.returnItem((team_001.Item) magazine16);
        java.lang.String str18 = student13.getEmail();
        team_001.CD cD21 = new team_001.CD("", "");
        boolean boolean22 = libraryFacade5.borrowItem((team_001.Client) student13, (team_001.Item) cD21);
        team_001.LibraryFacade libraryFacade29 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        libraryFacade29.bookKeeping("hi!", strList33);
        team_001.LibraryFacade libraryFacade39 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        libraryFacade39.bookKeeping("hi!", strList43);
        libraryFacade29.populizer("hi!", strList43);
        team_001.Student student47 = new team_001.Student("hi!", "", "", strList43);
        libraryFacade5.bookKeeping("hi!", strList43);
        team_001.Student student49 = new team_001.Student("hi!", "", "hi!", strList43);
        team_001.CD cD52 = new team_001.CD("", "");
        int int53 = student49.checkOverdue((team_001.Item) cD52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "" + "'", str18.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        boolean boolean1 = team_001.PasswordValidator.validatePassword("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        team_001.PhysicalBook physicalBook2 = team_001.ItemFactory.createPhysicalBook("hi!", "");
        int int3 = physicalBook2.getID();
        physicalBook2.ID = 553;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook2);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1402 + "'", int3 == 1402);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        team_001.CD cD2 = team_001.ItemFactory.createCD("", "");
        int int3 = cD2.ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD2);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1403 + "'", int3 == 1403);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildStudent();
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder8 = userBuilder0.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = null;
        student7.borrowed = itemMap13;
        java.lang.String str15 = student7.getPassword();
        team_001.BorrowedIterator borrowedIterator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<team_001.Item> itemList17 = student7.checkItemsOverdue(borrowedIterator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"team_001.BorrowedIterator.hasNext()\" because \"iterator\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildVisitor();
        client6.setUsername("hi!");
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        team_001.LibraryFacade libraryFacade24 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        libraryFacade24.bookKeeping("hi!", strList28);
        libraryFacade14.populizer("hi!", strList28);
        team_001.Student student32 = new team_001.Student("hi!", "", "", strList28);
        team_001.Newsletter newsletter35 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str36 = newsletter35.getTitle();
        student32.subscribe(newsletter35);
        boolean boolean38 = client6.borrowItem((team_001.Item) newsletter35);
        client6.setId((int) (byte) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "" + "'", str36.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = student7.borrowed;
        team_001.BorrowedIterator borrowedIterator13 = new team_001.BorrowedIterator(itemMap12);
        team_001.BorrowedIterator borrowedIterator14 = new team_001.BorrowedIterator(itemMap12);
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator14.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap12);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.populizer("hi!", strList16);
        team_001.LibraryFacade libraryFacade26 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        team_001.Student student34 = new team_001.Student("", "", "hi!", strList32);
        team_001.Magazine magazine37 = new team_001.Magazine("", "hi!");
        student34.returnItem((team_001.Item) magazine37);
        java.lang.String str39 = student34.getEmail();
        team_001.CD cD42 = new team_001.CD("", "");
        boolean boolean43 = libraryFacade26.borrowItem((team_001.Client) student34, (team_001.Item) cD42);
        team_001.LibraryFacade libraryFacade50 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        libraryFacade50.bookKeeping("hi!", strList54);
        team_001.LibraryFacade libraryFacade60 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        libraryFacade60.bookKeeping("hi!", strList64);
        libraryFacade50.populizer("hi!", strList64);
        team_001.Student student68 = new team_001.Student("hi!", "", "", strList64);
        libraryFacade26.bookKeeping("hi!", strList64);
        team_001.Student student70 = new team_001.Student("hi!", "", "hi!", strList64);
        libraryFacade2.bookKeeping("", strList64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "" + "'", str39.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        userBuilder23.email = "";
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder27 = userBuilder23.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        student7.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = student7.borrowed;
        team_001.BorrowedIterator borrowedIterator13 = new team_001.BorrowedIterator(itemMap12);
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator13.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap12);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        team_001.Client.current_id = 133;
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        userBuilder23.email = "";
        team_001.UserBuilder userBuilder26 = new team_001.UserBuilder();
        team_001.Client client27 = userBuilder26.buildVisitor();
        java.lang.String str28 = userBuilder26.password;
        team_001.LibraryFacade libraryFacade31 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        libraryFacade31.bookKeeping("hi!", strList35);
        team_001.LibraryFacade libraryFacade41 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        libraryFacade41.bookKeeping("hi!", strList45);
        libraryFacade31.bookKeeping("", strList45);
        team_001.Library library49 = libraryFacade31.getLibrary();
        team_001.UserBuilder userBuilder50 = userBuilder26.setLibrary(library49);
        userBuilder23.lib = library49;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder50);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder4 = userBuilder0.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.populizer("hi!", strList16);
        team_001.UserBuilder userBuilder20 = new team_001.UserBuilder();
        team_001.Client client21 = userBuilder20.buildVisitor();
        team_001.UserBuilder userBuilder23 = userBuilder20.setPassword("hi!");
        userBuilder20.password = "hi!";
        team_001.Client client26 = userBuilder20.buildVisitor();
        team_001.Magazine magazine29 = new team_001.Magazine("", "hi!");
        int int30 = magazine29.getID();
        boolean boolean31 = libraryFacade2.borrowItem(client26, (team_001.Item) magazine29);
        team_001.LibraryFacade libraryFacade34 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        team_001.Student student42 = new team_001.Student("", "", "hi!", strList40);
        team_001.Magazine magazine45 = new team_001.Magazine("", "hi!");
        student42.returnItem((team_001.Item) magazine45);
        java.lang.String str47 = student42.getEmail();
        team_001.CD cD50 = new team_001.CD("", "");
        boolean boolean51 = libraryFacade34.borrowItem((team_001.Client) student42, (team_001.Item) cD50);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        team_001.Student student59 = new team_001.Student("", "", "hi!", strList57);
        student59.setEmail("hi!");
        team_001.Magazine magazine64 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean65 = student59.isBorrowed((team_001.Item) magazine64);
        boolean boolean66 = student42.borrowItem((team_001.Item) magazine64);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        team_001.Student student74 = new team_001.Student("", "", "hi!", strList72);
        team_001.VirtualBook virtualBook77 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int78 = student74.checkOverdue((team_001.Item) virtualBook77);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap79 = student74.borrowed;
        team_001.BorrowedIterator borrowedIterator80 = new team_001.BorrowedIterator(itemMap79);
        student42.borrowed = itemMap79;
        client26.borrowed = itemMap79;
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        team_001.Student student90 = new team_001.Student("", "", "hi!", strList88);
        team_001.VirtualBook virtualBook93 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int94 = student90.checkOverdue((team_001.Item) virtualBook93);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap95 = student90.borrowed;
        client26.borrowed = itemMap95;
        team_001.BorrowedIterator borrowedIterator97 = new team_001.BorrowedIterator(itemMap95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1700 + "'", int30 == 1700);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "" + "'", str47.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap95);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.populizer("hi!", strList34);
        libraryFacade2.bookKeeping("", strList34);
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        team_001.Student student50 = new team_001.Student("", "", "hi!", strList48);
        team_001.Magazine magazine53 = new team_001.Magazine("", "hi!");
        student50.returnItem((team_001.Item) magazine53);
        java.lang.String str55 = student50.getEmail();
        team_001.CD cD58 = new team_001.CD("", "");
        boolean boolean59 = libraryFacade42.borrowItem((team_001.Client) student50, (team_001.Item) cD58);
        team_001.LibraryFacade libraryFacade66 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray69 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        libraryFacade66.bookKeeping("hi!", strList70);
        team_001.LibraryFacade libraryFacade76 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray79 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        libraryFacade76.bookKeeping("hi!", strList80);
        libraryFacade66.populizer("hi!", strList80);
        team_001.Student student84 = new team_001.Student("hi!", "", "", strList80);
        libraryFacade42.bookKeeping("hi!", strList80);
        libraryFacade2.populizer("", strList80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str55 + "' != '" + "" + "'", str55.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.populizer("hi!", strList16);
        team_001.UserBuilder userBuilder20 = new team_001.UserBuilder();
        team_001.Client client21 = userBuilder20.buildVisitor();
        team_001.UserBuilder userBuilder23 = userBuilder20.setPassword("hi!");
        userBuilder20.password = "hi!";
        team_001.Client client26 = userBuilder20.buildVisitor();
        team_001.Magazine magazine29 = new team_001.Magazine("", "hi!");
        int int30 = magazine29.getID();
        boolean boolean31 = libraryFacade2.borrowItem(client26, (team_001.Item) magazine29);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap32 = libraryFacade2.getInventory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1769 + "'", int30 == 1769);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap32);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder5 = userBuilder3.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        team_001.Client.current_id = (short) 100;
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap41 = libraryFacade2.getInventory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap41);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder2 = userBuilder0.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap8 = student7.getSubcribed();
        student7.setPassword("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap8);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        team_001.Student student22 = new team_001.Student("", "", "hi!", strList20);
        team_001.Magazine magazine25 = new team_001.Magazine("", "hi!");
        student22.returnItem((team_001.Item) magazine25);
        java.lang.String str27 = student22.getEmail();
        student22.setPassword("");
        team_001.VirtualBook virtualBook32 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook32.ID = '4';
        int int35 = student22.checkOverdue((team_001.Item) virtualBook32);
        java.lang.String str36 = virtualBook32.getTitle();
        boolean boolean37 = student10.borrowItem((team_001.Item) virtualBook32);
        client2.returnItem((team_001.Item) virtualBook32);
        java.lang.Class<?> wildcardClass39 = virtualBook32.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "hi!" + "'", str36.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        team_001.Client client9 = userManagement1.writeUser("", "", "hi!", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            team_001.Client client14 = userManagement1.writeUser("hi!", "hi!", "", "");
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertNull(client9);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap14 = student9.borrowed;
        team_001.BorrowedIterator borrowedIterator15 = new team_001.BorrowedIterator(itemMap14);
        java.util.ArrayList<team_001.Item> itemList16 = client1.checkItemsOverdue(borrowedIterator15);
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator15.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList16);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = student7.borrowed;
        team_001.BorrowedIterator borrowedIterator13 = new team_001.BorrowedIterator(itemMap12);
        team_001.BorrowedIterator borrowedIterator14 = new team_001.BorrowedIterator(itemMap12);
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item15 = borrowedIterator14.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap12);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap10 = libraryFacade2.getInventory();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        team_001.VirtualBook virtualBook21 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int22 = student18.checkOverdue((team_001.Item) virtualBook21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        team_001.Student student30 = new team_001.Student("", "", "hi!", strList28);
        team_001.VirtualBook virtualBook33 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int34 = student30.checkOverdue((team_001.Item) virtualBook33);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap35 = student30.borrowed;
        team_001.BorrowedIterator borrowedIterator36 = new team_001.BorrowedIterator(itemMap35);
        student18.borrowed = itemMap35;
        team_001.Item item38 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = libraryFacade2.borrowItem((team_001.Client) student18, item38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"team_001.Item.getID()\" because \"item\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap35);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        team_001.Newsletter newsletter2 = new team_001.Newsletter("", "hi!");
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        // The following exception was thrown during execution in test generation
        try {
            team_001.Client client6 = userManagement1.writeUser("", "", "", "hi!");
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            team_001.Client client9 = userManagement1.writeUser("", "hi!", "", "");
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        team_001.Magazine magazine51 = new team_001.Magazine("", "hi!");
        student48.returnItem((team_001.Item) magazine51);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "", "hi!", strList58);
        team_001.Magazine magazine63 = new team_001.Magazine("", "hi!");
        student60.returnItem((team_001.Item) magazine63);
        java.lang.String str65 = student60.getEmail();
        student60.setPassword("");
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook70.ID = '4';
        int int73 = student60.checkOverdue((team_001.Item) virtualBook70);
        java.lang.String str74 = virtualBook70.getTitle();
        boolean boolean75 = student48.borrowItem((team_001.Item) virtualBook70);
        student10.returnItem((team_001.Item) virtualBook70);
        team_001.Newsletter newsletter79 = team_001.ItemFactory.createNewsLetter("", "hi!");
        student10.subscribe(newsletter79);
        java.lang.Class<?> wildcardClass81 = student10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "hi!" + "'", str74.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = userManagement1.readUsers("hi!", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            team_001.Client client9 = userManagement1.writeUser("hi!", "hi!", "", "hi!");
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = userManagement1.getType("");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = userManagement1.getType("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        team_001.VirtualBook virtualBook19 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook19.ID = '4';
        virtualBook19.ID = (short) 100;
        boolean boolean24 = visitor12.borrowItem((team_001.Item) virtualBook19);
        java.lang.String str25 = visitor12.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "hi!" + "'", str25.equals("hi!"));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        client4.setUsername("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder0.buildVisitor();
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder26 = userBuilder0.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.LibraryFacade libraryFacade6 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        libraryFacade6.bookKeeping("hi!", strList10);
        team_001.LibraryFacade libraryFacade16 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        libraryFacade16.bookKeeping("hi!", strList20);
        libraryFacade6.bookKeeping("", strList20);
        team_001.Library library24 = libraryFacade6.getLibrary();
        team_001.UserBuilder userBuilder25 = userBuilder0.setLibrary(library24);
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder27 = userBuilder0.setPassword("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid password format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder25);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        team_001.Client client9 = userManagement1.writeUser("", "", "hi!", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = userManagement1.getType("");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(client9);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.email;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder4 = userBuilder0.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        team_001.Newsletter newsletter2 = new team_001.Newsletter("", "");
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        team_001.VirtualBook virtualBook2 = new team_001.VirtualBook("hi!", "hi!");
        java.lang.Object obj3 = virtualBook2.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj3);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        team_001.Magazine magazine51 = new team_001.Magazine("", "hi!");
        student48.returnItem((team_001.Item) magazine51);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "", "hi!", strList58);
        team_001.Magazine magazine63 = new team_001.Magazine("", "hi!");
        student60.returnItem((team_001.Item) magazine63);
        java.lang.String str65 = student60.getEmail();
        student60.setPassword("");
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook70.ID = '4';
        int int73 = student60.checkOverdue((team_001.Item) virtualBook70);
        java.lang.String str74 = virtualBook70.getTitle();
        boolean boolean75 = student48.borrowItem((team_001.Item) virtualBook70);
        student10.returnItem((team_001.Item) virtualBook70);
        team_001.Newsletter newsletter79 = team_001.ItemFactory.createNewsLetter("", "hi!");
        student10.subscribe(newsletter79);
        int int81 = student10.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "hi!" + "'", str74.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter79);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 296 + "'", int81 == 296);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        team_001.Client client9 = userManagement1.writeUser("", "", "hi!", "hi!");
        boolean boolean12 = userManagement1.readUsers("hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            team_001.Client client17 = userManagement1.writeUser("hi!", "hi!", "", "hi!");
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        boolean boolean1 = team_001.PasswordValidator.hasUppercase("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = userManagement1.getType("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        virtualBook10.ID = 10;
        int int14 = virtualBook10.getID();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        int int12 = student7.getId();
        java.lang.String str13 = student7.getUsername();
        java.lang.String str14 = student7.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 329 + "'", int12 == 329);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!" + "'", str14.equals("hi!"));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        team_001.visitor visitor3 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.CD cD6 = team_001.ItemFactory.createCD("hi!", "");
        boolean boolean7 = visitor3.borrowItem((team_001.Item) cD6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade8 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        libraryFacade8.bookKeeping("hi!", strList12);
        team_001.Library library15 = libraryFacade8.getLibrary();
        team_001.UserBuilder userBuilder16 = userBuilder0.setLibrary(library15);
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder18 = userBuilder16.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder16);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildNonFacultyStaff();
        team_001.CD cD9 = new team_001.CD("", "");
        java.lang.Boolean boolean10 = client6.isBorrowed((team_001.Item) cD9);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap11 = client6.borrowed;
        team_001.BorrowedIterator borrowedIterator12 = new team_001.BorrowedIterator(itemMap11);
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item13 = borrowedIterator12.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap11);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        visitor12.setPassword("hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        team_001.Student student26 = new team_001.Student("", "", "hi!", strList24);
        team_001.VirtualBook virtualBook29 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int30 = student26.checkOverdue((team_001.Item) virtualBook29);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap31 = student26.borrowed;
        team_001.BorrowedIterator borrowedIterator32 = new team_001.BorrowedIterator(itemMap31);
        team_001.BorrowedIterator borrowedIterator33 = new team_001.BorrowedIterator(itemMap31);
        java.util.ArrayList<team_001.Item> itemList34 = visitor12.checkItemsOverdue(borrowedIterator33);
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item35 = borrowedIterator33.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList34);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        java.lang.String str27 = userBuilder23.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "hi!" + "'", str27.equals("hi!"));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setPassword("");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap10 = student7.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap10);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap14 = student9.borrowed;
        team_001.BorrowedIterator borrowedIterator15 = new team_001.BorrowedIterator(itemMap14);
        java.util.ArrayList<team_001.Item> itemList16 = client1.checkItemsOverdue(borrowedIterator15);
        boolean boolean17 = borrowedIterator15.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item18 = borrowedIterator15.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        team_001.Client client16 = userBuilder0.buildNonFacultyStaff();
        team_001.Client client17 = userBuilder0.buildFaculty();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client17);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        userBuilder17.email = "hi!";
        team_001.Library library20 = userBuilder17.lib;
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Library library41 = libraryFacade23.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder17.setLibrary(library41);
        userBuilder0.lib = library41;
        team_001.Client client44 = userBuilder0.buildVisitor();
        team_001.Client client45 = userBuilder0.buildNonFacultyStaff();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client45);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        team_001.Client.current_id = (byte) 100;
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        team_001.Student student13 = new team_001.Student("", "", "hi!", strList11);
        team_001.Magazine magazine16 = new team_001.Magazine("", "hi!");
        student13.returnItem((team_001.Item) magazine16);
        java.lang.String str18 = student13.getEmail();
        team_001.CD cD21 = new team_001.CD("", "");
        boolean boolean22 = libraryFacade5.borrowItem((team_001.Client) student13, (team_001.Item) cD21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        team_001.Student student30 = new team_001.Student("", "", "hi!", strList28);
        student30.setEmail("hi!");
        team_001.Magazine magazine35 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean36 = student30.isBorrowed((team_001.Item) magazine35);
        boolean boolean37 = student13.borrowItem((team_001.Item) magazine35);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        team_001.Student student45 = new team_001.Student("", "", "hi!", strList43);
        team_001.Magazine magazine48 = new team_001.Magazine("", "hi!");
        student45.returnItem((team_001.Item) magazine48);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        team_001.Student student57 = new team_001.Student("", "", "hi!", strList55);
        team_001.Magazine magazine60 = new team_001.Magazine("", "hi!");
        student57.returnItem((team_001.Item) magazine60);
        java.lang.String str62 = student57.getEmail();
        student57.setPassword("");
        team_001.VirtualBook virtualBook67 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook67.ID = '4';
        int int70 = student57.checkOverdue((team_001.Item) virtualBook67);
        java.lang.String str71 = virtualBook67.getTitle();
        boolean boolean72 = student45.borrowItem((team_001.Item) virtualBook67);
        team_001.Newsletter newsletter75 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean76 = student45.borrowItem((team_001.Item) newsletter75);
        int int77 = newsletter75.ID;
        int int78 = libraryFacade2.checkOverdue((team_001.Client) student13, (team_001.Item) newsletter75);
        java.lang.String str79 = student13.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "" + "'", str18.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "" + "'", str62.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str71 + "' != '" + "hi!" + "'", str71.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3684 + "'", int77 == 3684);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str79 + "' != '" + "" + "'", str79.equals(""));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        userBuilder15.password = "";
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder19 = userBuilder15.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        team_001.Client client9 = userManagement1.writeUser("", "", "hi!", "hi!");
        boolean boolean12 = userManagement1.readUsers("hi!", "");
        team_001.Client client17 = userManagement1.writeUser("", "", "hi!", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = userManagement1.getType("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(client17);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        java.lang.String str3 = userBuilder0.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        team_001.Magazine magazine51 = new team_001.Magazine("", "hi!");
        student48.returnItem((team_001.Item) magazine51);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "", "hi!", strList58);
        team_001.Magazine magazine63 = new team_001.Magazine("", "hi!");
        student60.returnItem((team_001.Item) magazine63);
        java.lang.String str65 = student60.getEmail();
        student60.setPassword("");
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook70.ID = '4';
        int int73 = student60.checkOverdue((team_001.Item) virtualBook70);
        java.lang.String str74 = virtualBook70.getTitle();
        boolean boolean75 = student48.borrowItem((team_001.Item) virtualBook70);
        student10.returnItem((team_001.Item) virtualBook70);
        team_001.Newsletter newsletter79 = team_001.ItemFactory.createNewsLetter("", "hi!");
        student10.subscribe(newsletter79);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap81 = student10.borrowed;
        java.lang.Class<?> wildcardClass82 = student10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "hi!" + "'", str74.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade8 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        libraryFacade8.bookKeeping("hi!", strList12);
        team_001.Library library15 = libraryFacade8.getLibrary();
        team_001.UserBuilder userBuilder16 = userBuilder0.setLibrary(library15);
        java.lang.String str17 = userBuilder16.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!" + "'", str17.equals("hi!"));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        team_001.Student student27 = new team_001.Student("", "", "hi!", strList25);
        student27.setEmail("hi!");
        team_001.Magazine magazine32 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean33 = student27.isBorrowed((team_001.Item) magazine32);
        boolean boolean34 = student10.borrowItem((team_001.Item) magazine32);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap35 = student10.borrowed;
        student10.setPassword("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap35);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        team_001.Magazine magazine12 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean13 = student7.isBorrowed((team_001.Item) magazine12);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        team_001.Student student21 = new team_001.Student("", "", "hi!", strList19);
        team_001.VirtualBook virtualBook24 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int25 = student21.checkOverdue((team_001.Item) virtualBook24);
        java.lang.Boolean boolean26 = student7.isBorrowed((team_001.Item) virtualBook24);
        java.lang.String str27 = virtualBook24.getTitle();
        int int28 = virtualBook24.getID();
        virtualBook24.ID = (byte) 1;
        virtualBook24.ID = (byte) 100;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "hi!" + "'", str27.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3928 + "'", int28 == 3928);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        java.lang.String str5 = userBuilder0.email;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder7 = userBuilder0.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        userBuilder23.email = "";
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder27 = userBuilder23.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        team_001.Client.current_id = 1518;
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder18 = userBuilder0.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "");
        team_001.Library library3 = libraryFacade2.getLibrary();
        java.util.ArrayList<java.lang.String> strList5 = null;
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("", strList5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library3);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        userBuilder15.password = "";
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        userBuilder15.lib = library38;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder41 = userBuilder15.setPassword("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid password format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = student7.borrowed;
        team_001.BorrowedIterator borrowedIterator13 = new team_001.BorrowedIterator(itemMap12);
        boolean boolean14 = borrowedIterator13.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator13.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.UserBuilder userBuilder30 = userBuilder23.setUsername("");
        team_001.UserBuilder userBuilder31 = new team_001.UserBuilder();
        team_001.Client client32 = userBuilder31.buildVisitor();
        team_001.UserBuilder userBuilder34 = userBuilder31.setPassword("hi!");
        userBuilder31.password = "hi!";
        team_001.LibraryFacade libraryFacade39 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        libraryFacade39.bookKeeping("hi!", strList43);
        team_001.Library library46 = libraryFacade39.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder31.setLibrary(library46);
        team_001.UserBuilder userBuilder48 = userBuilder30.setLibrary(library46);
        team_001.Client client49 = userBuilder30.buildVisitor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client49);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        visitor12.setPassword("hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        team_001.Student student26 = new team_001.Student("", "", "hi!", strList24);
        team_001.VirtualBook virtualBook29 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int30 = student26.checkOverdue((team_001.Item) virtualBook29);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap31 = student26.borrowed;
        team_001.BorrowedIterator borrowedIterator32 = new team_001.BorrowedIterator(itemMap31);
        team_001.BorrowedIterator borrowedIterator33 = new team_001.BorrowedIterator(itemMap31);
        java.util.ArrayList<team_001.Item> itemList34 = visitor12.checkItemsOverdue(borrowedIterator33);
        boolean boolean35 = borrowedIterator33.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator33.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        java.lang.String str17 = visitor12.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!" + "'", str17.equals("hi!"));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        team_001.CD cD2 = new team_001.CD("", "hi!");
        int int3 = cD2.ID;
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4136 + "'", int3 == 4136);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap2 = client1.getSubcribed();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap11 = student10.getSubcribed();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        student19.setEmail("hi!");
        team_001.Magazine magazine24 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean25 = student19.isBorrowed((team_001.Item) magazine24);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        team_001.Student student33 = new team_001.Student("", "", "hi!", strList31);
        team_001.VirtualBook virtualBook36 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int37 = student33.checkOverdue((team_001.Item) virtualBook36);
        java.lang.Boolean boolean38 = student19.isBorrowed((team_001.Item) virtualBook36);
        java.lang.String str39 = virtualBook36.getTitle();
        student10.returnItem((team_001.Item) virtualBook36);
        virtualBook36.ID = 10;
        java.lang.Boolean boolean43 = client1.isBorrowed((team_001.Item) virtualBook36);
        virtualBook36.ID = 3928;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43.equals(false));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        team_001.Client.current_id = 245;
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        team_001.Client.current_id = 1700;
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.UserBuilder userBuilder49 = userBuilder24.setUsername("hi!");
        team_001.UserBuilder userBuilder50 = new team_001.UserBuilder();
        team_001.Client client51 = userBuilder50.buildVisitor();
        java.lang.String str52 = userBuilder50.password;
        team_001.LibraryFacade libraryFacade55 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        libraryFacade55.bookKeeping("hi!", strList59);
        team_001.LibraryFacade libraryFacade65 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        libraryFacade65.bookKeeping("hi!", strList69);
        libraryFacade55.bookKeeping("", strList69);
        team_001.Library library73 = libraryFacade55.getLibrary();
        team_001.UserBuilder userBuilder74 = userBuilder50.setLibrary(library73);
        team_001.LibraryFacade libraryFacade77 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray80 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        libraryFacade77.bookKeeping("hi!", strList81);
        team_001.LibraryFacade libraryFacade87 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray90 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList91 = new java.util.ArrayList<java.lang.String>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList91, strArray90);
        libraryFacade87.bookKeeping("hi!", strList91);
        libraryFacade77.bookKeeping("", strList91);
        team_001.Library library95 = libraryFacade77.getLibrary();
        team_001.Library library96 = libraryFacade77.getLibrary();
        team_001.UserBuilder userBuilder97 = userBuilder74.setLibrary(library96);
        team_001.UserBuilder userBuilder98 = userBuilder24.setLibrary(library96);
        team_001.Library library99 = userBuilder98.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library99);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        team_001.LibraryFacade libraryFacade22 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        libraryFacade22.bookKeeping("hi!", strList26);
        team_001.visitor visitor32 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine35 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean36 = libraryFacade22.borrowItem((team_001.Client) visitor32, (team_001.Item) magazine35);
        visitor32.setPassword("hi!");
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        team_001.Student student46 = new team_001.Student("", "", "hi!", strList44);
        team_001.VirtualBook virtualBook49 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int50 = student46.checkOverdue((team_001.Item) virtualBook49);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap51 = student46.borrowed;
        team_001.BorrowedIterator borrowedIterator52 = new team_001.BorrowedIterator(itemMap51);
        team_001.BorrowedIterator borrowedIterator53 = new team_001.BorrowedIterator(itemMap51);
        java.util.ArrayList<team_001.Item> itemList54 = visitor32.checkItemsOverdue(borrowedIterator53);
        java.lang.String str55 = visitor32.getUsername();
        team_001.UserBuilder userBuilder56 = new team_001.UserBuilder();
        team_001.Client client57 = userBuilder56.buildVisitor();
        team_001.Client client58 = userBuilder56.buildNonFacultyStaff();
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        team_001.Student student66 = new team_001.Student("", "", "hi!", strList64);
        team_001.Magazine magazine69 = new team_001.Magazine("", "hi!");
        student66.returnItem((team_001.Item) magazine69);
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        team_001.Student student78 = new team_001.Student("", "", "hi!", strList76);
        team_001.Magazine magazine81 = new team_001.Magazine("", "hi!");
        student78.returnItem((team_001.Item) magazine81);
        java.lang.String str83 = student78.getEmail();
        student78.setPassword("");
        team_001.VirtualBook virtualBook88 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook88.ID = '4';
        int int91 = student78.checkOverdue((team_001.Item) virtualBook88);
        java.lang.String str92 = virtualBook88.getTitle();
        boolean boolean93 = student66.borrowItem((team_001.Item) virtualBook88);
        client58.returnItem((team_001.Item) virtualBook88);
        int int95 = virtualBook88.getID();
        libraryFacade2.returnItem((team_001.Client) visitor32, (team_001.Item) virtualBook88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str55 + "' != '" + "hi!" + "'", str55.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str83 + "' != '" + "" + "'", str83.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str92 + "' != '" + "hi!" + "'", str92.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 52 + "'", int95 == 52);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        userBuilder0.password = "";
        team_001.Client client5 = userBuilder0.buildNonFacultyStaff();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        team_001.Magazine magazine51 = new team_001.Magazine("", "hi!");
        student48.returnItem((team_001.Item) magazine51);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "", "hi!", strList58);
        team_001.Magazine magazine63 = new team_001.Magazine("", "hi!");
        student60.returnItem((team_001.Item) magazine63);
        java.lang.String str65 = student60.getEmail();
        student60.setPassword("");
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook70.ID = '4';
        int int73 = student60.checkOverdue((team_001.Item) virtualBook70);
        java.lang.String str74 = virtualBook70.getTitle();
        boolean boolean75 = student48.borrowItem((team_001.Item) virtualBook70);
        student10.returnItem((team_001.Item) virtualBook70);
        team_001.Newsletter newsletter79 = team_001.ItemFactory.createNewsLetter("", "hi!");
        student10.subscribe(newsletter79);
        student10.setEmail("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "hi!" + "'", str74.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter79);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        team_001.Student student17 = new team_001.Student("", "", "hi!", strList15);
        team_001.Magazine magazine20 = new team_001.Magazine("", "hi!");
        student17.returnItem((team_001.Item) magazine20);
        java.lang.String str22 = student17.getEmail();
        student17.setPassword("");
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook27.ID = '4';
        int int30 = student17.checkOverdue((team_001.Item) virtualBook27);
        team_001.UserBuilder userBuilder31 = new team_001.UserBuilder();
        team_001.Client client32 = userBuilder31.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap33 = client32.getSubcribed();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        team_001.Student student41 = new team_001.Student("", "", "hi!", strList39);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap42 = student41.getSubcribed();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        team_001.Student student50 = new team_001.Student("", "", "hi!", strList48);
        student50.setEmail("hi!");
        team_001.Magazine magazine55 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean56 = student50.isBorrowed((team_001.Item) magazine55);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        team_001.Student student64 = new team_001.Student("", "", "hi!", strList62);
        team_001.VirtualBook virtualBook67 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int68 = student64.checkOverdue((team_001.Item) virtualBook67);
        java.lang.Boolean boolean69 = student50.isBorrowed((team_001.Item) virtualBook67);
        java.lang.String str70 = virtualBook67.getTitle();
        student41.returnItem((team_001.Item) virtualBook67);
        virtualBook67.ID = 10;
        java.lang.Boolean boolean74 = client32.isBorrowed((team_001.Item) virtualBook67);
        boolean boolean75 = libraryFacade2.borrowItem((team_001.Client) student17, (team_001.Item) virtualBook67);
        virtualBook67.ID = 2906;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "" + "'", str22.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "hi!" + "'", str70.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        team_001.Client client9 = userManagement1.writeUser("", "", "hi!", "hi!");
        boolean boolean12 = userManagement1.readUsers("hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = userManagement1.readUsers("", "hi!");
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        team_001.Magazine magazine12 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean13 = student7.isBorrowed((team_001.Item) magazine12);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        team_001.Student student21 = new team_001.Student("", "", "hi!", strList19);
        team_001.VirtualBook virtualBook24 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int25 = student21.checkOverdue((team_001.Item) virtualBook24);
        java.lang.Boolean boolean26 = student7.isBorrowed((team_001.Item) virtualBook24);
        java.lang.String str27 = virtualBook24.getTitle();
        int int28 = virtualBook24.getID();
        virtualBook24.ID = (byte) 1;
        java.lang.String str31 = virtualBook24.getTitle();
        java.lang.Class<?> wildcardClass32 = virtualBook24.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "hi!" + "'", str27.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4463 + "'", int28 == 4463);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "hi!" + "'", str31.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder24.buildNonFacultyStaff();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap26 = client25.getSubcribed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap26);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        team_001.Student student17 = new team_001.Student("", "", "hi!", strList15);
        team_001.Magazine magazine20 = new team_001.Magazine("", "hi!");
        student17.returnItem((team_001.Item) magazine20);
        java.lang.String str22 = student17.getEmail();
        student17.setPassword("");
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook27.ID = '4';
        int int30 = student17.checkOverdue((team_001.Item) virtualBook27);
        team_001.UserBuilder userBuilder31 = new team_001.UserBuilder();
        team_001.Client client32 = userBuilder31.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap33 = client32.getSubcribed();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        team_001.Student student41 = new team_001.Student("", "", "hi!", strList39);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap42 = student41.getSubcribed();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        team_001.Student student50 = new team_001.Student("", "", "hi!", strList48);
        student50.setEmail("hi!");
        team_001.Magazine magazine55 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean56 = student50.isBorrowed((team_001.Item) magazine55);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        team_001.Student student64 = new team_001.Student("", "", "hi!", strList62);
        team_001.VirtualBook virtualBook67 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int68 = student64.checkOverdue((team_001.Item) virtualBook67);
        java.lang.Boolean boolean69 = student50.isBorrowed((team_001.Item) virtualBook67);
        java.lang.String str70 = virtualBook67.getTitle();
        student41.returnItem((team_001.Item) virtualBook67);
        virtualBook67.ID = 10;
        java.lang.Boolean boolean74 = client32.isBorrowed((team_001.Item) virtualBook67);
        boolean boolean75 = libraryFacade2.borrowItem((team_001.Client) student17, (team_001.Item) virtualBook67);
        java.lang.Class<?> wildcardClass76 = virtualBook67.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "" + "'", str22.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "hi!" + "'", str70.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        team_001.Client client9 = userManagement1.writeUser("", "hi!", "hi!", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            team_001.Client client14 = userManagement1.writeUser("hi!", "", "", "");
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(client9);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Client client27 = userBuilder26.buildStudent();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        team_001.Student student35 = new team_001.Student("", "", "hi!", strList33);
        team_001.Magazine magazine38 = new team_001.Magazine("", "hi!");
        student35.returnItem((team_001.Item) magazine38);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        team_001.Student student47 = new team_001.Student("", "", "hi!", strList45);
        team_001.Magazine magazine50 = new team_001.Magazine("", "hi!");
        student47.returnItem((team_001.Item) magazine50);
        java.lang.String str52 = student47.getEmail();
        student47.setPassword("");
        team_001.VirtualBook virtualBook57 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook57.ID = '4';
        int int60 = student47.checkOverdue((team_001.Item) virtualBook57);
        java.lang.String str61 = virtualBook57.getTitle();
        boolean boolean62 = student35.borrowItem((team_001.Item) virtualBook57);
        team_001.Newsletter newsletter65 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean66 = student35.borrowItem((team_001.Item) newsletter65);
        client27.unsubscribe(newsletter65);
        java.lang.String str68 = newsletter65.getTitle();
        java.lang.Object obj69 = newsletter65.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "" + "'", str52.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "hi!" + "'", str61.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "hi!" + "'", str68.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj69);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Library library2 = null;
        team_001.UserBuilder userBuilder3 = userBuilder0.setLibrary(library2);
        java.lang.String str4 = userBuilder0.email;
        team_001.Client client5 = userBuilder0.buildFaculty();
        team_001.Client client6 = userBuilder0.buildVisitor();
        userBuilder0.password = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "");
        team_001.Library library3 = libraryFacade2.getLibrary();
        java.util.ArrayList<java.lang.String> strList5 = null;
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("hi!", strList5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library3);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        team_001.VirtualBook virtualBook19 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook19.ID = '4';
        virtualBook19.ID = (short) 100;
        boolean boolean24 = visitor12.borrowItem((team_001.Item) virtualBook19);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        team_001.Student student32 = new team_001.Student("", "", "hi!", strList30);
        student32.setEmail("hi!");
        student32.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap37 = student32.borrowed;
        student32.setUsername("");
        team_001.Newsletter newsletter42 = new team_001.Newsletter("hi!", "hi!");
        student32.unsubscribe(newsletter42);
        java.lang.Object obj44 = newsletter42.clone();
        visitor12.returnItem((team_001.Item) newsletter42);
        team_001.LibraryFacade libraryFacade48 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        team_001.Student student56 = new team_001.Student("", "", "hi!", strList54);
        team_001.Magazine magazine59 = new team_001.Magazine("", "hi!");
        student56.returnItem((team_001.Item) magazine59);
        java.lang.String str61 = student56.getEmail();
        student56.setPassword("");
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        team_001.Student student71 = new team_001.Student("", "", "hi!", strList69);
        team_001.Magazine magazine74 = new team_001.Magazine("", "hi!");
        student71.returnItem((team_001.Item) magazine74);
        java.lang.String str76 = student71.getEmail();
        student71.setPassword("");
        team_001.VirtualBook virtualBook81 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook81.ID = '4';
        int int84 = student71.checkOverdue((team_001.Item) virtualBook81);
        java.lang.String str85 = virtualBook81.getTitle();
        int int86 = libraryFacade48.checkOverdue((team_001.Client) student56, (team_001.Item) virtualBook81);
        team_001.Magazine magazine89 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean90 = student56.borrowItem((team_001.Item) magazine89);
        team_001.Newsletter newsletter93 = new team_001.Newsletter("hi!", "");
        student56.unsubscribe(newsletter93);
        boolean boolean95 = visitor12.borrowItem((team_001.Item) newsletter93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "" + "'", str61.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "" + "'", str76.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str85 + "' != '" + "hi!" + "'", str85.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        team_001.Client client6 = userManagement1.writeUser("", "hi!", "hi!", "hi!");
        team_001.LibraryFacade libraryFacade9 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        libraryFacade9.bookKeeping("hi!", strList13);
        team_001.LibraryFacade libraryFacade19 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        libraryFacade19.bookKeeping("hi!", strList23);
        libraryFacade9.bookKeeping("", strList23);
        team_001.Library library27 = libraryFacade9.getLibrary();
        team_001.Library library28 = libraryFacade9.getLibrary();
        team_001.Faculty faculty32 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean36 = libraryFacade9.borrowItem((team_001.Client) faculty32, (team_001.Item) virtualBook35);
        faculty32.setId((int) (byte) -1);
        java.util.ArrayList<java.lang.String> strList39 = faculty32.getCourses();
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        team_001.Student student50 = new team_001.Student("", "", "hi!", strList48);
        team_001.Magazine magazine53 = new team_001.Magazine("", "hi!");
        student50.returnItem((team_001.Item) magazine53);
        java.lang.String str55 = student50.getEmail();
        team_001.CD cD58 = new team_001.CD("", "");
        boolean boolean59 = libraryFacade42.borrowItem((team_001.Client) student50, (team_001.Item) cD58);
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        team_001.Student student67 = new team_001.Student("", "", "hi!", strList65);
        student67.setEmail("hi!");
        team_001.Magazine magazine72 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean73 = student67.isBorrowed((team_001.Item) magazine72);
        boolean boolean74 = student50.borrowItem((team_001.Item) magazine72);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap75 = student50.borrowed;
        faculty32.setBorrowed(itemMap75);
        client6.setBorrowed(itemMap75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str55 + "' != '" + "" + "'", str55.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap75);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap2 = client1.getSubcribed();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap11 = student10.getSubcribed();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        student19.setEmail("hi!");
        team_001.Magazine magazine24 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean25 = student19.isBorrowed((team_001.Item) magazine24);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        team_001.Student student33 = new team_001.Student("", "", "hi!", strList31);
        team_001.VirtualBook virtualBook36 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int37 = student33.checkOverdue((team_001.Item) virtualBook36);
        java.lang.Boolean boolean38 = student19.isBorrowed((team_001.Item) virtualBook36);
        java.lang.String str39 = virtualBook36.getTitle();
        student10.returnItem((team_001.Item) virtualBook36);
        virtualBook36.ID = 10;
        java.lang.Boolean boolean43 = client1.isBorrowed((team_001.Item) virtualBook36);
        team_001.UserBuilder userBuilder44 = new team_001.UserBuilder();
        team_001.Client client45 = userBuilder44.buildVisitor();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        team_001.VirtualBook virtualBook56 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int57 = student53.checkOverdue((team_001.Item) virtualBook56);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap58 = student53.borrowed;
        team_001.BorrowedIterator borrowedIterator59 = new team_001.BorrowedIterator(itemMap58);
        java.util.ArrayList<team_001.Item> itemList60 = client45.checkItemsOverdue(borrowedIterator59);
        java.util.ArrayList<team_001.Item> itemList61 = client1.checkItemsOverdue(borrowedIterator59);
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item62 = borrowedIterator59.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList61);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap14 = student9.borrowed;
        team_001.BorrowedIterator borrowedIterator15 = new team_001.BorrowedIterator(itemMap14);
        java.util.ArrayList<team_001.Item> itemList16 = client1.checkItemsOverdue(borrowedIterator15);
        boolean boolean17 = borrowedIterator15.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator15.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.UserBuilder userBuilder30 = userBuilder23.setUsername("");
        team_001.UserBuilder userBuilder31 = new team_001.UserBuilder();
        team_001.Client client32 = userBuilder31.buildVisitor();
        team_001.UserBuilder userBuilder34 = userBuilder31.setPassword("hi!");
        userBuilder31.password = "hi!";
        team_001.LibraryFacade libraryFacade39 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        libraryFacade39.bookKeeping("hi!", strList43);
        team_001.Library library46 = libraryFacade39.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder31.setLibrary(library46);
        team_001.UserBuilder userBuilder48 = userBuilder30.setLibrary(library46);
        userBuilder48.password = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder48);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildNonFacultyStaff();
        java.lang.String str7 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade10 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        libraryFacade10.bookKeeping("hi!", strList14);
        team_001.Library library17 = libraryFacade10.getLibrary();
        userBuilder0.lib = library17;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder20 = userBuilder0.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library17);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildNonFacultyStaff();
        java.lang.String str7 = userBuilder0.email;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder9 = userBuilder0.setPassword("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid password format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        team_001.Faculty faculty14 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter17 = new team_001.Newsletter("hi!", "");
        faculty14.subscribe(newsletter17);
        java.util.ArrayList<java.lang.String> strList19 = faculty14.getCourses();
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("hi!", strList19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = null;
        student7.borrowed = itemMap13;
        java.lang.String str15 = student7.getPassword();
        java.lang.String str16 = student7.getEmail();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int28 = student24.checkOverdue((team_001.Item) virtualBook27);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        team_001.Student student36 = new team_001.Student("", "", "hi!", strList34);
        student36.setEmail("hi!");
        student36.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap41 = student36.borrowed;
        student36.setUsername("");
        team_001.Newsletter newsletter46 = new team_001.Newsletter("hi!", "hi!");
        student36.unsubscribe(newsletter46);
        java.lang.Object obj48 = newsletter46.clone();
        student24.subscribe(newsletter46);
        student7.subscribe(newsletter46);
        java.lang.Class<?> wildcardClass51 = newsletter46.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        team_001.Student student17 = new team_001.Student("", "", "hi!", strList15);
        team_001.Magazine magazine20 = new team_001.Magazine("", "hi!");
        student17.returnItem((team_001.Item) magazine20);
        java.lang.String str22 = student17.getEmail();
        student17.setPassword("");
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook27.ID = '4';
        int int30 = student17.checkOverdue((team_001.Item) virtualBook27);
        team_001.UserBuilder userBuilder31 = new team_001.UserBuilder();
        team_001.Client client32 = userBuilder31.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap33 = client32.getSubcribed();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        team_001.Student student41 = new team_001.Student("", "", "hi!", strList39);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap42 = student41.getSubcribed();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        team_001.Student student50 = new team_001.Student("", "", "hi!", strList48);
        student50.setEmail("hi!");
        team_001.Magazine magazine55 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean56 = student50.isBorrowed((team_001.Item) magazine55);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        team_001.Student student64 = new team_001.Student("", "", "hi!", strList62);
        team_001.VirtualBook virtualBook67 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int68 = student64.checkOverdue((team_001.Item) virtualBook67);
        java.lang.Boolean boolean69 = student50.isBorrowed((team_001.Item) virtualBook67);
        java.lang.String str70 = virtualBook67.getTitle();
        student41.returnItem((team_001.Item) virtualBook67);
        virtualBook67.ID = 10;
        java.lang.Boolean boolean74 = client32.isBorrowed((team_001.Item) virtualBook67);
        boolean boolean75 = libraryFacade2.borrowItem((team_001.Client) student17, (team_001.Item) virtualBook67);
        java.lang.String str76 = virtualBook67.getTitle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "" + "'", str22.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "hi!" + "'", str70.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "hi!" + "'", str76.equals("hi!"));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        team_001.Magazine magazine12 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean13 = student7.isBorrowed((team_001.Item) magazine12);
        java.lang.Object obj14 = magazine12.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap2 = client1.getSubcribed();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap11 = student10.getSubcribed();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        student19.setEmail("hi!");
        team_001.Magazine magazine24 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean25 = student19.isBorrowed((team_001.Item) magazine24);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        team_001.Student student33 = new team_001.Student("", "", "hi!", strList31);
        team_001.VirtualBook virtualBook36 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int37 = student33.checkOverdue((team_001.Item) virtualBook36);
        java.lang.Boolean boolean38 = student19.isBorrowed((team_001.Item) virtualBook36);
        java.lang.String str39 = virtualBook36.getTitle();
        student10.returnItem((team_001.Item) virtualBook36);
        virtualBook36.ID = 10;
        java.lang.Boolean boolean43 = client1.isBorrowed((team_001.Item) virtualBook36);
        team_001.UserBuilder userBuilder44 = new team_001.UserBuilder();
        team_001.Client client45 = userBuilder44.buildVisitor();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        team_001.VirtualBook virtualBook56 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int57 = student53.checkOverdue((team_001.Item) virtualBook56);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap58 = student53.borrowed;
        team_001.BorrowedIterator borrowedIterator59 = new team_001.BorrowedIterator(itemMap58);
        java.util.ArrayList<team_001.Item> itemList60 = client45.checkItemsOverdue(borrowedIterator59);
        java.util.ArrayList<team_001.Item> itemList61 = client1.checkItemsOverdue(borrowedIterator59);
        java.lang.String str62 = client1.getPassword();
        client1.setEmail("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        team_001.NonFacultyStaff nonFacultyStaff3 = new team_001.NonFacultyStaff("", "hi!", "");
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setPassword("");
        int int10 = student7.getId();
        student7.setPassword("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1877 + "'", int10 == 1877);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        team_001.Faculty faculty6 = new team_001.Faculty("hi!", "hi!", "");
        java.util.ArrayList<java.lang.String> strList7 = faculty6.getCourses();
        team_001.Student student8 = new team_001.Student("hi!", "", "hi!", strList7);
        student8.setUsername("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        student7.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = student7.borrowed;
        team_001.BorrowedIterator borrowedIterator13 = new team_001.BorrowedIterator(itemMap12);
        boolean boolean14 = borrowedIterator13.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item15 = borrowedIterator13.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        java.lang.String str6 = userBuilder0.password;
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        team_001.Client client8 = userBuilder7.buildVisitor();
        java.lang.String str9 = userBuilder7.password;
        userBuilder7.password = "hi!";
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        team_001.Library library21 = libraryFacade14.getLibrary();
        team_001.UserBuilder userBuilder22 = userBuilder7.setLibrary(library21);
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library21);
        userBuilder0.password = "hi!";
        team_001.UserBuilder userBuilder26 = new team_001.UserBuilder();
        userBuilder26.email = "hi!";
        team_001.Library library29 = userBuilder26.lib;
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        libraryFacade42.bookKeeping("hi!", strList46);
        libraryFacade32.bookKeeping("", strList46);
        team_001.Library library50 = libraryFacade32.getLibrary();
        team_001.UserBuilder userBuilder51 = userBuilder26.setLibrary(library50);
        team_001.UserBuilder userBuilder52 = new team_001.UserBuilder();
        userBuilder52.email = "hi!";
        team_001.Library library55 = userBuilder52.lib;
        team_001.LibraryFacade libraryFacade58 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        libraryFacade58.bookKeeping("hi!", strList62);
        team_001.LibraryFacade libraryFacade68 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        libraryFacade68.bookKeeping("hi!", strList72);
        libraryFacade58.bookKeeping("", strList72);
        team_001.Library library76 = libraryFacade58.getLibrary();
        team_001.UserBuilder userBuilder77 = userBuilder52.setLibrary(library76);
        team_001.UserBuilder userBuilder78 = userBuilder51.setLibrary(library76);
        team_001.UserBuilder userBuilder79 = new team_001.UserBuilder();
        userBuilder79.email = "hi!";
        team_001.LibraryFacade libraryFacade84 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.Library library85 = libraryFacade84.getLibrary();
        team_001.UserBuilder userBuilder86 = userBuilder79.setLibrary(library85);
        userBuilder51.lib = library85;
        team_001.UserBuilder userBuilder88 = userBuilder0.setLibrary(library85);
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder90 = userBuilder88.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder88);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Library library2 = null;
        team_001.UserBuilder userBuilder3 = userBuilder0.setLibrary(library2);
        java.lang.String str4 = userBuilder0.email;
        team_001.Library library5 = userBuilder0.lib;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder7 = userBuilder0.setPassword("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid password format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library5);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        java.lang.String str6 = userBuilder0.password;
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        team_001.Client client8 = userBuilder7.buildVisitor();
        java.lang.String str9 = userBuilder7.password;
        userBuilder7.password = "hi!";
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        team_001.Library library21 = libraryFacade14.getLibrary();
        team_001.UserBuilder userBuilder22 = userBuilder7.setLibrary(library21);
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library21);
        userBuilder0.password = "hi!";
        team_001.UserBuilder userBuilder26 = new team_001.UserBuilder();
        userBuilder26.email = "hi!";
        team_001.Library library29 = userBuilder26.lib;
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        libraryFacade42.bookKeeping("hi!", strList46);
        libraryFacade32.bookKeeping("", strList46);
        team_001.Library library50 = libraryFacade32.getLibrary();
        team_001.UserBuilder userBuilder51 = userBuilder26.setLibrary(library50);
        team_001.UserBuilder userBuilder52 = new team_001.UserBuilder();
        userBuilder52.email = "hi!";
        team_001.Library library55 = userBuilder52.lib;
        team_001.LibraryFacade libraryFacade58 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        libraryFacade58.bookKeeping("hi!", strList62);
        team_001.LibraryFacade libraryFacade68 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        libraryFacade68.bookKeeping("hi!", strList72);
        libraryFacade58.bookKeeping("", strList72);
        team_001.Library library76 = libraryFacade58.getLibrary();
        team_001.UserBuilder userBuilder77 = userBuilder52.setLibrary(library76);
        team_001.UserBuilder userBuilder78 = userBuilder51.setLibrary(library76);
        team_001.UserBuilder userBuilder79 = new team_001.UserBuilder();
        userBuilder79.email = "hi!";
        team_001.LibraryFacade libraryFacade84 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.Library library85 = libraryFacade84.getLibrary();
        team_001.UserBuilder userBuilder86 = userBuilder79.setLibrary(library85);
        userBuilder51.lib = library85;
        team_001.UserBuilder userBuilder88 = userBuilder0.setLibrary(library85);
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder90 = userBuilder0.setPassword("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid password format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder88);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        team_001.Client client16 = userBuilder0.buildNonFacultyStaff();
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder18 = userBuilder0.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client16);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade9 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        team_001.Student student17 = new team_001.Student("", "", "hi!", strList15);
        team_001.Magazine magazine20 = new team_001.Magazine("", "hi!");
        student17.returnItem((team_001.Item) magazine20);
        java.lang.String str22 = student17.getEmail();
        student17.setPassword("");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        team_001.Student student32 = new team_001.Student("", "", "hi!", strList30);
        team_001.Magazine magazine35 = new team_001.Magazine("", "hi!");
        student32.returnItem((team_001.Item) magazine35);
        java.lang.String str37 = student32.getEmail();
        student32.setPassword("");
        team_001.VirtualBook virtualBook42 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook42.ID = '4';
        int int45 = student32.checkOverdue((team_001.Item) virtualBook42);
        java.lang.String str46 = virtualBook42.getTitle();
        int int47 = libraryFacade9.checkOverdue((team_001.Client) student17, (team_001.Item) virtualBook42);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        team_001.Student student55 = new team_001.Student("", "", "hi!", strList53);
        team_001.Magazine magazine58 = new team_001.Magazine("", "hi!");
        student55.returnItem((team_001.Item) magazine58);
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        team_001.Student student67 = new team_001.Student("", "", "hi!", strList65);
        team_001.Magazine magazine70 = new team_001.Magazine("", "hi!");
        student67.returnItem((team_001.Item) magazine70);
        java.lang.String str72 = student67.getEmail();
        student67.setPassword("");
        team_001.VirtualBook virtualBook77 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook77.ID = '4';
        int int80 = student67.checkOverdue((team_001.Item) virtualBook77);
        java.lang.String str81 = virtualBook77.getTitle();
        boolean boolean82 = student55.borrowItem((team_001.Item) virtualBook77);
        student17.returnItem((team_001.Item) virtualBook77);
        team_001.Newsletter newsletter86 = team_001.ItemFactory.createNewsLetter("", "hi!");
        student17.subscribe(newsletter86);
        client6.subscribe(newsletter86);
        java.lang.Class<?> wildcardClass89 = client6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "" + "'", str22.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "" + "'", str37.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "hi!" + "'", str46.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str72 + "' != '" + "" + "'", str72.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str81 + "' != '" + "hi!" + "'", str81.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.Library library3 = libraryFacade2.getLibrary();
        team_001.Faculty faculty8 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter11 = new team_001.Newsletter("hi!", "");
        faculty8.subscribe(newsletter11);
        java.util.ArrayList<java.lang.String> strList13 = faculty8.getCourses();
        java.util.ArrayList<java.lang.String> strList14 = faculty8.getCourses();
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("", strList14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        java.lang.String str26 = userBuilder0.password;
        team_001.UserBuilder userBuilder27 = new team_001.UserBuilder();
        team_001.Client client28 = userBuilder27.buildVisitor();
        java.lang.String str29 = userBuilder27.password;
        userBuilder27.password = "hi!";
        team_001.LibraryFacade libraryFacade34 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        libraryFacade34.bookKeeping("hi!", strList38);
        team_001.Library library41 = libraryFacade34.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder27.setLibrary(library41);
        userBuilder42.password = "";
        team_001.LibraryFacade libraryFacade47 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        libraryFacade47.bookKeeping("hi!", strList51);
        team_001.LibraryFacade libraryFacade57 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        libraryFacade57.bookKeeping("hi!", strList61);
        libraryFacade47.bookKeeping("", strList61);
        team_001.Library library65 = libraryFacade47.getLibrary();
        team_001.Library library66 = libraryFacade47.getLibrary();
        userBuilder42.lib = library66;
        team_001.UserBuilder userBuilder68 = userBuilder0.setLibrary(library66);
        team_001.Client client69 = userBuilder0.buildStudent();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client69);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.lang.String str8 = student7.getEmail();
        student7.setUsername("hi!");
        student7.setPassword("");
        student7.setPassword("hi!");
        student7.setId(246);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        student7.setEmail("");
        student7.setPassword("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        team_001.Client client16 = userBuilder0.buildNonFacultyStaff();
        team_001.CD cD19 = new team_001.CD("", "");
        client16.returnItem((team_001.Item) cD19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client16);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildStudent();
        team_001.UserBuilder userBuilder2 = new team_001.UserBuilder();
        team_001.Client client3 = userBuilder2.buildVisitor();
        team_001.UserBuilder userBuilder5 = userBuilder2.setPassword("hi!");
        userBuilder2.password = "hi!";
        team_001.Client client8 = userBuilder2.buildStudent();
        team_001.Library library9 = userBuilder2.lib;
        team_001.UserBuilder userBuilder10 = new team_001.UserBuilder();
        userBuilder10.email = "hi!";
        team_001.Library library13 = userBuilder10.lib;
        team_001.LibraryFacade libraryFacade16 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        libraryFacade16.bookKeeping("hi!", strList20);
        team_001.LibraryFacade libraryFacade26 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        libraryFacade26.bookKeeping("hi!", strList30);
        libraryFacade16.bookKeeping("", strList30);
        team_001.Library library34 = libraryFacade16.getLibrary();
        team_001.UserBuilder userBuilder35 = userBuilder10.setLibrary(library34);
        userBuilder2.lib = library34;
        userBuilder0.lib = library34;
        userBuilder0.password = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder35);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade28 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        team_001.Student student36 = new team_001.Student("", "", "hi!", strList34);
        team_001.Magazine magazine39 = new team_001.Magazine("", "hi!");
        student36.returnItem((team_001.Item) magazine39);
        java.lang.String str41 = student36.getEmail();
        team_001.CD cD44 = new team_001.CD("", "");
        boolean boolean45 = libraryFacade28.borrowItem((team_001.Client) student36, (team_001.Item) cD44);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        student53.setEmail("hi!");
        team_001.Magazine magazine58 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean59 = student53.isBorrowed((team_001.Item) magazine58);
        boolean boolean60 = student36.borrowItem((team_001.Item) magazine58);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        team_001.Student student68 = new team_001.Student("", "", "hi!", strList66);
        team_001.VirtualBook virtualBook71 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int72 = student68.checkOverdue((team_001.Item) virtualBook71);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap73 = student68.borrowed;
        team_001.BorrowedIterator borrowedIterator74 = new team_001.BorrowedIterator(itemMap73);
        student36.borrowed = itemMap73;
        client25.borrowed = itemMap73;
        team_001.BorrowedIterator borrowedIterator77 = new team_001.BorrowedIterator(itemMap73);
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item78 = borrowedIterator77.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "" + "'", str41.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap73);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        java.lang.String str26 = userBuilder0.password;
        team_001.Client client27 = userBuilder0.buildStudent();
        java.lang.String str28 = userBuilder0.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder24.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = new team_001.UserBuilder();
        team_001.Client client27 = userBuilder26.buildVisitor();
        team_001.UserBuilder userBuilder29 = userBuilder26.setPassword("hi!");
        userBuilder26.password = "hi!";
        team_001.Client client32 = userBuilder26.buildNonFacultyStaff();
        java.lang.String str33 = userBuilder26.password;
        team_001.LibraryFacade libraryFacade36 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        libraryFacade36.bookKeeping("hi!", strList40);
        team_001.Library library43 = libraryFacade36.getLibrary();
        userBuilder26.lib = library43;
        userBuilder24.lib = library43;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "hi!" + "'", str33.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library43);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.Client client48 = userBuilder24.buildNonFacultyStaff();
        team_001.Client client49 = userBuilder24.buildNonFacultyStaff();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client49);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        student7.setPassword("");
        java.lang.Class<?> wildcardClass14 = student7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap8 = student7.getSubcribed();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        team_001.Student student16 = new team_001.Student("", "", "hi!", strList14);
        team_001.VirtualBook virtualBook19 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int20 = student16.checkOverdue((team_001.Item) virtualBook19);
        virtualBook19.ID = 10;
        int int23 = student7.checkOverdue((team_001.Item) virtualBook19);
        java.lang.String str24 = student7.getUsername();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        java.lang.String str26 = userBuilder0.password;
        team_001.Client client27 = userBuilder0.buildStudent();
        team_001.Client client28 = userBuilder0.buildNonFacultyStaff();
        team_001.LibraryFacade libraryFacade31 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        libraryFacade31.bookKeeping("hi!", strList35);
        team_001.LibraryFacade libraryFacade41 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        libraryFacade41.bookKeeping("hi!", strList45);
        libraryFacade31.bookKeeping("", strList45);
        team_001.Library library49 = libraryFacade31.getLibrary();
        team_001.Library library50 = libraryFacade31.getLibrary();
        team_001.Faculty faculty54 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook57 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean58 = libraryFacade31.borrowItem((team_001.Client) faculty54, (team_001.Item) virtualBook57);
        faculty54.setId((int) (byte) -1);
        java.util.ArrayList<java.lang.String> strList61 = faculty54.getCourses();
        team_001.LibraryFacade libraryFacade64 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        team_001.Student student72 = new team_001.Student("", "", "hi!", strList70);
        team_001.Magazine magazine75 = new team_001.Magazine("", "hi!");
        student72.returnItem((team_001.Item) magazine75);
        java.lang.String str77 = student72.getEmail();
        team_001.CD cD80 = new team_001.CD("", "");
        boolean boolean81 = libraryFacade64.borrowItem((team_001.Client) student72, (team_001.Item) cD80);
        java.lang.String[] strArray86 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        team_001.Student student89 = new team_001.Student("", "", "hi!", strList87);
        student89.setEmail("hi!");
        team_001.Magazine magazine94 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean95 = student89.isBorrowed((team_001.Item) magazine94);
        boolean boolean96 = student72.borrowItem((team_001.Item) magazine94);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap97 = student72.borrowed;
        faculty54.setBorrowed(itemMap97);
        client28.setBorrowed(itemMap97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str77 + "' != '" + "" + "'", str77.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap97);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Library library2 = null;
        team_001.UserBuilder userBuilder3 = userBuilder0.setLibrary(library2);
        java.lang.String str4 = userBuilder0.email;
        team_001.Library library5 = userBuilder0.lib;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder7 = userBuilder0.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library5);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        student7.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = student7.borrowed;
        team_001.BorrowedIterator borrowedIterator13 = new team_001.BorrowedIterator(itemMap12);
        boolean boolean14 = borrowedIterator13.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator13.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        team_001.CD cD2 = new team_001.CD("", "hi!");
        java.lang.Class<?> wildcardClass3 = cD2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Student student41 = new team_001.Student("hi!", "", "", strList37);
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("", strList37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        team_001.Client client6 = userManagement1.writeUser("", "hi!", "hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = userManagement1.readUsers("", "hi!");
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(client6);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        java.lang.String str6 = userBuilder0.password;
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        team_001.Client client8 = userBuilder7.buildVisitor();
        java.lang.String str9 = userBuilder7.password;
        userBuilder7.password = "hi!";
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        team_001.Library library21 = libraryFacade14.getLibrary();
        team_001.UserBuilder userBuilder22 = userBuilder7.setLibrary(library21);
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library21);
        userBuilder0.email = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        team_001.Faculty faculty3 = new team_001.Faculty("hi!", "hi!", "hi!");
        java.util.ArrayList<java.lang.String> strList4 = faculty3.getCourses();
        java.util.ArrayList<java.lang.String> strList5 = faculty3.getCourses();
        team_001.UserBuilder userBuilder6 = new team_001.UserBuilder();
        team_001.Client client7 = userBuilder6.buildVisitor();
        team_001.LibraryFacade libraryFacade10 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        libraryFacade10.bookKeeping("hi!", strList14);
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        libraryFacade10.bookKeeping("", strList24);
        team_001.Library library28 = libraryFacade10.getLibrary();
        team_001.UserBuilder userBuilder29 = userBuilder6.setLibrary(library28);
        team_001.Client client30 = userBuilder29.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder32 = userBuilder29.setPassword("hi!");
        team_001.Client client33 = userBuilder32.buildStudent();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        team_001.Student student41 = new team_001.Student("", "", "hi!", strList39);
        team_001.Magazine magazine44 = new team_001.Magazine("", "hi!");
        student41.returnItem((team_001.Item) magazine44);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        team_001.Magazine magazine56 = new team_001.Magazine("", "hi!");
        student53.returnItem((team_001.Item) magazine56);
        java.lang.String str58 = student53.getEmail();
        student53.setPassword("");
        team_001.VirtualBook virtualBook63 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook63.ID = '4';
        int int66 = student53.checkOverdue((team_001.Item) virtualBook63);
        java.lang.String str67 = virtualBook63.getTitle();
        boolean boolean68 = student41.borrowItem((team_001.Item) virtualBook63);
        team_001.Newsletter newsletter71 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean72 = student41.borrowItem((team_001.Item) newsletter71);
        client33.unsubscribe(newsletter71);
        int int74 = faculty3.checkOverdue((team_001.Item) newsletter71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "" + "'", str58.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "hi!" + "'", str67.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Client client27 = userBuilder23.buildNonFacultyStaff();
        client27.setPassword("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.UserBuilder userBuilder30 = userBuilder23.setUsername("");
        team_001.Library library31 = userBuilder30.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library31);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder27 = userBuilder0.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setPassword("");
        int int10 = student7.getId();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap11 = student7.borrowed;
        student7.setId(1403);
        student7.setPassword("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2086 + "'", int10 == 2086);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap11);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap8 = student7.getSubcribed();
        java.lang.Class<?> wildcardClass9 = newsletterMap8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        userBuilder17.email = "hi!";
        team_001.Library library20 = userBuilder17.lib;
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Library library41 = libraryFacade23.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder17.setLibrary(library41);
        userBuilder0.lib = library41;
        team_001.Client client44 = userBuilder0.buildNonFacultyStaff();
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder46 = userBuilder0.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client44);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap14 = student9.borrowed;
        team_001.BorrowedIterator borrowedIterator15 = new team_001.BorrowedIterator(itemMap14);
        java.util.ArrayList<team_001.Item> itemList16 = client1.checkItemsOverdue(borrowedIterator15);
        team_001.Faculty faculty20 = new team_001.Faculty("", "hi!", "hi!");
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        team_001.Student student28 = new team_001.Student("", "", "hi!", strList26);
        team_001.VirtualBook virtualBook31 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int32 = student28.checkOverdue((team_001.Item) virtualBook31);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        team_001.Student student40 = new team_001.Student("", "", "hi!", strList38);
        team_001.VirtualBook virtualBook43 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int44 = student40.checkOverdue((team_001.Item) virtualBook43);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap45 = student40.borrowed;
        team_001.BorrowedIterator borrowedIterator46 = new team_001.BorrowedIterator(itemMap45);
        student28.borrowed = itemMap45;
        faculty20.borrowed = itemMap45;
        client1.setBorrowed(itemMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap45);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        team_001.Client.current_id = (short) -1;
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.UserBuilder userBuilder26 = userBuilder0.setUsername("hi!");
        userBuilder26.email = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.Library library48 = userBuilder47.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library48);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        team_001.Magazine magazine2 = new team_001.Magazine("", "hi!");
        int int3 = magazine2.getID();
        java.lang.String str4 = magazine2.getTitle();
        java.lang.String str5 = magazine2.getAuthor();
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 6513 + "'", int3 == 6513);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "" + "'", str4.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        java.lang.String str6 = userBuilder0.password;
        java.lang.String str7 = userBuilder0.password;
        userBuilder0.email = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.UserBuilder userBuilder49 = userBuilder24.setUsername("hi!");
        team_001.Client client50 = userBuilder24.buildFaculty();
        java.lang.String str51 = userBuilder24.email;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        userBuilder23.email = "";
        team_001.UserBuilder userBuilder27 = userBuilder23.setUsername("hi!");
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder29 = userBuilder23.setPassword("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid password format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder27);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.LibraryFacade libraryFacade25 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        team_001.Student student33 = new team_001.Student("", "", "hi!", strList31);
        team_001.Magazine magazine36 = new team_001.Magazine("", "hi!");
        student33.returnItem((team_001.Item) magazine36);
        java.lang.String str38 = student33.getEmail();
        team_001.CD cD41 = new team_001.CD("", "");
        boolean boolean42 = libraryFacade25.borrowItem((team_001.Client) student33, (team_001.Item) cD41);
        team_001.LibraryFacade libraryFacade46 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        libraryFacade46.bookKeeping("hi!", strList50);
        libraryFacade25.bookKeeping("", strList50);
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("hi!", strList50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "" + "'", str38.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        int int12 = student7.getId();
        student7.setUsername("");
        team_001.LibraryFacade libraryFacade17 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        team_001.CD cD33 = new team_001.CD("", "");
        boolean boolean34 = libraryFacade17.borrowItem((team_001.Client) student25, (team_001.Item) cD33);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        team_001.Student student42 = new team_001.Student("", "", "hi!", strList40);
        student42.setEmail("hi!");
        team_001.Magazine magazine47 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean48 = student42.isBorrowed((team_001.Item) magazine47);
        boolean boolean49 = student25.borrowItem((team_001.Item) magazine47);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        team_001.Student student57 = new team_001.Student("", "", "hi!", strList55);
        team_001.VirtualBook virtualBook60 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int61 = student57.checkOverdue((team_001.Item) virtualBook60);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap62 = student57.borrowed;
        team_001.BorrowedIterator borrowedIterator63 = new team_001.BorrowedIterator(itemMap62);
        student25.borrowed = itemMap62;
        student7.borrowed = itemMap62;
        student7.setUsername("hi!");
        student7.setEmail("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 29 + "'", int12 == 29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap62);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        java.lang.String str6 = userBuilder0.password;
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        team_001.Client client8 = userBuilder7.buildVisitor();
        java.lang.String str9 = userBuilder7.password;
        userBuilder7.password = "hi!";
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        team_001.Library library21 = libraryFacade14.getLibrary();
        team_001.UserBuilder userBuilder22 = userBuilder7.setLibrary(library21);
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library21);
        userBuilder0.password = "hi!";
        team_001.UserBuilder userBuilder26 = new team_001.UserBuilder();
        userBuilder26.email = "hi!";
        team_001.Library library29 = userBuilder26.lib;
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        libraryFacade42.bookKeeping("hi!", strList46);
        libraryFacade32.bookKeeping("", strList46);
        team_001.Library library50 = libraryFacade32.getLibrary();
        team_001.UserBuilder userBuilder51 = userBuilder26.setLibrary(library50);
        team_001.UserBuilder userBuilder52 = new team_001.UserBuilder();
        userBuilder52.email = "hi!";
        team_001.Library library55 = userBuilder52.lib;
        team_001.LibraryFacade libraryFacade58 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        libraryFacade58.bookKeeping("hi!", strList62);
        team_001.LibraryFacade libraryFacade68 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        libraryFacade68.bookKeeping("hi!", strList72);
        libraryFacade58.bookKeeping("", strList72);
        team_001.Library library76 = libraryFacade58.getLibrary();
        team_001.UserBuilder userBuilder77 = userBuilder52.setLibrary(library76);
        team_001.UserBuilder userBuilder78 = userBuilder51.setLibrary(library76);
        team_001.UserBuilder userBuilder79 = new team_001.UserBuilder();
        userBuilder79.email = "hi!";
        team_001.LibraryFacade libraryFacade84 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.Library library85 = libraryFacade84.getLibrary();
        team_001.UserBuilder userBuilder86 = userBuilder79.setLibrary(library85);
        userBuilder51.lib = library85;
        team_001.UserBuilder userBuilder88 = userBuilder0.setLibrary(library85);
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder90 = userBuilder0.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder88);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        student7.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = student7.borrowed;
        java.lang.String str13 = student7.getEmail();
        int int14 = student7.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!" + "'", str13.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 49 + "'", int14 == 49);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter28 = new team_001.Newsletter("hi!", "");
        faculty25.subscribe(newsletter28);
        java.util.ArrayList<java.lang.String> strList30 = faculty25.getCourses();
        java.util.ArrayList<java.lang.String> strList31 = faculty25.getCourses();
        java.util.ArrayList<java.lang.String> strList32 = faculty25.getCourses();
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("hi!", strList32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList32);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter6 = new team_001.Newsletter("hi!", "");
        faculty3.subscribe(newsletter6);
        java.util.ArrayList<java.lang.String> strList8 = faculty3.getCourses();
        java.lang.String str9 = faculty3.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!" + "'", str9.equals("hi!"));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap12 = student7.getSubcribed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap12);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap10 = libraryFacade2.getInventory();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        java.lang.String str19 = student18.getEmail();
        student18.setUsername("hi!");
        student18.setPassword("");
        team_001.VirtualBook virtualBook26 = new team_001.VirtualBook("hi!", "");
        int int27 = libraryFacade2.checkOverdue((team_001.Client) student18, (team_001.Item) virtualBook26);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        team_001.visitor visitor40 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine43 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean44 = libraryFacade30.borrowItem((team_001.Client) visitor40, (team_001.Item) magazine43);
        visitor40.setPassword("hi!");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        team_001.Student student54 = new team_001.Student("", "", "hi!", strList52);
        team_001.VirtualBook virtualBook57 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int58 = student54.checkOverdue((team_001.Item) virtualBook57);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap59 = student54.borrowed;
        team_001.BorrowedIterator borrowedIterator60 = new team_001.BorrowedIterator(itemMap59);
        team_001.BorrowedIterator borrowedIterator61 = new team_001.BorrowedIterator(itemMap59);
        java.util.ArrayList<team_001.Item> itemList62 = visitor40.checkItemsOverdue(borrowedIterator61);
        boolean boolean63 = borrowedIterator61.hasNext();
        java.util.ArrayList<team_001.Item> itemList64 = student18.checkItemsOverdue(borrowedIterator61);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap65 = student18.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "" + "'", str19.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap65);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade8 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        libraryFacade8.bookKeeping("hi!", strList12);
        team_001.Library library15 = libraryFacade8.getLibrary();
        team_001.UserBuilder userBuilder16 = userBuilder0.setLibrary(library15);
        userBuilder0.password = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder16);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        visitor12.setPassword("hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        team_001.Student student26 = new team_001.Student("", "", "hi!", strList24);
        team_001.VirtualBook virtualBook29 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int30 = student26.checkOverdue((team_001.Item) virtualBook29);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap31 = student26.borrowed;
        team_001.BorrowedIterator borrowedIterator32 = new team_001.BorrowedIterator(itemMap31);
        team_001.BorrowedIterator borrowedIterator33 = new team_001.BorrowedIterator(itemMap31);
        java.util.ArrayList<team_001.Item> itemList34 = visitor12.checkItemsOverdue(borrowedIterator33);
        boolean boolean35 = borrowedIterator33.hasNext();
        boolean boolean36 = borrowedIterator33.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        team_001.Magazine magazine51 = new team_001.Magazine("", "hi!");
        student48.returnItem((team_001.Item) magazine51);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "", "hi!", strList58);
        team_001.Magazine magazine63 = new team_001.Magazine("", "hi!");
        student60.returnItem((team_001.Item) magazine63);
        java.lang.String str65 = student60.getEmail();
        student60.setPassword("");
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook70.ID = '4';
        int int73 = student60.checkOverdue((team_001.Item) virtualBook70);
        java.lang.String str74 = virtualBook70.getTitle();
        boolean boolean75 = student48.borrowItem((team_001.Item) virtualBook70);
        student10.returnItem((team_001.Item) virtualBook70);
        team_001.Newsletter newsletter79 = team_001.ItemFactory.createNewsLetter("", "hi!");
        student10.subscribe(newsletter79);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap81 = student10.borrowed;
        team_001.BorrowedIterator borrowedIterator82 = new team_001.BorrowedIterator(itemMap81);
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item83 = borrowedIterator82.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "hi!" + "'", str74.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap81);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        team_001.Client.current_id = 6799;
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        team_001.NonFacultyStaff nonFacultyStaff3 = new team_001.NonFacultyStaff("", "", "hi!");
        team_001.UserBuilder userBuilder4 = new team_001.UserBuilder();
        team_001.Client client5 = userBuilder4.buildVisitor();
        team_001.Client client6 = userBuilder4.buildNonFacultyStaff();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        team_001.Student student14 = new team_001.Student("", "", "hi!", strList12);
        team_001.Magazine magazine17 = new team_001.Magazine("", "hi!");
        student14.returnItem((team_001.Item) magazine17);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        team_001.Student student26 = new team_001.Student("", "", "hi!", strList24);
        team_001.Magazine magazine29 = new team_001.Magazine("", "hi!");
        student26.returnItem((team_001.Item) magazine29);
        java.lang.String str31 = student26.getEmail();
        student26.setPassword("");
        team_001.VirtualBook virtualBook36 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook36.ID = '4';
        int int39 = student26.checkOverdue((team_001.Item) virtualBook36);
        java.lang.String str40 = virtualBook36.getTitle();
        boolean boolean41 = student14.borrowItem((team_001.Item) virtualBook36);
        client6.returnItem((team_001.Item) virtualBook36);
        int int43 = virtualBook36.getID();
        nonFacultyStaff3.returnItem((team_001.Item) virtualBook36);
        virtualBook36.ID = 0;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "" + "'", str31.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "hi!" + "'", str40.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.Library library25 = userBuilder23.lib;
        java.lang.String str26 = userBuilder23.email;
        userBuilder23.password = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        team_001.VirtualBook virtualBook2 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook2.ID = '4';
        virtualBook2.ID = (short) 100;
        virtualBook2.ID = 36;
        java.lang.Object obj9 = virtualBook2.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        team_001.Magazine magazine22 = new team_001.Magazine("", "hi!");
        student19.returnItem((team_001.Item) magazine22);
        java.lang.String str24 = student19.getEmail();
        student19.setPassword("");
        team_001.VirtualBook virtualBook29 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook29.ID = '4';
        int int32 = student19.checkOverdue((team_001.Item) virtualBook29);
        java.lang.String str33 = virtualBook29.getTitle();
        boolean boolean34 = student7.borrowItem((team_001.Item) virtualBook29);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap35 = null;
        student7.borrowed = itemMap35;
        java.lang.String str37 = student7.getPassword();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap38 = student7.borrowed;
        student7.setId(966);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "hi!" + "'", str33.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "hi!" + "'", str37.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(itemMap38);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        team_001.Client.current_id = 6386;
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        faculty25.setId((int) (byte) -1);
        faculty25.setPassword("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap14 = student9.borrowed;
        team_001.BorrowedIterator borrowedIterator15 = new team_001.BorrowedIterator(itemMap14);
        java.util.ArrayList<team_001.Item> itemList16 = client1.checkItemsOverdue(borrowedIterator15);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int28 = student24.checkOverdue((team_001.Item) virtualBook27);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap29 = student24.borrowed;
        team_001.BorrowedIterator borrowedIterator30 = new team_001.BorrowedIterator(itemMap29);
        client1.setBorrowed(itemMap29);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap40 = student39.getSubcribed();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        student48.setEmail("hi!");
        team_001.Magazine magazine53 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean54 = student48.isBorrowed((team_001.Item) magazine53);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        team_001.Student student62 = new team_001.Student("", "", "hi!", strList60);
        team_001.VirtualBook virtualBook65 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int66 = student62.checkOverdue((team_001.Item) virtualBook65);
        java.lang.Boolean boolean67 = student48.isBorrowed((team_001.Item) virtualBook65);
        java.lang.String str68 = virtualBook65.getTitle();
        student39.returnItem((team_001.Item) virtualBook65);
        int int70 = virtualBook65.ID;
        int int71 = virtualBook65.ID;
        int int72 = client1.checkOverdue((team_001.Item) virtualBook65);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap73 = client1.borrowed;
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap74 = client1.getSubcribed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "hi!" + "'", str68.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 7409 + "'", int70 == 7409);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 7409 + "'", int71 == 7409);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap74);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap21 = libraryFacade2.getInventory();
        team_001.Library library22 = libraryFacade2.getLibrary();
        team_001.LibraryFacade libraryFacade25 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        libraryFacade25.bookKeeping("hi!", strList29);
        team_001.LibraryFacade libraryFacade35 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        libraryFacade35.bookKeeping("hi!", strList39);
        libraryFacade25.bookKeeping("", strList39);
        team_001.Library library43 = libraryFacade25.getLibrary();
        team_001.Library library44 = libraryFacade25.getLibrary();
        team_001.Faculty faculty48 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook51 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean52 = libraryFacade25.borrowItem((team_001.Client) faculty48, (team_001.Item) virtualBook51);
        faculty48.setId((int) (byte) -1);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        team_001.Student student62 = new team_001.Student("", "", "hi!", strList60);
        team_001.Magazine magazine65 = new team_001.Magazine("", "hi!");
        student62.returnItem((team_001.Item) magazine65);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        team_001.Student student74 = new team_001.Student("", "", "hi!", strList72);
        team_001.Magazine magazine77 = new team_001.Magazine("", "hi!");
        student74.returnItem((team_001.Item) magazine77);
        java.lang.String str79 = student74.getEmail();
        student74.setPassword("");
        team_001.VirtualBook virtualBook84 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook84.ID = '4';
        int int87 = student74.checkOverdue((team_001.Item) virtualBook84);
        java.lang.String str88 = virtualBook84.getTitle();
        boolean boolean89 = student62.borrowItem((team_001.Item) virtualBook84);
        team_001.Newsletter newsletter92 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean93 = student62.borrowItem((team_001.Item) newsletter92);
        int int94 = faculty48.checkOverdue((team_001.Item) newsletter92);
        team_001.PhysicalBook physicalBook97 = team_001.ItemFactory.createPhysicalBook("hi!", "");
        int int98 = libraryFacade2.checkOverdue((team_001.Client) faculty48, (team_001.Item) physicalBook97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str79 + "' != '" + "" + "'", str79.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str88 + "' != '" + "hi!" + "'", str88.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        userBuilder17.email = "hi!";
        team_001.Library library20 = userBuilder17.lib;
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Library library41 = libraryFacade23.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder17.setLibrary(library41);
        userBuilder0.lib = library41;
        team_001.Client client44 = userBuilder0.buildNonFacultyStaff();
        client44.setEmail("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client44);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        team_001.Client.current_id = 0;
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        team_001.VirtualBook virtualBook2 = team_001.ItemFactory.createVirtualBook("", "hi!");
        java.lang.String str3 = virtualBook2.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!" + "'", str3.equals("hi!"));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        java.lang.String str6 = userBuilder0.password;
        team_001.Client client7 = userBuilder0.buildNonFacultyStaff();
        team_001.LibraryFacade libraryFacade10 = new team_001.LibraryFacade("", "");
        team_001.Library library11 = libraryFacade10.getLibrary();
        userBuilder0.lib = library11;
        team_001.UserBuilder userBuilder14 = userBuilder0.setPassword("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder14);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        java.lang.String str29 = userBuilder23.password;
        team_001.UserBuilder userBuilder31 = userBuilder23.setUsername("hi!");
        team_001.Client client32 = userBuilder31.buildStudent();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "hi!" + "'", str29.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client32);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.Client client48 = userBuilder47.buildNonFacultyStaff();
        team_001.LibraryFacade libraryFacade51 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        libraryFacade51.bookKeeping("hi!", strList55);
        team_001.LibraryFacade libraryFacade61 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        libraryFacade61.bookKeeping("hi!", strList65);
        libraryFacade51.bookKeeping("", strList65);
        team_001.Library library69 = libraryFacade51.getLibrary();
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        team_001.Student student77 = new team_001.Student("", "", "hi!", strList75);
        team_001.Newsletter newsletter80 = new team_001.Newsletter("hi!", "hi!");
        int int81 = student77.checkOverdue((team_001.Item) newsletter80);
        team_001.Magazine magazine84 = team_001.ItemFactory.createMagazine("", "");
        magazine84.ID = 1961;
        boolean boolean87 = libraryFacade51.borrowItem((team_001.Client) student77, (team_001.Item) magazine84);
        client48.returnItem((team_001.Item) magazine84);
        client48.setId(6091);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.Client client48 = userBuilder47.buildNonFacultyStaff();
        team_001.Client client49 = userBuilder47.buildNonFacultyStaff();
        java.lang.String str50 = client49.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        team_001.LibraryFacade libraryFacade6 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        libraryFacade6.bookKeeping("hi!", strList10);
        team_001.LibraryFacade libraryFacade16 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        libraryFacade16.bookKeeping("hi!", strList20);
        libraryFacade6.bookKeeping("", strList20);
        team_001.Library library24 = libraryFacade6.getLibrary();
        team_001.Library library25 = libraryFacade6.getLibrary();
        team_001.Faculty faculty29 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook32 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean33 = libraryFacade6.borrowItem((team_001.Client) faculty29, (team_001.Item) virtualBook32);
        java.util.ArrayList<java.lang.String> strList34 = faculty29.getCourses();
        java.util.ArrayList<java.lang.String> strList35 = faculty29.getCourses();
        java.util.ArrayList<java.lang.String> strList36 = faculty29.getCourses();
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("", strList36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList36);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap17 = libraryFacade2.getInventory();
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        team_001.Student student47 = new team_001.Student("", "", "hi!", strList45);
        student47.setEmail("hi!");
        student47.setEmail("hi!");
        team_001.PhysicalBook physicalBook54 = new team_001.PhysicalBook("", "hi!");
        boolean boolean55 = libraryFacade20.borrowItem((team_001.Client) student47, (team_001.Item) physicalBook54);
        java.lang.String str56 = student47.getEmail();
        team_001.Magazine magazine59 = new team_001.Magazine("", "hi!");
        int int60 = magazine59.getID();
        boolean boolean61 = libraryFacade2.borrowItem((team_001.Client) student47, (team_001.Item) magazine59);
        team_001.LibraryFacade libraryFacade68 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        libraryFacade68.bookKeeping("hi!", strList72);
        team_001.LibraryFacade libraryFacade78 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray81 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        libraryFacade78.bookKeeping("hi!", strList82);
        libraryFacade68.bookKeeping("", strList82);
        team_001.Student student86 = new team_001.Student("hi!", "", "", strList82);
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("hi!", strList82);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "hi!" + "'", str56.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 7674 + "'", int60 == 7674);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setUsername("hi!");
        team_001.UserBuilder userBuilder28 = userBuilder26.setUsername("");
        team_001.LibraryFacade libraryFacade31 = new team_001.LibraryFacade("", "");
        team_001.Library library32 = libraryFacade31.getLibrary();
        team_001.UserBuilder userBuilder33 = userBuilder26.setLibrary(library32);
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder35 = userBuilder33.setPassword("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid password format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder33);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        java.lang.String str6 = userBuilder0.password;
        java.lang.String str7 = userBuilder0.password;
        team_001.Client client8 = userBuilder0.buildNonFacultyStaff();
        team_001.LibraryFacade libraryFacade11 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        team_001.Student student22 = new team_001.Student("", "", "hi!", strList20);
        team_001.Magazine magazine25 = new team_001.Magazine("", "hi!");
        student22.returnItem((team_001.Item) magazine25);
        java.lang.String str27 = student22.getEmail();
        team_001.CD cD30 = new team_001.CD("", "");
        boolean boolean31 = libraryFacade14.borrowItem((team_001.Client) student22, (team_001.Item) cD30);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        student39.setEmail("hi!");
        team_001.Magazine magazine44 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean45 = student39.isBorrowed((team_001.Item) magazine44);
        boolean boolean46 = student22.borrowItem((team_001.Item) magazine44);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        team_001.Student student54 = new team_001.Student("", "", "hi!", strList52);
        team_001.Magazine magazine57 = new team_001.Magazine("", "hi!");
        student54.returnItem((team_001.Item) magazine57);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        team_001.Student student66 = new team_001.Student("", "", "hi!", strList64);
        team_001.Magazine magazine69 = new team_001.Magazine("", "hi!");
        student66.returnItem((team_001.Item) magazine69);
        java.lang.String str71 = student66.getEmail();
        student66.setPassword("");
        team_001.VirtualBook virtualBook76 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook76.ID = '4';
        int int79 = student66.checkOverdue((team_001.Item) virtualBook76);
        java.lang.String str80 = virtualBook76.getTitle();
        boolean boolean81 = student54.borrowItem((team_001.Item) virtualBook76);
        team_001.Newsletter newsletter84 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean85 = student54.borrowItem((team_001.Item) newsletter84);
        int int86 = newsletter84.ID;
        int int87 = libraryFacade11.checkOverdue((team_001.Client) student22, (team_001.Item) newsletter84);
        team_001.Library library88 = libraryFacade11.getLibrary();
        team_001.UserBuilder userBuilder89 = userBuilder0.setLibrary(library88);
        userBuilder0.email = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str71 + "' != '" + "" + "'", str71.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "hi!" + "'", str80.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int86 + "' != '" + 7726 + "'", int86 == 7726);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder89);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        int int12 = student7.getId();
        student7.setUsername("");
        team_001.LibraryFacade libraryFacade17 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        team_001.CD cD33 = new team_001.CD("", "");
        boolean boolean34 = libraryFacade17.borrowItem((team_001.Client) student25, (team_001.Item) cD33);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        team_001.Student student42 = new team_001.Student("", "", "hi!", strList40);
        student42.setEmail("hi!");
        team_001.Magazine magazine47 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean48 = student42.isBorrowed((team_001.Item) magazine47);
        boolean boolean49 = student25.borrowItem((team_001.Item) magazine47);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        team_001.Student student57 = new team_001.Student("", "", "hi!", strList55);
        team_001.VirtualBook virtualBook60 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int61 = student57.checkOverdue((team_001.Item) virtualBook60);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap62 = student57.borrowed;
        team_001.BorrowedIterator borrowedIterator63 = new team_001.BorrowedIterator(itemMap62);
        student25.borrowed = itemMap62;
        student7.borrowed = itemMap62;
        team_001.BorrowedIterator borrowedIterator66 = new team_001.BorrowedIterator(itemMap62);
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator66.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 45 + "'", int12 == 45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap62);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        team_001.Client client9 = userManagement1.writeUser("", "hi!", "hi!", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = userManagement1.getType("");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(client9);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Client client27 = userBuilder23.buildNonFacultyStaff();
        java.lang.String str28 = userBuilder23.password;
        team_001.UserBuilder userBuilder30 = userBuilder23.setUsername("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = null;
        student7.borrowed = itemMap13;
        java.lang.String str15 = student7.getPassword();
        java.lang.String str16 = student7.getEmail();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int28 = student24.checkOverdue((team_001.Item) virtualBook27);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        team_001.Student student36 = new team_001.Student("", "", "hi!", strList34);
        student36.setEmail("hi!");
        student36.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap41 = student36.borrowed;
        student36.setUsername("");
        team_001.Newsletter newsletter46 = new team_001.Newsletter("hi!", "hi!");
        student36.unsubscribe(newsletter46);
        java.lang.Object obj48 = newsletter46.clone();
        student24.subscribe(newsletter46);
        student7.subscribe(newsletter46);
        java.lang.String str51 = student7.getUsername();
        java.lang.String str52 = student7.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "" + "'", str51.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "hi!" + "'", str52.equals("hi!"));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        team_001.Client.current_id = 6823;
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        libraryFacade2.bookKeeping("", strList27);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap31 = libraryFacade2.getInventory();
        team_001.LibraryFacade libraryFacade34 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        libraryFacade34.bookKeeping("hi!", strList38);
        team_001.visitor visitor44 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine47 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean48 = libraryFacade34.borrowItem((team_001.Client) visitor44, (team_001.Item) magazine47);
        visitor44.setPassword("hi!");
        team_001.LibraryFacade libraryFacade53 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        libraryFacade53.bookKeeping("hi!", strList57);
        team_001.LibraryFacade libraryFacade63 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        libraryFacade63.bookKeeping("hi!", strList67);
        libraryFacade53.bookKeeping("", strList67);
        team_001.Library library71 = libraryFacade53.getLibrary();
        team_001.Library library72 = libraryFacade53.getLibrary();
        team_001.Faculty faculty76 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook79 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean80 = libraryFacade53.borrowItem((team_001.Client) faculty76, (team_001.Item) virtualBook79);
        int int81 = libraryFacade2.checkOverdue((team_001.Client) visitor44, (team_001.Item) virtualBook79);
        team_001.Library library82 = libraryFacade2.getLibrary();
        team_001.Library library83 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap84 = libraryFacade2.getInventory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap84);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        team_001.NonFacultyStaff nonFacultyStaff3 = new team_001.NonFacultyStaff("", "", "hi!");
        team_001.UserBuilder userBuilder4 = new team_001.UserBuilder();
        team_001.Client client5 = userBuilder4.buildVisitor();
        team_001.Client client6 = userBuilder4.buildNonFacultyStaff();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        team_001.Student student14 = new team_001.Student("", "", "hi!", strList12);
        team_001.Magazine magazine17 = new team_001.Magazine("", "hi!");
        student14.returnItem((team_001.Item) magazine17);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        team_001.Student student26 = new team_001.Student("", "", "hi!", strList24);
        team_001.Magazine magazine29 = new team_001.Magazine("", "hi!");
        student26.returnItem((team_001.Item) magazine29);
        java.lang.String str31 = student26.getEmail();
        student26.setPassword("");
        team_001.VirtualBook virtualBook36 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook36.ID = '4';
        int int39 = student26.checkOverdue((team_001.Item) virtualBook36);
        java.lang.String str40 = virtualBook36.getTitle();
        boolean boolean41 = student14.borrowItem((team_001.Item) virtualBook36);
        client6.returnItem((team_001.Item) virtualBook36);
        int int43 = virtualBook36.getID();
        nonFacultyStaff3.returnItem((team_001.Item) virtualBook36);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap45 = nonFacultyStaff3.getSubcribed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "" + "'", str31.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "hi!" + "'", str40.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap45);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.LibraryFacade libraryFacade31 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        libraryFacade31.bookKeeping("hi!", strList35);
        team_001.visitor visitor41 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine44 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean45 = libraryFacade31.borrowItem((team_001.Client) visitor41, (team_001.Item) magazine44);
        java.lang.Boolean boolean46 = client28.isBorrowed((team_001.Item) magazine44);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        team_001.Student student54 = new team_001.Student("", "", "hi!", strList52);
        team_001.Magazine magazine57 = new team_001.Magazine("", "hi!");
        student54.returnItem((team_001.Item) magazine57);
        java.lang.String str59 = student54.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap60 = null;
        student54.borrowed = itemMap60;
        java.lang.String str62 = student54.getEmail();
        team_001.Magazine magazine65 = team_001.ItemFactory.createMagazine("", "hi!");
        boolean boolean66 = student54.borrowItem((team_001.Item) magazine65);
        java.lang.Boolean boolean67 = client28.isBorrowed((team_001.Item) magazine65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "" + "'", str59.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "" + "'", str62.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67.equals(false));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        team_001.Client client3 = userBuilder0.buildVisitor();
        team_001.Client client4 = userBuilder0.buildFaculty();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "");
        team_001.Library library3 = libraryFacade2.getLibrary();
        java.lang.Class<?> wildcardClass4 = libraryFacade2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        userBuilder15.password = "";
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        userBuilder15.lib = library39;
        java.lang.Class<?> wildcardClass41 = userBuilder15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.Library library25 = userBuilder23.lib;
        java.lang.String str26 = userBuilder23.email;
        team_001.Client client27 = userBuilder23.buildFaculty();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        team_001.NonFacultyStaff nonFacultyStaff3 = new team_001.NonFacultyStaff("", "", "hi!");
        team_001.UserBuilder userBuilder4 = new team_001.UserBuilder();
        team_001.Client client5 = userBuilder4.buildVisitor();
        team_001.Client client6 = userBuilder4.buildNonFacultyStaff();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        team_001.Student student14 = new team_001.Student("", "", "hi!", strList12);
        team_001.Magazine magazine17 = new team_001.Magazine("", "hi!");
        student14.returnItem((team_001.Item) magazine17);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        team_001.Student student26 = new team_001.Student("", "", "hi!", strList24);
        team_001.Magazine magazine29 = new team_001.Magazine("", "hi!");
        student26.returnItem((team_001.Item) magazine29);
        java.lang.String str31 = student26.getEmail();
        student26.setPassword("");
        team_001.VirtualBook virtualBook36 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook36.ID = '4';
        int int39 = student26.checkOverdue((team_001.Item) virtualBook36);
        java.lang.String str40 = virtualBook36.getTitle();
        boolean boolean41 = student14.borrowItem((team_001.Item) virtualBook36);
        client6.returnItem((team_001.Item) virtualBook36);
        int int43 = virtualBook36.getID();
        nonFacultyStaff3.returnItem((team_001.Item) virtualBook36);
        java.lang.String str45 = virtualBook36.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "" + "'", str31.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "hi!" + "'", str40.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "hi!" + "'", str45.equals("hi!"));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setUsername("hi!");
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder28 = userBuilder26.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        team_001.Newsletter newsletter2 = new team_001.Newsletter("hi!", "");
        java.lang.String str3 = newsletter2.getTitle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!" + "'", str3.equals("hi!"));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        team_001.Client client9 = userManagement1.writeUser("", "hi!", "hi!", "hi!");
        boolean boolean12 = userManagement1.readUsers("hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            team_001.Client client17 = userManagement1.writeUser("", "", "", "hi!");
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.email;
        team_001.UserBuilder userBuilder4 = userBuilder0.setPassword("hi!");
        team_001.Client client5 = userBuilder0.buildFaculty();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        java.lang.String str26 = userBuilder0.password;
        team_001.Client client27 = userBuilder0.buildStudent();
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder29 = userBuilder0.setPassword("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid password format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        team_001.Magazine magazine12 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean13 = student7.isBorrowed((team_001.Item) magazine12);
        team_001.UserBuilder userBuilder14 = new team_001.UserBuilder();
        team_001.Client client15 = userBuilder14.buildVisitor();
        java.lang.String str16 = userBuilder14.password;
        team_001.LibraryFacade libraryFacade19 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        libraryFacade19.bookKeeping("hi!", strList23);
        team_001.LibraryFacade libraryFacade29 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        libraryFacade29.bookKeeping("hi!", strList33);
        libraryFacade19.bookKeeping("", strList33);
        team_001.Library library37 = libraryFacade19.getLibrary();
        team_001.UserBuilder userBuilder38 = userBuilder14.setLibrary(library37);
        team_001.Client client39 = userBuilder14.buildVisitor();
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        team_001.Student student50 = new team_001.Student("", "", "hi!", strList48);
        team_001.Magazine magazine53 = new team_001.Magazine("", "hi!");
        student50.returnItem((team_001.Item) magazine53);
        java.lang.String str55 = student50.getEmail();
        team_001.CD cD58 = new team_001.CD("", "");
        boolean boolean59 = libraryFacade42.borrowItem((team_001.Client) student50, (team_001.Item) cD58);
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        team_001.Student student67 = new team_001.Student("", "", "hi!", strList65);
        student67.setEmail("hi!");
        team_001.Magazine magazine72 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean73 = student67.isBorrowed((team_001.Item) magazine72);
        boolean boolean74 = student50.borrowItem((team_001.Item) magazine72);
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        team_001.Student student82 = new team_001.Student("", "", "hi!", strList80);
        team_001.VirtualBook virtualBook85 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int86 = student82.checkOverdue((team_001.Item) virtualBook85);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap87 = student82.borrowed;
        team_001.BorrowedIterator borrowedIterator88 = new team_001.BorrowedIterator(itemMap87);
        student50.borrowed = itemMap87;
        client39.borrowed = itemMap87;
        student7.borrowed = itemMap87;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str55 + "' != '" + "" + "'", str55.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap87);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        team_001.VirtualBook virtualBook2 = team_001.ItemFactory.createVirtualBook("hi!", "");
        java.lang.String str3 = virtualBook2.getAuthor();
        int int4 = virtualBook2.getID();
        int int5 = virtualBook2.getID();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8251 + "'", int4 == 8251);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8251 + "'", int5 == 8251);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        team_001.Faculty faculty3 = new team_001.Faculty("", "", "hi!");
        team_001.LibraryFacade libraryFacade6 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        team_001.Student student14 = new team_001.Student("", "", "hi!", strList12);
        team_001.Magazine magazine17 = new team_001.Magazine("", "hi!");
        student14.returnItem((team_001.Item) magazine17);
        java.lang.String str19 = student14.getEmail();
        team_001.CD cD22 = new team_001.CD("", "");
        boolean boolean23 = libraryFacade6.borrowItem((team_001.Client) student14, (team_001.Item) cD22);
        faculty3.returnItem((team_001.Item) cD22);
        int int25 = cD22.getID();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "" + "'", str19.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8308 + "'", int25 == 8308);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Newsletter newsletter10 = new team_001.Newsletter("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) newsletter10);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        team_001.Magazine magazine22 = new team_001.Magazine("", "hi!");
        student19.returnItem((team_001.Item) magazine22);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        team_001.Student student31 = new team_001.Student("", "", "hi!", strList29);
        team_001.Magazine magazine34 = new team_001.Magazine("", "hi!");
        student31.returnItem((team_001.Item) magazine34);
        java.lang.String str36 = student31.getEmail();
        student31.setPassword("");
        team_001.VirtualBook virtualBook41 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook41.ID = '4';
        int int44 = student31.checkOverdue((team_001.Item) virtualBook41);
        java.lang.String str45 = virtualBook41.getTitle();
        boolean boolean46 = student19.borrowItem((team_001.Item) virtualBook41);
        team_001.Newsletter newsletter49 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean50 = student19.borrowItem((team_001.Item) newsletter49);
        int int51 = newsletter49.ID;
        student7.unsubscribe(newsletter49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "" + "'", str36.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "hi!" + "'", str45.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8364 + "'", int51 == 8364);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = null;
        student7.borrowed = itemMap13;
        java.lang.String str15 = student7.getEmail();
        team_001.Magazine magazine18 = team_001.ItemFactory.createMagazine("", "hi!");
        boolean boolean19 = student7.borrowItem((team_001.Item) magazine18);
        student7.setEmail("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        java.util.ArrayList<java.lang.String> strList3 = null;
        team_001.Student student4 = new team_001.Student("", "hi!", "hi!", strList3);
        team_001.UserBuilder userBuilder5 = new team_001.UserBuilder();
        team_001.Client client6 = userBuilder5.buildVisitor();
        team_001.LibraryFacade libraryFacade9 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        libraryFacade9.bookKeeping("hi!", strList13);
        team_001.LibraryFacade libraryFacade19 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        libraryFacade19.bookKeeping("hi!", strList23);
        libraryFacade9.bookKeeping("", strList23);
        team_001.Library library27 = libraryFacade9.getLibrary();
        team_001.UserBuilder userBuilder28 = userBuilder5.setLibrary(library27);
        team_001.Client client29 = userBuilder28.buildStudent();
        team_001.Client client30 = userBuilder28.buildStudent();
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        team_001.Student student41 = new team_001.Student("", "", "hi!", strList39);
        team_001.Magazine magazine44 = new team_001.Magazine("", "hi!");
        student41.returnItem((team_001.Item) magazine44);
        java.lang.String str46 = student41.getEmail();
        team_001.CD cD49 = new team_001.CD("", "");
        boolean boolean50 = libraryFacade33.borrowItem((team_001.Client) student41, (team_001.Item) cD49);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        team_001.Student student58 = new team_001.Student("", "", "hi!", strList56);
        student58.setEmail("hi!");
        team_001.Magazine magazine63 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean64 = student58.isBorrowed((team_001.Item) magazine63);
        boolean boolean65 = student41.borrowItem((team_001.Item) magazine63);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap66 = student41.borrowed;
        client30.borrowed = itemMap66;
        student4.borrowed = itemMap66;
        int int69 = student4.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "" + "'", str46.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap66);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6909 + "'", int69 == 6909);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        team_001.CD cD2 = team_001.ItemFactory.createCD("", "hi!");
        java.lang.String str3 = cD2.getTitle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        faculty25.setId((int) (byte) -1);
        java.lang.String str32 = faculty25.getPassword();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap33 = faculty25.getSubcribed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "" + "'", str32.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap33);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        java.lang.String str24 = userBuilder23.email;
        java.lang.String str25 = userBuilder23.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        team_001.Client client18 = userBuilder17.buildVisitor();
        team_001.Client client19 = userBuilder17.buildNonFacultyStaff();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        team_001.Student student27 = new team_001.Student("", "", "hi!", strList25);
        team_001.Magazine magazine30 = new team_001.Magazine("", "hi!");
        student27.returnItem((team_001.Item) magazine30);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        team_001.Magazine magazine42 = new team_001.Magazine("", "hi!");
        student39.returnItem((team_001.Item) magazine42);
        java.lang.String str44 = student39.getEmail();
        student39.setPassword("");
        team_001.VirtualBook virtualBook49 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook49.ID = '4';
        int int52 = student39.checkOverdue((team_001.Item) virtualBook49);
        java.lang.String str53 = virtualBook49.getTitle();
        boolean boolean54 = student27.borrowItem((team_001.Item) virtualBook49);
        client19.returnItem((team_001.Item) virtualBook49);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        team_001.Student student63 = new team_001.Student("", "", "hi!", strList61);
        team_001.VirtualBook virtualBook66 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int67 = student63.checkOverdue((team_001.Item) virtualBook66);
        boolean boolean68 = libraryFacade2.borrowItem(client19, (team_001.Item) virtualBook66);
        int int69 = virtualBook66.getID();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "" + "'", str44.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "hi!" + "'", str53.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 8556 + "'", int69 == 8556);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        java.lang.String str6 = userBuilder0.password;
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        team_001.Client client8 = userBuilder7.buildVisitor();
        java.lang.String str9 = userBuilder7.password;
        userBuilder7.password = "hi!";
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        team_001.Library library21 = libraryFacade14.getLibrary();
        team_001.UserBuilder userBuilder22 = userBuilder7.setLibrary(library21);
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library21);
        userBuilder0.password = "hi!";
        team_001.UserBuilder userBuilder26 = new team_001.UserBuilder();
        userBuilder26.email = "hi!";
        team_001.Library library29 = userBuilder26.lib;
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        libraryFacade42.bookKeeping("hi!", strList46);
        libraryFacade32.bookKeeping("", strList46);
        team_001.Library library50 = libraryFacade32.getLibrary();
        team_001.UserBuilder userBuilder51 = userBuilder26.setLibrary(library50);
        team_001.UserBuilder userBuilder52 = new team_001.UserBuilder();
        userBuilder52.email = "hi!";
        team_001.Library library55 = userBuilder52.lib;
        team_001.LibraryFacade libraryFacade58 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        libraryFacade58.bookKeeping("hi!", strList62);
        team_001.LibraryFacade libraryFacade68 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        libraryFacade68.bookKeeping("hi!", strList72);
        libraryFacade58.bookKeeping("", strList72);
        team_001.Library library76 = libraryFacade58.getLibrary();
        team_001.UserBuilder userBuilder77 = userBuilder52.setLibrary(library76);
        team_001.UserBuilder userBuilder78 = userBuilder51.setLibrary(library76);
        team_001.UserBuilder userBuilder79 = new team_001.UserBuilder();
        userBuilder79.email = "hi!";
        team_001.LibraryFacade libraryFacade84 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.Library library85 = libraryFacade84.getLibrary();
        team_001.UserBuilder userBuilder86 = userBuilder79.setLibrary(library85);
        userBuilder51.lib = library85;
        team_001.UserBuilder userBuilder88 = userBuilder0.setLibrary(library85);
        java.lang.String str89 = userBuilder88.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str89 + "' != '" + "hi!" + "'", str89.equals("hi!"));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        userBuilder15.password = "";
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        userBuilder15.lib = library39;
        team_001.Client client41 = userBuilder15.buildNonFacultyStaff();
        team_001.Newsletter newsletter44 = new team_001.Newsletter("hi!", "hi!");
        client41.subscribe(newsletter44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client41);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        java.lang.String str4 = userBuilder0.email;
        java.lang.Class<?> wildcardClass5 = userBuilder0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        team_001.Client client18 = userBuilder17.buildVisitor();
        team_001.Client client19 = userBuilder17.buildNonFacultyStaff();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        team_001.Student student27 = new team_001.Student("", "", "hi!", strList25);
        team_001.Magazine magazine30 = new team_001.Magazine("", "hi!");
        student27.returnItem((team_001.Item) magazine30);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        team_001.Magazine magazine42 = new team_001.Magazine("", "hi!");
        student39.returnItem((team_001.Item) magazine42);
        java.lang.String str44 = student39.getEmail();
        student39.setPassword("");
        team_001.VirtualBook virtualBook49 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook49.ID = '4';
        int int52 = student39.checkOverdue((team_001.Item) virtualBook49);
        java.lang.String str53 = virtualBook49.getTitle();
        boolean boolean54 = student27.borrowItem((team_001.Item) virtualBook49);
        client19.returnItem((team_001.Item) virtualBook49);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        team_001.Student student63 = new team_001.Student("", "", "hi!", strList61);
        team_001.VirtualBook virtualBook66 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int67 = student63.checkOverdue((team_001.Item) virtualBook66);
        boolean boolean68 = libraryFacade2.borrowItem(client19, (team_001.Item) virtualBook66);
        team_001.Faculty faculty76 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter79 = new team_001.Newsletter("hi!", "");
        faculty76.subscribe(newsletter79);
        java.util.ArrayList<java.lang.String> strList81 = faculty76.getCourses();
        java.util.ArrayList<java.lang.String> strList82 = faculty76.getCourses();
        team_001.Student student83 = new team_001.Student("", "hi!", "hi!", strList82);
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("hi!", strList82);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "" + "'", str44.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "hi!" + "'", str53.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList82);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = null;
        student7.borrowed = itemMap13;
        java.lang.String str15 = student7.getPassword();
        java.lang.String str16 = student7.getUsername();
        student7.setUsername("hi!");
        team_001.Magazine magazine21 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        java.lang.String str22 = magazine21.getTitle();
        magazine21.ID = 172;
        // The following exception was thrown during execution in test generation
        try {
            int int25 = student7.checkOverdue((team_001.Item) magazine21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.HashMap.get(Object)\" because \"this.borrowed\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "hi!" + "'", str22.equals("hi!"));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        team_001.Student student27 = new team_001.Student("", "", "hi!", strList25);
        student27.setEmail("hi!");
        team_001.Magazine magazine32 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean33 = student27.isBorrowed((team_001.Item) magazine32);
        boolean boolean34 = student10.borrowItem((team_001.Item) magazine32);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap35 = student10.borrowed;
        team_001.BorrowedIterator borrowedIterator36 = new team_001.BorrowedIterator(itemMap35);
        boolean boolean37 = borrowedIterator36.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        team_001.visitor visitor3 = new team_001.visitor("", "", "");
        team_001.LibraryFacade libraryFacade6 = new team_001.LibraryFacade("hi!", "");
        team_001.Faculty faculty10 = new team_001.Faculty("", "", "hi!");
        team_001.visitor visitor14 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter17 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str18 = newsletter17.getTitle();
        visitor14.subscribe(newsletter17);
        boolean boolean20 = libraryFacade6.borrowItem((team_001.Client) faculty10, (team_001.Item) newsletter17);
        visitor3.returnItem((team_001.Item) newsletter17);
        int int22 = visitor3.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "" + "'", str18.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7007 + "'", int22 == 7007);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.UserBuilder userBuilder30 = userBuilder23.setUsername("");
        team_001.UserBuilder userBuilder31 = new team_001.UserBuilder();
        team_001.Client client32 = userBuilder31.buildVisitor();
        team_001.UserBuilder userBuilder34 = userBuilder31.setPassword("hi!");
        userBuilder31.password = "hi!";
        team_001.LibraryFacade libraryFacade39 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        libraryFacade39.bookKeeping("hi!", strList43);
        team_001.Library library46 = libraryFacade39.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder31.setLibrary(library46);
        team_001.UserBuilder userBuilder48 = userBuilder30.setLibrary(library46);
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder50 = userBuilder30.setPassword("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid password format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder48);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Student student11 = new team_001.Student("", "hi!", "", strList8);
        team_001.PhysicalBook physicalBook14 = team_001.ItemFactory.createPhysicalBook("hi!", "hi!");
        student11.returnItem((team_001.Item) physicalBook14);
        java.lang.String str16 = student11.getPassword();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int28 = student24.checkOverdue((team_001.Item) virtualBook27);
        int int29 = student24.getId();
        student24.setUsername("");
        team_001.LibraryFacade libraryFacade34 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        team_001.Student student42 = new team_001.Student("", "", "hi!", strList40);
        team_001.Magazine magazine45 = new team_001.Magazine("", "hi!");
        student42.returnItem((team_001.Item) magazine45);
        java.lang.String str47 = student42.getEmail();
        team_001.CD cD50 = new team_001.CD("", "");
        boolean boolean51 = libraryFacade34.borrowItem((team_001.Client) student42, (team_001.Item) cD50);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        team_001.Student student59 = new team_001.Student("", "", "hi!", strList57);
        student59.setEmail("hi!");
        team_001.Magazine magazine64 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean65 = student59.isBorrowed((team_001.Item) magazine64);
        boolean boolean66 = student42.borrowItem((team_001.Item) magazine64);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        team_001.Student student74 = new team_001.Student("", "", "hi!", strList72);
        team_001.VirtualBook virtualBook77 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int78 = student74.checkOverdue((team_001.Item) virtualBook77);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap79 = student74.borrowed;
        team_001.BorrowedIterator borrowedIterator80 = new team_001.BorrowedIterator(itemMap79);
        student42.borrowed = itemMap79;
        student24.borrowed = itemMap79;
        student11.borrowed = itemMap79;
        team_001.BorrowedIterator borrowedIterator84 = new team_001.BorrowedIterator(itemMap79);
        java.lang.Class<?> wildcardClass85 = borrowedIterator84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7026 + "'", int29 == 7026);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "" + "'", str47.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Student student11 = new team_001.Student("", "hi!", "", strList8);
        student11.setUsername("hi!");
        team_001.LibraryFacade libraryFacade16 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.Magazine magazine27 = new team_001.Magazine("", "hi!");
        student24.returnItem((team_001.Item) magazine27);
        java.lang.String str29 = student24.getEmail();
        team_001.CD cD32 = new team_001.CD("", "");
        boolean boolean33 = libraryFacade16.borrowItem((team_001.Client) student24, (team_001.Item) cD32);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        team_001.Student student41 = new team_001.Student("", "", "hi!", strList39);
        student41.setEmail("hi!");
        team_001.Magazine magazine46 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean47 = student41.isBorrowed((team_001.Item) magazine46);
        boolean boolean48 = student24.borrowItem((team_001.Item) magazine46);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap49 = student24.borrowed;
        team_001.BorrowedIterator borrowedIterator50 = new team_001.BorrowedIterator(itemMap49);
        student11.setBorrowed(itemMap49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "" + "'", str29.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap49);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "");
        team_001.Faculty faculty6 = new team_001.Faculty("", "", "hi!");
        team_001.visitor visitor10 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter13 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str14 = newsletter13.getTitle();
        visitor10.subscribe(newsletter13);
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) faculty6, (team_001.Item) newsletter13);
        team_001.Faculty faculty21 = new team_001.Faculty("hi!", "hi!", "hi!");
        java.util.ArrayList<java.lang.String> strList22 = faculty21.getCourses();
        libraryFacade2.bookKeeping("", strList22);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        team_001.Student student41 = new team_001.Student("", "", "hi!", strList39);
        student41.setEmail("hi!");
        student41.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap46 = student41.borrowed;
        student41.setUsername("");
        team_001.VirtualBook virtualBook51 = new team_001.VirtualBook("hi!", "hi!");
        int int52 = libraryFacade27.checkOverdue((team_001.Client) student41, (team_001.Item) virtualBook51);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        libraryFacade27.bookKeeping("", strList56);
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("hi!", strList56);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap14 = student9.borrowed;
        team_001.BorrowedIterator borrowedIterator15 = new team_001.BorrowedIterator(itemMap14);
        java.util.ArrayList<team_001.Item> itemList16 = client1.checkItemsOverdue(borrowedIterator15);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int28 = student24.checkOverdue((team_001.Item) virtualBook27);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap29 = student24.borrowed;
        team_001.BorrowedIterator borrowedIterator30 = new team_001.BorrowedIterator(itemMap29);
        client1.setBorrowed(itemMap29);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        student39.setEmail("hi!");
        team_001.Magazine magazine44 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean45 = student39.isBorrowed((team_001.Item) magazine44);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        team_001.VirtualBook virtualBook56 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int57 = student53.checkOverdue((team_001.Item) virtualBook56);
        java.lang.Boolean boolean58 = student39.isBorrowed((team_001.Item) virtualBook56);
        java.lang.String str59 = virtualBook56.getTitle();
        int int60 = virtualBook56.getID();
        boolean boolean61 = client1.borrowItem((team_001.Item) virtualBook56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "hi!" + "'", str59.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9168 + "'", int60 == 9168);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        java.lang.String str5 = client4.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        int int12 = student7.getId();
        java.lang.String str13 = student7.getUsername();
        java.lang.String str14 = student7.getUsername();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        team_001.Student student22 = new team_001.Student("", "", "hi!", strList20);
        team_001.Magazine magazine25 = new team_001.Magazine("", "hi!");
        student22.returnItem((team_001.Item) magazine25);
        magazine25.ID = 120;
        int int29 = student7.checkOverdue((team_001.Item) magazine25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7061 + "'", int12 == 7061);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        userBuilder15.password = "";
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        userBuilder15.lib = library39;
        team_001.Client client41 = userBuilder15.buildNonFacultyStaff();
        java.lang.String str42 = client41.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        team_001.Student student29 = new team_001.Student("", "", "hi!", strList27);
        student29.setEmail("hi!");
        student29.setEmail("hi!");
        team_001.PhysicalBook physicalBook36 = new team_001.PhysicalBook("", "hi!");
        boolean boolean37 = libraryFacade2.borrowItem((team_001.Client) student29, (team_001.Item) physicalBook36);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap38 = libraryFacade2.getInventory();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap39 = libraryFacade2.getInventory();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap40 = libraryFacade2.getInventory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap40);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        team_001.Magazine magazine2 = new team_001.Magazine("hi!", "");
        int int3 = magazine2.getID();
        java.lang.Object obj4 = magazine2.clone();
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9283 + "'", int3 == 9283);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj4);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        student7.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = student7.borrowed;
        student7.setUsername("");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap15 = student7.borrowed;
        java.lang.Class<?> wildcardClass16 = itemMap15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        visitor12.setPassword("hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        team_001.Student student26 = new team_001.Student("", "", "hi!", strList24);
        team_001.VirtualBook virtualBook29 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int30 = student26.checkOverdue((team_001.Item) virtualBook29);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap31 = student26.borrowed;
        team_001.BorrowedIterator borrowedIterator32 = new team_001.BorrowedIterator(itemMap31);
        team_001.BorrowedIterator borrowedIterator33 = new team_001.BorrowedIterator(itemMap31);
        java.util.ArrayList<team_001.Item> itemList34 = visitor12.checkItemsOverdue(borrowedIterator33);
        boolean boolean35 = borrowedIterator33.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item36 = borrowedIterator33.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.LibraryFacade libraryFacade6 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        libraryFacade6.bookKeeping("hi!", strList10);
        team_001.LibraryFacade libraryFacade16 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        libraryFacade16.bookKeeping("hi!", strList20);
        libraryFacade6.bookKeeping("", strList20);
        team_001.Library library24 = libraryFacade6.getLibrary();
        team_001.UserBuilder userBuilder25 = userBuilder0.setLibrary(library24);
        team_001.UserBuilder userBuilder26 = new team_001.UserBuilder();
        userBuilder26.email = "hi!";
        team_001.Library library29 = userBuilder26.lib;
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        libraryFacade42.bookKeeping("hi!", strList46);
        libraryFacade32.bookKeeping("", strList46);
        team_001.Library library50 = libraryFacade32.getLibrary();
        team_001.UserBuilder userBuilder51 = userBuilder26.setLibrary(library50);
        team_001.UserBuilder userBuilder52 = userBuilder25.setLibrary(library50);
        team_001.UserBuilder userBuilder53 = new team_001.UserBuilder();
        userBuilder53.email = "hi!";
        team_001.LibraryFacade libraryFacade58 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.Library library59 = libraryFacade58.getLibrary();
        team_001.UserBuilder userBuilder60 = userBuilder53.setLibrary(library59);
        userBuilder25.lib = library59;
        java.lang.String str62 = userBuilder25.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        java.util.ArrayList<java.lang.String> strList3 = null;
        team_001.Student student4 = new team_001.Student("", "hi!", "hi!", strList3);
        team_001.UserBuilder userBuilder5 = new team_001.UserBuilder();
        team_001.Client client6 = userBuilder5.buildVisitor();
        team_001.LibraryFacade libraryFacade9 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        libraryFacade9.bookKeeping("hi!", strList13);
        team_001.LibraryFacade libraryFacade19 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        libraryFacade19.bookKeeping("hi!", strList23);
        libraryFacade9.bookKeeping("", strList23);
        team_001.Library library27 = libraryFacade9.getLibrary();
        team_001.UserBuilder userBuilder28 = userBuilder5.setLibrary(library27);
        team_001.Client client29 = userBuilder28.buildStudent();
        team_001.Client client30 = userBuilder28.buildStudent();
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        team_001.Student student41 = new team_001.Student("", "", "hi!", strList39);
        team_001.Magazine magazine44 = new team_001.Magazine("", "hi!");
        student41.returnItem((team_001.Item) magazine44);
        java.lang.String str46 = student41.getEmail();
        team_001.CD cD49 = new team_001.CD("", "");
        boolean boolean50 = libraryFacade33.borrowItem((team_001.Client) student41, (team_001.Item) cD49);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        team_001.Student student58 = new team_001.Student("", "", "hi!", strList56);
        student58.setEmail("hi!");
        team_001.Magazine magazine63 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean64 = student58.isBorrowed((team_001.Item) magazine63);
        boolean boolean65 = student41.borrowItem((team_001.Item) magazine63);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap66 = student41.borrowed;
        client30.borrowed = itemMap66;
        student4.borrowed = itemMap66;
        student4.setPassword("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "" + "'", str46.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap66);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter6 = new team_001.Newsletter("hi!", "");
        faculty3.subscribe(newsletter6);
        java.util.ArrayList<java.lang.String> strList8 = faculty3.getCourses();
        faculty3.setUsername("hi!");
        java.util.ArrayList<java.lang.String> strList11 = faculty3.getCourses();
        java.util.ArrayList<java.lang.String> strList12 = faculty3.getCourses();
        faculty3.setEmail("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.lang.String str8 = student7.getEmail();
        student7.setUsername("hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        team_001.VirtualBook virtualBook21 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int22 = student18.checkOverdue((team_001.Item) virtualBook21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        team_001.Student student30 = new team_001.Student("", "", "hi!", strList28);
        student30.setEmail("hi!");
        student30.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap35 = student30.borrowed;
        student30.setUsername("");
        team_001.Newsletter newsletter40 = new team_001.Newsletter("hi!", "hi!");
        student30.unsubscribe(newsletter40);
        java.lang.Object obj42 = newsletter40.clone();
        student18.subscribe(newsletter40);
        java.lang.String str44 = newsletter40.getAuthor();
        student7.subscribe(newsletter40);
        team_001.LibraryFacade libraryFacade48 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        libraryFacade48.bookKeeping("hi!", strList52);
        team_001.visitor visitor58 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine61 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean62 = libraryFacade48.borrowItem((team_001.Client) visitor58, (team_001.Item) magazine61);
        magazine61.ID = 269;
        boolean boolean65 = student7.borrowItem((team_001.Item) magazine61);
        int int66 = magazine61.getID();
        java.lang.Object obj67 = magazine61.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "hi!" + "'", str44.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 269 + "'", int66 == 269);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj67);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        visitor12.setPassword("hi!");
        java.lang.String str19 = visitor12.getUsername();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        team_001.Student student27 = new team_001.Student("", "", "hi!", strList25);
        team_001.Magazine magazine30 = new team_001.Magazine("", "hi!");
        student27.returnItem((team_001.Item) magazine30);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        team_001.Magazine magazine42 = new team_001.Magazine("", "hi!");
        student39.returnItem((team_001.Item) magazine42);
        java.lang.String str44 = student39.getEmail();
        student39.setPassword("");
        team_001.VirtualBook virtualBook49 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook49.ID = '4';
        int int52 = student39.checkOverdue((team_001.Item) virtualBook49);
        java.lang.String str53 = virtualBook49.getTitle();
        boolean boolean54 = student27.borrowItem((team_001.Item) virtualBook49);
        team_001.Newsletter newsletter57 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean58 = student27.borrowItem((team_001.Item) newsletter57);
        int int59 = newsletter57.ID;
        java.lang.String str60 = newsletter57.getTitle();
        visitor12.returnItem((team_001.Item) newsletter57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "hi!" + "'", str19.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "" + "'", str44.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "hi!" + "'", str53.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9455 + "'", int59 == 9455);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str60 + "' != '" + "hi!" + "'", str60.equals("hi!"));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        java.lang.String str12 = student11.getEmail();
        student11.setUsername("hi!");
        student11.setPassword("");
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.Magazine magazine27 = new team_001.Magazine("", "hi!");
        student24.returnItem((team_001.Item) magazine27);
        java.lang.String str29 = student24.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap30 = null;
        student24.borrowed = itemMap30;
        java.lang.String str32 = student24.getPassword();
        team_001.visitor visitor36 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter39 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str40 = newsletter39.getTitle();
        visitor36.subscribe(newsletter39);
        student24.subscribe(newsletter39);
        student11.unsubscribe(newsletter39);
        newsletter39.ID = 1961;
        int int46 = faculty3.checkOverdue((team_001.Item) newsletter39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "" + "'", str29.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "hi!" + "'", str32.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "" + "'", str40.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        userBuilder0.password = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        team_001.VirtualBook virtualBook14 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int15 = student11.checkOverdue((team_001.Item) virtualBook14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        team_001.Student student23 = new team_001.Student("", "", "hi!", strList21);
        team_001.VirtualBook virtualBook26 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int27 = student23.checkOverdue((team_001.Item) virtualBook26);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap28 = student23.borrowed;
        team_001.BorrowedIterator borrowedIterator29 = new team_001.BorrowedIterator(itemMap28);
        student11.borrowed = itemMap28;
        faculty3.borrowed = itemMap28;
        java.util.ArrayList<java.lang.String> strList32 = faculty3.getCourses();
        faculty3.setPassword("hi!");
        faculty3.setId(0);
        faculty3.setId((-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList32);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.Library library3 = null;
        team_001.UserBuilder userBuilder4 = userBuilder0.setLibrary(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder4);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = null;
        student7.borrowed = itemMap13;
        java.lang.String str15 = student7.getPassword();
        java.lang.String str16 = student7.getEmail();
        java.lang.String str17 = student7.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!" + "'", str17.equals("hi!"));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Student student11 = new team_001.Student("", "hi!", "", strList8);
        team_001.PhysicalBook physicalBook14 = team_001.ItemFactory.createPhysicalBook("hi!", "hi!");
        student11.returnItem((team_001.Item) physicalBook14);
        java.lang.String str16 = student11.getPassword();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int28 = student24.checkOverdue((team_001.Item) virtualBook27);
        int int29 = student24.getId();
        student24.setUsername("");
        team_001.LibraryFacade libraryFacade34 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        team_001.Student student42 = new team_001.Student("", "", "hi!", strList40);
        team_001.Magazine magazine45 = new team_001.Magazine("", "hi!");
        student42.returnItem((team_001.Item) magazine45);
        java.lang.String str47 = student42.getEmail();
        team_001.CD cD50 = new team_001.CD("", "");
        boolean boolean51 = libraryFacade34.borrowItem((team_001.Client) student42, (team_001.Item) cD50);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        team_001.Student student59 = new team_001.Student("", "", "hi!", strList57);
        student59.setEmail("hi!");
        team_001.Magazine magazine64 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean65 = student59.isBorrowed((team_001.Item) magazine64);
        boolean boolean66 = student42.borrowItem((team_001.Item) magazine64);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        team_001.Student student74 = new team_001.Student("", "", "hi!", strList72);
        team_001.VirtualBook virtualBook77 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int78 = student74.checkOverdue((team_001.Item) virtualBook77);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap79 = student74.borrowed;
        team_001.BorrowedIterator borrowedIterator80 = new team_001.BorrowedIterator(itemMap79);
        student42.borrowed = itemMap79;
        student24.borrowed = itemMap79;
        student11.borrowed = itemMap79;
        team_001.BorrowedIterator borrowedIterator84 = new team_001.BorrowedIterator(itemMap79);
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator84.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7135 + "'", int29 == 7135);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "" + "'", str47.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap79);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        team_001.PhysicalBook physicalBook2 = team_001.ItemFactory.createPhysicalBook("", "hi!");
        int int3 = physicalBook2.getID();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook2);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9684 + "'", int3 == 9684);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        team_001.Magazine magazine22 = new team_001.Magazine("", "hi!");
        student19.returnItem((team_001.Item) magazine22);
        java.lang.String str24 = student19.getEmail();
        student19.setPassword("");
        team_001.VirtualBook virtualBook29 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook29.ID = '4';
        int int32 = student19.checkOverdue((team_001.Item) virtualBook29);
        java.lang.String str33 = virtualBook29.getTitle();
        boolean boolean34 = student7.borrowItem((team_001.Item) virtualBook29);
        int int35 = virtualBook29.getID();
        java.lang.String str36 = virtualBook29.getTitle();
        java.lang.String str37 = virtualBook29.getTitle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "hi!" + "'", str33.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "hi!" + "'", str36.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "hi!" + "'", str37.equals("hi!"));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setPassword("");
        int int10 = student7.getId();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap11 = student7.borrowed;
        team_001.Magazine magazine14 = new team_001.Magazine("", "hi!");
        int int15 = magazine14.ID;
        boolean boolean16 = student7.borrowItem((team_001.Item) magazine14);
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        team_001.Client client18 = userBuilder17.buildVisitor();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        team_001.Student student26 = new team_001.Student("", "", "hi!", strList24);
        team_001.VirtualBook virtualBook29 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int30 = student26.checkOverdue((team_001.Item) virtualBook29);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        team_001.Student student38 = new team_001.Student("", "", "hi!", strList36);
        student38.setEmail("hi!");
        student38.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap43 = student38.borrowed;
        student38.setUsername("");
        team_001.Newsletter newsletter48 = new team_001.Newsletter("hi!", "hi!");
        student38.unsubscribe(newsletter48);
        java.lang.Object obj50 = newsletter48.clone();
        student26.subscribe(newsletter48);
        client18.unsubscribe(newsletter48);
        student7.subscribe(newsletter48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7148 + "'", int10 == 7148);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap11);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9746 + "'", int15 == 9746);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj50);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.email;
        team_001.UserBuilder userBuilder4 = userBuilder0.setPassword("hi!");
        java.lang.String str5 = userBuilder4.email;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        java.lang.String str6 = userBuilder0.password;
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        team_001.Client client8 = userBuilder7.buildVisitor();
        java.lang.String str9 = userBuilder7.password;
        userBuilder7.password = "hi!";
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        team_001.Library library21 = libraryFacade14.getLibrary();
        team_001.UserBuilder userBuilder22 = userBuilder7.setLibrary(library21);
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library21);
        userBuilder0.password = "hi!";
        userBuilder0.password = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        team_001.Student student16 = new team_001.Student("", "", "hi!", strList14);
        student16.setEmail("hi!");
        student16.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap21 = student16.borrowed;
        student16.setUsername("");
        team_001.VirtualBook virtualBook26 = new team_001.VirtualBook("hi!", "hi!");
        int int27 = libraryFacade2.checkOverdue((team_001.Client) student16, (team_001.Item) virtualBook26);
        student16.setId(8652);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        team_001.Magazine magazine12 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean13 = student7.isBorrowed((team_001.Item) magazine12);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        team_001.Student student21 = new team_001.Student("", "", "hi!", strList19);
        team_001.VirtualBook virtualBook24 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int25 = student21.checkOverdue((team_001.Item) virtualBook24);
        java.lang.Boolean boolean26 = student7.isBorrowed((team_001.Item) virtualBook24);
        java.lang.String str27 = virtualBook24.getTitle();
        int int28 = virtualBook24.getID();
        virtualBook24.ID = (byte) 1;
        java.lang.Class<?> wildcardClass31 = virtualBook24.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "hi!" + "'", str27.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9832 + "'", int28 == 9832);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        team_001.Faculty faculty3 = new team_001.Faculty("hi!", "", "hi!");
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        team_001.Student student28 = new team_001.Student("", "", "hi!", strList26);
        team_001.Newsletter newsletter31 = new team_001.Newsletter("hi!", "hi!");
        int int32 = student28.checkOverdue((team_001.Item) newsletter31);
        team_001.Magazine magazine35 = team_001.ItemFactory.createMagazine("", "");
        magazine35.ID = 1961;
        boolean boolean38 = libraryFacade2.borrowItem((team_001.Client) student28, (team_001.Item) magazine35);
        java.util.ArrayList<java.lang.String> strList40 = null;
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.bookKeeping("hi!", strList40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.iterator()\" because \"list\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        team_001.Client.current_id = 583;
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        team_001.Client client6 = userBuilder0.buildVisitor();
        team_001.Library library7 = userBuilder0.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library7);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        team_001.VirtualBook virtualBook2 = team_001.ItemFactory.createVirtualBook("hi!", "");
        java.lang.String str3 = virtualBook2.getAuthor();
        int int4 = virtualBook2.ID;
        virtualBook2.ID = 5689;
        int int7 = virtualBook2.getID();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9973 + "'", int4 == 9973);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5689 + "'", int7 == 5689);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildStudent();
        userBuilder0.password = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        java.lang.String str6 = userManagement1.getType("");
        team_001.Client client11 = userManagement1.writeUser("", "", "hi!", "");
        java.lang.String str13 = userManagement1.getType("");
        java.lang.String str15 = userManagement1.getType("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        team_001.Magazine magazine2 = new team_001.Magazine("hi!", "");
        magazine2.ID = 7905;
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        team_001.visitor visitor3 = new team_001.visitor("", "hi!", "");
        visitor3.setPassword("hi!");
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.Library library6 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder7 = userBuilder0.setLibrary(library6);
        team_001.Library library8 = userBuilder7.lib;
        java.lang.String str9 = userBuilder7.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        student7.setEmail("");
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        team_001.Student student22 = new team_001.Student("", "", "hi!", strList20);
        team_001.Magazine magazine25 = new team_001.Magazine("", "hi!");
        student22.returnItem((team_001.Item) magazine25);
        java.lang.String str27 = student22.getEmail();
        student22.setPassword("");
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        team_001.Student student37 = new team_001.Student("", "", "hi!", strList35);
        team_001.Magazine magazine40 = new team_001.Magazine("", "hi!");
        student37.returnItem((team_001.Item) magazine40);
        java.lang.String str42 = student37.getEmail();
        student37.setPassword("");
        team_001.VirtualBook virtualBook47 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook47.ID = '4';
        int int50 = student37.checkOverdue((team_001.Item) virtualBook47);
        java.lang.String str51 = virtualBook47.getTitle();
        int int52 = libraryFacade14.checkOverdue((team_001.Client) student22, (team_001.Item) virtualBook47);
        team_001.Magazine magazine55 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean56 = student22.borrowItem((team_001.Item) magazine55);
        java.lang.Boolean boolean57 = student7.isBorrowed((team_001.Item) magazine55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "" + "'", str42.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "hi!" + "'", str51.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57.equals(false));
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        team_001.Magazine magazine43 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean44 = student10.borrowItem((team_001.Item) magazine43);
        team_001.Newsletter newsletter47 = new team_001.Newsletter("hi!", "");
        student10.unsubscribe(newsletter47);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap49 = student10.borrowed;
        team_001.BorrowedIterator borrowedIterator50 = new team_001.BorrowedIterator(itemMap49);
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item51 = borrowedIterator50.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap49);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        userBuilder17.email = "hi!";
        team_001.Library library20 = userBuilder17.lib;
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Library library41 = libraryFacade23.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder17.setLibrary(library41);
        userBuilder0.lib = library41;
        team_001.Client client44 = userBuilder0.buildVisitor();
        client44.setPassword("");
        client44.setPassword("hi!");
        client44.setId(6386);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client44);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade28 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        team_001.Student student36 = new team_001.Student("", "", "hi!", strList34);
        team_001.Magazine magazine39 = new team_001.Magazine("", "hi!");
        student36.returnItem((team_001.Item) magazine39);
        java.lang.String str41 = student36.getEmail();
        team_001.CD cD44 = new team_001.CD("", "");
        boolean boolean45 = libraryFacade28.borrowItem((team_001.Client) student36, (team_001.Item) cD44);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        student53.setEmail("hi!");
        team_001.Magazine magazine58 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean59 = student53.isBorrowed((team_001.Item) magazine58);
        boolean boolean60 = student36.borrowItem((team_001.Item) magazine58);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        team_001.Student student68 = new team_001.Student("", "", "hi!", strList66);
        team_001.VirtualBook virtualBook71 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int72 = student68.checkOverdue((team_001.Item) virtualBook71);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap73 = student68.borrowed;
        team_001.BorrowedIterator borrowedIterator74 = new team_001.BorrowedIterator(itemMap73);
        student36.borrowed = itemMap73;
        client25.borrowed = itemMap73;
        team_001.BorrowedIterator borrowedIterator77 = new team_001.BorrowedIterator(itemMap73);
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator77.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "" + "'", str41.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap73);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildVisitor();
        team_001.UserBuilder userBuilder29 = new team_001.UserBuilder();
        team_001.Client client30 = userBuilder29.buildVisitor();
        java.lang.String str31 = userBuilder29.password;
        userBuilder29.password = "hi!";
        team_001.LibraryFacade libraryFacade36 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        libraryFacade36.bookKeeping("hi!", strList40);
        team_001.Library library43 = libraryFacade36.getLibrary();
        team_001.UserBuilder userBuilder44 = userBuilder29.setLibrary(library43);
        team_001.UserBuilder userBuilder45 = new team_001.UserBuilder();
        team_001.Client client46 = userBuilder45.buildVisitor();
        team_001.LibraryFacade libraryFacade49 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        libraryFacade49.bookKeeping("hi!", strList53);
        team_001.LibraryFacade libraryFacade59 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        libraryFacade59.bookKeeping("hi!", strList63);
        libraryFacade49.bookKeeping("", strList63);
        team_001.Library library67 = libraryFacade49.getLibrary();
        team_001.UserBuilder userBuilder68 = userBuilder45.setLibrary(library67);
        team_001.Client client69 = userBuilder68.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder71 = userBuilder68.setPassword("hi!");
        team_001.Library library72 = userBuilder68.lib;
        team_001.Client client73 = userBuilder68.buildStudent();
        team_001.UserBuilder userBuilder75 = userBuilder68.setUsername("");
        team_001.UserBuilder userBuilder76 = new team_001.UserBuilder();
        team_001.Client client77 = userBuilder76.buildVisitor();
        team_001.UserBuilder userBuilder79 = userBuilder76.setPassword("hi!");
        userBuilder76.password = "hi!";
        team_001.LibraryFacade libraryFacade84 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray87 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        libraryFacade84.bookKeeping("hi!", strList88);
        team_001.Library library91 = libraryFacade84.getLibrary();
        team_001.UserBuilder userBuilder92 = userBuilder76.setLibrary(library91);
        team_001.UserBuilder userBuilder93 = userBuilder75.setLibrary(library91);
        team_001.Library library94 = userBuilder93.lib;
        userBuilder44.lib = library94;
        team_001.UserBuilder userBuilder96 = userBuilder23.setLibrary(library94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder96);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        team_001.Client.current_id = 269;
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        team_001.visitor visitor3 = new team_001.visitor("hi!", "hi!", "");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        student11.setEmail("hi!");
        team_001.Magazine magazine16 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean17 = student11.isBorrowed((team_001.Item) magazine16);
        int int18 = magazine16.ID;
        visitor3.returnItem((team_001.Item) magazine16);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap20 = visitor3.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17.equals(false));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10322 + "'", int18 == 10322);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap20);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        virtualBook10.ID = 10;
        int int14 = virtualBook10.ID;
        java.lang.String str15 = virtualBook10.getTitle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.Magazine magazine31 = team_001.ItemFactory.createMagazine("", "hi!");
        java.lang.Boolean boolean32 = client28.isBorrowed((team_001.Item) magazine31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32.equals(false));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade9 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        team_001.Student student17 = new team_001.Student("", "", "hi!", strList15);
        team_001.Magazine magazine20 = new team_001.Magazine("", "hi!");
        student17.returnItem((team_001.Item) magazine20);
        java.lang.String str22 = student17.getEmail();
        student17.setPassword("");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        team_001.Student student32 = new team_001.Student("", "", "hi!", strList30);
        team_001.Magazine magazine35 = new team_001.Magazine("", "hi!");
        student32.returnItem((team_001.Item) magazine35);
        java.lang.String str37 = student32.getEmail();
        student32.setPassword("");
        team_001.VirtualBook virtualBook42 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook42.ID = '4';
        int int45 = student32.checkOverdue((team_001.Item) virtualBook42);
        java.lang.String str46 = virtualBook42.getTitle();
        int int47 = libraryFacade9.checkOverdue((team_001.Client) student17, (team_001.Item) virtualBook42);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        team_001.Student student55 = new team_001.Student("", "", "hi!", strList53);
        team_001.Magazine magazine58 = new team_001.Magazine("", "hi!");
        student55.returnItem((team_001.Item) magazine58);
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        team_001.Student student67 = new team_001.Student("", "", "hi!", strList65);
        team_001.Magazine magazine70 = new team_001.Magazine("", "hi!");
        student67.returnItem((team_001.Item) magazine70);
        java.lang.String str72 = student67.getEmail();
        student67.setPassword("");
        team_001.VirtualBook virtualBook77 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook77.ID = '4';
        int int80 = student67.checkOverdue((team_001.Item) virtualBook77);
        java.lang.String str81 = virtualBook77.getTitle();
        boolean boolean82 = student55.borrowItem((team_001.Item) virtualBook77);
        student17.returnItem((team_001.Item) virtualBook77);
        team_001.Newsletter newsletter86 = team_001.ItemFactory.createNewsLetter("", "hi!");
        student17.subscribe(newsletter86);
        client6.subscribe(newsletter86);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap89 = client6.getSubcribed();
        java.lang.String str90 = client6.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "" + "'", str22.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "" + "'", str37.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "hi!" + "'", str46.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str72 + "' != '" + "" + "'", str72.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str81 + "' != '" + "hi!" + "'", str81.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.Client client48 = userBuilder47.buildNonFacultyStaff();
        team_001.Client client49 = userBuilder47.buildNonFacultyStaff();
        client49.setId(52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client49);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap10 = libraryFacade2.getInventory();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        java.lang.String str19 = student18.getEmail();
        student18.setUsername("hi!");
        student18.setPassword("");
        team_001.VirtualBook virtualBook26 = new team_001.VirtualBook("hi!", "");
        int int27 = libraryFacade2.checkOverdue((team_001.Client) student18, (team_001.Item) virtualBook26);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap28 = libraryFacade2.getInventory();
        team_001.Faculty faculty33 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter36 = new team_001.Newsletter("hi!", "");
        faculty33.subscribe(newsletter36);
        java.util.ArrayList<java.lang.String> strList38 = faculty33.getCourses();
        java.util.ArrayList<java.lang.String> strList39 = faculty33.getCourses();
        libraryFacade2.bookKeeping("hi!", strList39);
        team_001.LibraryFacade libraryFacade44 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        libraryFacade44.bookKeeping("hi!", strList48);
        team_001.LibraryFacade libraryFacade54 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        libraryFacade54.bookKeeping("hi!", strList58);
        libraryFacade44.bookKeeping("", strList58);
        team_001.Library library62 = libraryFacade44.getLibrary();
        team_001.Library library63 = libraryFacade44.getLibrary();
        team_001.Faculty faculty67 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean71 = libraryFacade44.borrowItem((team_001.Client) faculty67, (team_001.Item) virtualBook70);
        java.util.ArrayList<java.lang.String> strList72 = faculty67.getCourses();
        java.util.ArrayList<java.lang.String> strList73 = faculty67.getCourses();
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("", strList73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "" + "'", str19.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList73);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap2 = client1.getSubcribed();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap11 = student10.getSubcribed();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        student19.setEmail("hi!");
        team_001.Magazine magazine24 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean25 = student19.isBorrowed((team_001.Item) magazine24);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        team_001.Student student33 = new team_001.Student("", "", "hi!", strList31);
        team_001.VirtualBook virtualBook36 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int37 = student33.checkOverdue((team_001.Item) virtualBook36);
        java.lang.Boolean boolean38 = student19.isBorrowed((team_001.Item) virtualBook36);
        java.lang.String str39 = virtualBook36.getTitle();
        student10.returnItem((team_001.Item) virtualBook36);
        virtualBook36.ID = 10;
        java.lang.Boolean boolean43 = client1.isBorrowed((team_001.Item) virtualBook36);
        team_001.UserBuilder userBuilder44 = new team_001.UserBuilder();
        team_001.Client client45 = userBuilder44.buildVisitor();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        team_001.VirtualBook virtualBook56 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int57 = student53.checkOverdue((team_001.Item) virtualBook56);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap58 = student53.borrowed;
        team_001.BorrowedIterator borrowedIterator59 = new team_001.BorrowedIterator(itemMap58);
        java.util.ArrayList<team_001.Item> itemList60 = client45.checkItemsOverdue(borrowedIterator59);
        java.util.ArrayList<team_001.Item> itemList61 = client1.checkItemsOverdue(borrowedIterator59);
        java.lang.String str62 = client1.getPassword();
        client1.setId(1231);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Library library2 = null;
        team_001.UserBuilder userBuilder3 = userBuilder0.setLibrary(library2);
        team_001.UserBuilder userBuilder5 = userBuilder0.setUsername("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder5);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        team_001.visitor visitor3 = new team_001.visitor("hi!", "hi!", "");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        student11.setEmail("hi!");
        team_001.Magazine magazine16 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean17 = student11.isBorrowed((team_001.Item) magazine16);
        int int18 = magazine16.ID;
        visitor3.returnItem((team_001.Item) magazine16);
        java.lang.Class<?> wildcardClass20 = magazine16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17.equals(false));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10593 + "'", int18 == 10593);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.Client client48 = userBuilder47.buildNonFacultyStaff();
        team_001.Client client49 = userBuilder47.buildVisitor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client49);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Client client27 = userBuilder26.buildStudent();
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        team_001.LibraryFacade libraryFacade40 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        libraryFacade40.bookKeeping("hi!", strList44);
        libraryFacade30.bookKeeping("", strList44);
        team_001.Library library48 = libraryFacade30.getLibrary();
        team_001.Library library49 = libraryFacade30.getLibrary();
        team_001.Faculty faculty53 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook56 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean57 = libraryFacade30.borrowItem((team_001.Client) faculty53, (team_001.Item) virtualBook56);
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        team_001.Student student65 = new team_001.Student("", "", "hi!", strList63);
        student65.setEmail("hi!");
        student65.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap70 = student65.borrowed;
        student65.setUsername("");
        team_001.Newsletter newsletter75 = new team_001.Newsletter("hi!", "hi!");
        student65.unsubscribe(newsletter75);
        java.lang.Object obj77 = newsletter75.clone();
        faculty53.unsubscribe(newsletter75);
        java.lang.Boolean boolean79 = client27.isBorrowed((team_001.Item) newsletter75);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap80 = null;
        client27.borrowed = itemMap80;
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap82 = client27.getSubcribed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap82);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        magazine15.ID = 269;
        java.lang.String str19 = magazine15.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "hi!" + "'", str19.equals("hi!"));
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        team_001.Magazine magazine12 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean13 = student7.isBorrowed((team_001.Item) magazine12);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        team_001.Student student21 = new team_001.Student("", "", "hi!", strList19);
        team_001.VirtualBook virtualBook24 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int25 = student21.checkOverdue((team_001.Item) virtualBook24);
        java.lang.Boolean boolean26 = student7.isBorrowed((team_001.Item) virtualBook24);
        student7.setPassword("hi!");
        java.lang.String str29 = student7.getUsername();
        java.lang.String str30 = student7.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "" + "'", str29.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "hi!" + "'", str30.equals("hi!"));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        student7.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = student7.borrowed;
        student7.setUsername("");
        team_001.Newsletter newsletter17 = new team_001.Newsletter("hi!", "hi!");
        student7.unsubscribe(newsletter17);
        student7.setEmail("");
        java.lang.String str21 = student7.getPassword();
        student7.setEmail("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "hi!" + "'", str21.equals("hi!"));
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        team_001.CD cD2 = new team_001.CD("hi!", "");
        int int3 = cD2.ID;
        java.lang.String str4 = cD2.getAuthor();
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10727 + "'", int3 == 10727);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "" + "'", str4.equals(""));
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        team_001.Magazine magazine2 = team_001.ItemFactory.createMagazine("hi!", "");
        java.lang.String str3 = magazine2.getTitle();
        java.lang.String str4 = magazine2.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!" + "'", str3.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "" + "'", str4.equals(""));
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        team_001.Magazine magazine22 = new team_001.Magazine("", "hi!");
        student19.returnItem((team_001.Item) magazine22);
        java.lang.String str24 = student19.getEmail();
        student19.setPassword("");
        team_001.VirtualBook virtualBook29 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook29.ID = '4';
        int int32 = student19.checkOverdue((team_001.Item) virtualBook29);
        java.lang.String str33 = virtualBook29.getTitle();
        boolean boolean34 = student7.borrowItem((team_001.Item) virtualBook29);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap35 = null;
        student7.borrowed = itemMap35;
        java.lang.String str37 = student7.getPassword();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap38 = student7.borrowed;
        team_001.CD cD41 = new team_001.CD("hi!", "");
        java.lang.String str42 = cD41.getAuthor();
        java.lang.Object obj43 = cD41.clone();
        // The following exception was thrown during execution in test generation
        try {
            int int44 = student7.checkOverdue((team_001.Item) cD41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.HashMap.get(Object)\" because \"this.borrowed\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "hi!" + "'", str33.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "hi!" + "'", str37.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(itemMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "" + "'", str42.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj43);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        userBuilder17.email = "hi!";
        team_001.Library library20 = userBuilder17.lib;
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Library library41 = libraryFacade23.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder17.setLibrary(library41);
        userBuilder0.lib = library41;
        team_001.Client client44 = userBuilder0.buildVisitor();
        client44.setPassword("");
        client44.setPassword("hi!");
        java.lang.String str49 = client44.getUsername();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap50 = client44.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap50);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        team_001.Client client6 = userBuilder0.buildVisitor();
        java.lang.String str7 = userBuilder0.password;
        team_001.Client client8 = userBuilder0.buildVisitor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        team_001.visitor visitor3 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter6 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str7 = newsletter6.getTitle();
        visitor3.subscribe(newsletter6);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap9 = visitor3.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap9);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildNonFacultyStaff();
        userBuilder0.email = "";
        team_001.Library library9 = userBuilder0.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library9);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        java.lang.String str26 = userBuilder0.password;
        userBuilder0.email = "hi!";
        team_001.UserBuilder userBuilder30 = userBuilder0.setUsername("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        libraryFacade2.bookKeeping("hi!", strList9);
        team_001.Faculty faculty16 = new team_001.Faculty("hi!", "hi!", "hi!");
        java.util.ArrayList<java.lang.String> strList17 = faculty16.getCourses();
        java.util.ArrayList<java.lang.String> strList18 = faculty16.getCourses();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        team_001.Student student26 = new team_001.Student("", "", "hi!", strList24);
        team_001.Magazine magazine29 = new team_001.Magazine("", "hi!");
        student26.returnItem((team_001.Item) magazine29);
        java.lang.String str31 = student26.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap32 = null;
        student26.borrowed = itemMap32;
        java.lang.String str34 = student26.getPassword();
        team_001.visitor visitor38 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter41 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str42 = newsletter41.getTitle();
        visitor38.subscribe(newsletter41);
        student26.subscribe(newsletter41);
        int int45 = libraryFacade2.checkOverdue((team_001.Client) faculty16, (team_001.Item) newsletter41);
        java.lang.String str46 = newsletter41.getTitle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "" + "'", str31.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "hi!" + "'", str34.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "" + "'", str42.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "" + "'", str46.equals(""));
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        team_001.LibraryFacade libraryFacade8 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        libraryFacade8.bookKeeping("hi!", strList12);
        team_001.LibraryFacade libraryFacade18 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        libraryFacade18.bookKeeping("hi!", strList22);
        libraryFacade8.bookKeeping("", strList22);
        team_001.Library library26 = libraryFacade8.getLibrary();
        team_001.Library library27 = libraryFacade8.getLibrary();
        team_001.Faculty faculty31 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook34 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean35 = libraryFacade8.borrowItem((team_001.Client) faculty31, (team_001.Item) virtualBook34);
        java.util.ArrayList<java.lang.String> strList36 = faculty31.getCourses();
        team_001.Student student37 = new team_001.Student("hi!", "hi!", "hi!", strList36);
        team_001.Student student38 = new team_001.Student("", "", "", strList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList36);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        team_001.Library library10 = libraryFacade2.getLibrary();
        team_001.UserBuilder userBuilder11 = new team_001.UserBuilder();
        team_001.Client client12 = userBuilder11.buildVisitor();
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        team_001.LibraryFacade libraryFacade25 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        libraryFacade25.bookKeeping("hi!", strList29);
        libraryFacade15.bookKeeping("", strList29);
        team_001.Library library33 = libraryFacade15.getLibrary();
        team_001.UserBuilder userBuilder34 = userBuilder11.setLibrary(library33);
        team_001.Client client35 = userBuilder34.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder37 = userBuilder34.setPassword("hi!");
        team_001.Library library38 = userBuilder34.lib;
        team_001.Client client39 = userBuilder34.buildStudent();
        team_001.Item item40 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = libraryFacade2.borrowItem(client39, item40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"team_001.Item.getID()\" because \"item\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client39);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setUsername("hi!");
        team_001.UserBuilder userBuilder28 = userBuilder26.setUsername("");
        team_001.LibraryFacade libraryFacade31 = new team_001.LibraryFacade("", "");
        team_001.Library library32 = libraryFacade31.getLibrary();
        team_001.UserBuilder userBuilder33 = userBuilder26.setLibrary(library32);
        java.lang.String str34 = userBuilder33.email;
        team_001.UserBuilder userBuilder35 = new team_001.UserBuilder();
        team_001.Client client36 = userBuilder35.buildVisitor();
        team_001.LibraryFacade libraryFacade39 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        libraryFacade39.bookKeeping("hi!", strList43);
        team_001.LibraryFacade libraryFacade49 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        libraryFacade49.bookKeeping("hi!", strList53);
        libraryFacade39.bookKeeping("", strList53);
        team_001.Library library57 = libraryFacade39.getLibrary();
        team_001.UserBuilder userBuilder58 = userBuilder35.setLibrary(library57);
        team_001.Client client59 = userBuilder58.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder61 = userBuilder58.setPassword("hi!");
        team_001.Library library62 = userBuilder58.lib;
        team_001.Client client63 = userBuilder58.buildStudent();
        team_001.UserBuilder userBuilder65 = userBuilder58.setUsername("");
        team_001.UserBuilder userBuilder66 = new team_001.UserBuilder();
        team_001.Client client67 = userBuilder66.buildVisitor();
        team_001.UserBuilder userBuilder69 = userBuilder66.setPassword("hi!");
        userBuilder66.password = "hi!";
        team_001.LibraryFacade libraryFacade74 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray77 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        libraryFacade74.bookKeeping("hi!", strList78);
        team_001.Library library81 = libraryFacade74.getLibrary();
        team_001.UserBuilder userBuilder82 = userBuilder66.setLibrary(library81);
        team_001.UserBuilder userBuilder83 = userBuilder65.setLibrary(library81);
        userBuilder33.lib = library81;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder83);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        java.lang.String str26 = userBuilder0.password;
        team_001.Client client27 = userBuilder0.buildStudent();
        client27.setEmail("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        java.lang.String str6 = userManagement1.getType("");
        team_001.Client client11 = userManagement1.writeUser("", "", "hi!", "");
        team_001.Client client16 = userManagement1.writeUser("", "", "", "");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client16);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.UserBuilder userBuilder30 = userBuilder23.setUsername("");
        userBuilder23.email = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.Library library24 = libraryFacade5.getLibrary();
        team_001.Faculty faculty28 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook31 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean32 = libraryFacade5.borrowItem((team_001.Client) faculty28, (team_001.Item) virtualBook31);
        java.util.ArrayList<java.lang.String> strList33 = faculty28.getCourses();
        team_001.Student student34 = new team_001.Student("", "", "", strList33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList33);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        team_001.Faculty faculty34 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter37 = new team_001.Newsletter("hi!", "");
        faculty34.subscribe(newsletter37);
        java.util.ArrayList<java.lang.String> strList39 = faculty34.getCourses();
        java.util.ArrayList<java.lang.String> strList40 = faculty34.getCourses();
        faculty34.setPassword("");
        java.util.ArrayList<java.lang.String> strList43 = faculty34.getCourses();
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("", strList43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList43);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        team_001.LibraryFacade libraryFacade8 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        libraryFacade8.bookKeeping("hi!", strList12);
        team_001.LibraryFacade libraryFacade18 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        libraryFacade18.bookKeeping("hi!", strList22);
        libraryFacade8.bookKeeping("", strList22);
        team_001.Library library26 = libraryFacade8.getLibrary();
        team_001.Library library27 = libraryFacade8.getLibrary();
        team_001.Faculty faculty31 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook34 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean35 = libraryFacade8.borrowItem((team_001.Client) faculty31, (team_001.Item) virtualBook34);
        faculty31.setId((int) (byte) -1);
        java.util.ArrayList<java.lang.String> strList38 = faculty31.getCourses();
        team_001.Student student39 = new team_001.Student("hi!", "", "", strList38);
        team_001.Student student40 = new team_001.Student("", "", "hi!", strList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList38);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        team_001.Client client9 = userManagement1.writeUser("", "hi!", "hi!", "hi!");
        boolean boolean12 = userManagement1.readUsers("hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            team_001.Client client17 = userManagement1.writeUser("hi!", "hi!", "", "");
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        team_001.Student student22 = new team_001.Student("", "", "hi!", strList20);
        team_001.Magazine magazine25 = new team_001.Magazine("", "hi!");
        student22.returnItem((team_001.Item) magazine25);
        java.lang.String str27 = student22.getEmail();
        student22.setPassword("");
        team_001.VirtualBook virtualBook32 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook32.ID = '4';
        int int35 = student22.checkOverdue((team_001.Item) virtualBook32);
        java.lang.String str36 = virtualBook32.getTitle();
        boolean boolean37 = student10.borrowItem((team_001.Item) virtualBook32);
        client2.returnItem((team_001.Item) virtualBook32);
        int int39 = virtualBook32.getID();
        java.lang.Object obj40 = virtualBook32.clone();
        java.lang.String str41 = virtualBook32.getTitle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "hi!" + "'", str36.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "hi!" + "'", str41.equals("hi!"));
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        student10.setEmail("hi!");
        team_001.Magazine magazine15 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean16 = student10.isBorrowed((team_001.Item) magazine15);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int28 = student24.checkOverdue((team_001.Item) virtualBook27);
        java.lang.Boolean boolean29 = student10.isBorrowed((team_001.Item) virtualBook27);
        student10.setPassword("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap32 = student10.borrowed;
        team_001.Item item33 = null;
        int int34 = libraryFacade2.checkOverdue((team_001.Client) student10, item33);
        team_001.Library library35 = libraryFacade2.getLibrary();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library35);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        libraryFacade2.bookKeeping("", strList27);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap31 = libraryFacade2.getInventory();
        team_001.LibraryFacade libraryFacade34 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        libraryFacade34.bookKeeping("hi!", strList38);
        team_001.visitor visitor44 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine47 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean48 = libraryFacade34.borrowItem((team_001.Client) visitor44, (team_001.Item) magazine47);
        visitor44.setPassword("hi!");
        team_001.LibraryFacade libraryFacade53 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        libraryFacade53.bookKeeping("hi!", strList57);
        team_001.LibraryFacade libraryFacade63 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        libraryFacade63.bookKeeping("hi!", strList67);
        libraryFacade53.bookKeeping("", strList67);
        team_001.Library library71 = libraryFacade53.getLibrary();
        team_001.Library library72 = libraryFacade53.getLibrary();
        team_001.Faculty faculty76 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook79 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean80 = libraryFacade53.borrowItem((team_001.Client) faculty76, (team_001.Item) virtualBook79);
        int int81 = libraryFacade2.checkOverdue((team_001.Client) visitor44, (team_001.Item) virtualBook79);
        team_001.Library library82 = libraryFacade2.getLibrary();
        team_001.Library library83 = libraryFacade2.getLibrary();
        team_001.Library library84 = libraryFacade2.getLibrary();
        java.lang.String[] strArray93 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList94 = new java.util.ArrayList<java.lang.String>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList94, strArray93);
        team_001.Student student96 = new team_001.Student("", "hi!", "hi!", strList94);
        team_001.Student student97 = new team_001.Student("hi!", "", "", strList94);
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("", strList94);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.Client client48 = userBuilder24.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder50 = userBuilder24.setUsername("");
        team_001.UserBuilder userBuilder51 = new team_001.UserBuilder();
        team_001.Client client52 = userBuilder51.buildVisitor();
        java.lang.String str53 = userBuilder51.password;
        team_001.LibraryFacade libraryFacade56 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        libraryFacade56.bookKeeping("hi!", strList60);
        team_001.LibraryFacade libraryFacade66 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray69 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        libraryFacade66.bookKeeping("hi!", strList70);
        libraryFacade56.bookKeeping("", strList70);
        team_001.Library library74 = libraryFacade56.getLibrary();
        team_001.UserBuilder userBuilder75 = userBuilder51.setLibrary(library74);
        team_001.Client client76 = userBuilder51.buildFaculty();
        team_001.Library library77 = userBuilder51.lib;
        userBuilder50.lib = library77;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library77);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.LibraryFacade libraryFacade31 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        libraryFacade31.bookKeeping("hi!", strList35);
        team_001.visitor visitor41 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine44 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean45 = libraryFacade31.borrowItem((team_001.Client) visitor41, (team_001.Item) magazine44);
        java.lang.Boolean boolean46 = client28.isBorrowed((team_001.Item) magazine44);
        team_001.LibraryFacade libraryFacade49 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        team_001.Student student57 = new team_001.Student("", "", "hi!", strList55);
        team_001.Magazine magazine60 = new team_001.Magazine("", "hi!");
        student57.returnItem((team_001.Item) magazine60);
        java.lang.String str62 = student57.getEmail();
        team_001.CD cD65 = new team_001.CD("", "");
        boolean boolean66 = libraryFacade49.borrowItem((team_001.Client) student57, (team_001.Item) cD65);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        team_001.Student student74 = new team_001.Student("", "", "hi!", strList72);
        student74.setEmail("hi!");
        team_001.Magazine magazine79 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean80 = student74.isBorrowed((team_001.Item) magazine79);
        boolean boolean81 = student57.borrowItem((team_001.Item) magazine79);
        java.lang.String[] strArray86 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        team_001.Student student89 = new team_001.Student("", "", "hi!", strList87);
        team_001.VirtualBook virtualBook92 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int93 = student89.checkOverdue((team_001.Item) virtualBook92);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap94 = student89.borrowed;
        team_001.BorrowedIterator borrowedIterator95 = new team_001.BorrowedIterator(itemMap94);
        student57.borrowed = itemMap94;
        client28.borrowed = itemMap94;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "" + "'", str62.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap94);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        team_001.Client.current_id = 2650;
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        team_001.Client client9 = userManagement1.writeUser("", "", "hi!", "hi!");
        boolean boolean12 = userManagement1.readUsers("hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = userManagement1.readUsers("", "");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildVisitor();
        java.lang.String str7 = userBuilder0.password;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder9 = userBuilder0.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        java.util.ArrayList<java.lang.String> strList30 = faculty25.getCourses();
        java.util.ArrayList<java.lang.String> strList31 = faculty25.getCourses();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        team_001.Magazine magazine42 = new team_001.Magazine("", "hi!");
        student39.returnItem((team_001.Item) magazine42);
        java.lang.String str44 = student39.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap45 = null;
        student39.borrowed = itemMap45;
        java.lang.String str47 = student39.getEmail();
        team_001.Magazine magazine50 = team_001.ItemFactory.createMagazine("", "hi!");
        boolean boolean51 = student39.borrowItem((team_001.Item) magazine50);
        int int52 = faculty25.checkOverdue((team_001.Item) magazine50);
        java.util.ArrayList<java.lang.String> strList53 = faculty25.getCourses();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "" + "'", str44.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "" + "'", str47.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList53);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        java.util.ArrayList<java.lang.String> strList4 = faculty3.getCourses();
        team_001.CD cD7 = team_001.ItemFactory.createCD("", "hi!");
        boolean boolean8 = faculty3.borrowItem((team_001.Item) cD7);
        java.lang.Object obj9 = cD7.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        student10.setPassword("");
        team_001.Newsletter newsletter24 = team_001.ItemFactory.createNewsLetter("hi!", "");
        student10.subscribe(newsletter24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter24);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        team_001.visitor visitor3 = new team_001.visitor("hi!", "", "");
        visitor3.setId(6);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        userBuilder0.password = "";
        java.lang.String str5 = userBuilder0.password;
        userBuilder0.password = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "" + "'", str5.equals(""));
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        java.lang.String str6 = userBuilder0.password;
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        userBuilder7.email = "hi!";
        team_001.Library library10 = userBuilder7.lib;
        team_001.Client client11 = userBuilder7.buildVisitor();
        team_001.Client client12 = userBuilder7.buildFaculty();
        java.lang.String str13 = userBuilder7.password;
        team_001.UserBuilder userBuilder14 = new team_001.UserBuilder();
        team_001.Client client15 = userBuilder14.buildVisitor();
        java.lang.String str16 = userBuilder14.password;
        userBuilder14.password = "hi!";
        team_001.LibraryFacade libraryFacade21 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        libraryFacade21.bookKeeping("hi!", strList25);
        team_001.Library library28 = libraryFacade21.getLibrary();
        team_001.UserBuilder userBuilder29 = userBuilder14.setLibrary(library28);
        team_001.UserBuilder userBuilder30 = userBuilder7.setLibrary(library28);
        userBuilder0.lib = library28;
        team_001.UserBuilder userBuilder33 = userBuilder0.setUsername("hi!");
        userBuilder0.email = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder33);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        student10.setEmail("hi!");
        team_001.Magazine magazine15 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean16 = student10.isBorrowed((team_001.Item) magazine15);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int28 = student24.checkOverdue((team_001.Item) virtualBook27);
        java.lang.Boolean boolean29 = student10.isBorrowed((team_001.Item) virtualBook27);
        student10.setPassword("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap32 = student10.borrowed;
        team_001.Item item33 = null;
        int int34 = libraryFacade2.checkOverdue((team_001.Client) student10, item33);
        team_001.UserBuilder userBuilder35 = new team_001.UserBuilder();
        team_001.Client client36 = userBuilder35.buildVisitor();
        team_001.LibraryFacade libraryFacade39 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        libraryFacade39.bookKeeping("hi!", strList43);
        team_001.LibraryFacade libraryFacade49 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        libraryFacade49.bookKeeping("hi!", strList53);
        libraryFacade39.bookKeeping("", strList53);
        team_001.Library library57 = libraryFacade39.getLibrary();
        team_001.UserBuilder userBuilder58 = userBuilder35.setLibrary(library57);
        team_001.Client client59 = userBuilder58.buildStudent();
        team_001.visitor visitor63 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter66 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str67 = newsletter66.getTitle();
        visitor63.subscribe(newsletter66);
        int int69 = libraryFacade2.checkOverdue(client59, (team_001.Item) newsletter66);
        java.lang.String str70 = client59.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "" + "'", str67.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str70);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildFaculty();
        java.lang.Class<?> wildcardClass26 = userBuilder0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        userBuilder23.email = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        int int30 = virtualBook28.getID();
        java.lang.String str31 = virtualBook28.getTitle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 11826 + "'", int30 == 11826);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "" + "'", str31.equals(""));
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        team_001.Student student21 = new team_001.Student("", "", "hi!", strList19);
        student21.setEmail("hi!");
        student21.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap26 = student21.borrowed;
        student21.setUsername("");
        team_001.Newsletter newsletter31 = new team_001.Newsletter("hi!", "hi!");
        student21.unsubscribe(newsletter31);
        java.lang.Object obj33 = newsletter31.clone();
        student9.subscribe(newsletter31);
        client1.unsubscribe(newsletter31);
        team_001.LibraryFacade libraryFacade38 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        team_001.Student student46 = new team_001.Student("", "", "hi!", strList44);
        team_001.Magazine magazine49 = new team_001.Magazine("", "hi!");
        student46.returnItem((team_001.Item) magazine49);
        java.lang.String str51 = student46.getEmail();
        team_001.CD cD54 = new team_001.CD("", "");
        boolean boolean55 = libraryFacade38.borrowItem((team_001.Client) student46, (team_001.Item) cD54);
        team_001.Library library56 = libraryFacade38.getLibrary();
        team_001.Library library57 = libraryFacade38.getLibrary();
        team_001.UserBuilder userBuilder58 = new team_001.UserBuilder();
        team_001.Client client59 = userBuilder58.buildVisitor();
        team_001.LibraryFacade libraryFacade62 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        libraryFacade62.bookKeeping("hi!", strList66);
        team_001.LibraryFacade libraryFacade72 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray75 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        libraryFacade72.bookKeeping("hi!", strList76);
        libraryFacade62.bookKeeping("", strList76);
        team_001.Library library80 = libraryFacade62.getLibrary();
        team_001.UserBuilder userBuilder81 = userBuilder58.setLibrary(library80);
        team_001.Client client82 = userBuilder58.buildVisitor();
        int int83 = client82.getId();
        team_001.CD cD86 = new team_001.CD("hi!", "");
        java.lang.String str87 = cD86.getAuthor();
        java.lang.Object obj88 = cD86.clone();
        boolean boolean89 = libraryFacade38.borrowItem(client82, (team_001.Item) cD86);
        boolean boolean90 = client1.borrowItem((team_001.Item) cD86);
        team_001.Newsletter newsletter93 = team_001.ItemFactory.createNewsLetter("hi!", "");
        java.lang.Object obj94 = newsletter93.clone();
        client1.unsubscribe(newsletter93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "" + "'", str51.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client82);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2710 + "'", int83 == 2710);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str87 + "' != '" + "" + "'", str87.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj94);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        java.lang.String str10 = student7.getPassword();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        java.lang.String str19 = student18.getEmail();
        student18.setUsername("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap22 = student18.borrowed;
        student7.borrowed = itemMap22;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "" + "'", str19.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap22);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        team_001.Client.current_id = 86;
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        userBuilder15.password = "";
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        userBuilder15.lib = library39;
        team_001.LibraryFacade libraryFacade43 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        libraryFacade43.bookKeeping("hi!", strList47);
        team_001.LibraryFacade libraryFacade53 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        libraryFacade53.bookKeeping("hi!", strList57);
        libraryFacade43.bookKeeping("", strList57);
        team_001.Library library61 = libraryFacade43.getLibrary();
        team_001.Library library62 = libraryFacade43.getLibrary();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        team_001.Student student70 = new team_001.Student("", "", "hi!", strList68);
        student70.setEmail("hi!");
        student70.setEmail("hi!");
        team_001.PhysicalBook physicalBook77 = new team_001.PhysicalBook("", "hi!");
        boolean boolean78 = libraryFacade43.borrowItem((team_001.Client) student70, (team_001.Item) physicalBook77);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap79 = libraryFacade43.getInventory();
        team_001.Library library80 = libraryFacade43.getLibrary();
        userBuilder15.lib = library80;
        team_001.UserBuilder userBuilder83 = userBuilder15.setUsername("");
        team_001.Client client84 = userBuilder83.buildVisitor();
        team_001.Item item85 = null;
        int int86 = client84.checkOverdue(item85);
        team_001.CD cD89 = new team_001.CD("hi!", "");
        int int90 = cD89.ID;
        client84.returnItem((team_001.Item) cD89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 11944 + "'", int90 == 11944);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        team_001.Magazine magazine22 = new team_001.Magazine("", "hi!");
        student19.returnItem((team_001.Item) magazine22);
        java.lang.String str24 = student19.getEmail();
        student19.setPassword("");
        team_001.VirtualBook virtualBook29 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook29.ID = '4';
        int int32 = student19.checkOverdue((team_001.Item) virtualBook29);
        java.lang.String str33 = virtualBook29.getTitle();
        boolean boolean34 = student7.borrowItem((team_001.Item) virtualBook29);
        int int35 = student7.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "hi!" + "'", str33.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 101 + "'", int35 == 101);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        team_001.Student student17 = new team_001.Student("", "", "hi!", strList15);
        team_001.Magazine magazine20 = new team_001.Magazine("", "hi!");
        student17.returnItem((team_001.Item) magazine20);
        java.lang.String str22 = student17.getEmail();
        student17.setPassword("");
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook27.ID = '4';
        int int30 = student17.checkOverdue((team_001.Item) virtualBook27);
        team_001.UserBuilder userBuilder31 = new team_001.UserBuilder();
        team_001.Client client32 = userBuilder31.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap33 = client32.getSubcribed();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        team_001.Student student41 = new team_001.Student("", "", "hi!", strList39);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap42 = student41.getSubcribed();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        team_001.Student student50 = new team_001.Student("", "", "hi!", strList48);
        student50.setEmail("hi!");
        team_001.Magazine magazine55 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean56 = student50.isBorrowed((team_001.Item) magazine55);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        team_001.Student student64 = new team_001.Student("", "", "hi!", strList62);
        team_001.VirtualBook virtualBook67 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int68 = student64.checkOverdue((team_001.Item) virtualBook67);
        java.lang.Boolean boolean69 = student50.isBorrowed((team_001.Item) virtualBook67);
        java.lang.String str70 = virtualBook67.getTitle();
        student41.returnItem((team_001.Item) virtualBook67);
        virtualBook67.ID = 10;
        java.lang.Boolean boolean74 = client32.isBorrowed((team_001.Item) virtualBook67);
        boolean boolean75 = libraryFacade2.borrowItem((team_001.Client) student17, (team_001.Item) virtualBook67);
        student17.setPassword("");
        student17.setPassword("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "" + "'", str22.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "hi!" + "'", str70.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder24.buildStudent();
        java.lang.String str26 = userBuilder24.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        team_001.Magazine magazine12 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean13 = student7.isBorrowed((team_001.Item) magazine12);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        team_001.Student student21 = new team_001.Student("", "", "hi!", strList19);
        team_001.VirtualBook virtualBook24 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int25 = student21.checkOverdue((team_001.Item) virtualBook24);
        java.lang.Boolean boolean26 = student7.isBorrowed((team_001.Item) virtualBook24);
        student7.setPassword("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap29 = student7.borrowed;
        team_001.UserBuilder userBuilder30 = new team_001.UserBuilder();
        team_001.Client client31 = userBuilder30.buildVisitor();
        team_001.UserBuilder userBuilder33 = userBuilder30.setPassword("hi!");
        userBuilder30.password = "hi!";
        team_001.Client client36 = userBuilder30.buildNonFacultyStaff();
        team_001.CD cD39 = new team_001.CD("", "");
        java.lang.Boolean boolean40 = client36.isBorrowed((team_001.Item) cD39);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap41 = client36.borrowed;
        team_001.BorrowedIterator borrowedIterator42 = new team_001.BorrowedIterator(itemMap41);
        student7.borrowed = itemMap41;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap41);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        userBuilder17.email = "hi!";
        team_001.Library library20 = userBuilder17.lib;
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Library library41 = libraryFacade23.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder17.setLibrary(library41);
        userBuilder0.lib = library41;
        team_001.Client client44 = userBuilder0.buildFaculty();
        team_001.UserBuilder userBuilder45 = new team_001.UserBuilder();
        userBuilder45.email = "hi!";
        team_001.Library library48 = userBuilder45.lib;
        team_001.Client client49 = userBuilder45.buildVisitor();
        team_001.Client client50 = userBuilder45.buildFaculty();
        java.lang.String str51 = userBuilder45.password;
        team_001.UserBuilder userBuilder52 = new team_001.UserBuilder();
        team_001.Client client53 = userBuilder52.buildVisitor();
        java.lang.String str54 = userBuilder52.password;
        userBuilder52.password = "hi!";
        team_001.LibraryFacade libraryFacade59 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        libraryFacade59.bookKeeping("hi!", strList63);
        team_001.Library library66 = libraryFacade59.getLibrary();
        team_001.UserBuilder userBuilder67 = userBuilder52.setLibrary(library66);
        team_001.UserBuilder userBuilder68 = userBuilder45.setLibrary(library66);
        userBuilder0.lib = library66;
        java.lang.String str70 = userBuilder0.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "hi!" + "'", str70.equals("hi!"));
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Student student11 = new team_001.Student("", "hi!", "", strList8);
        team_001.PhysicalBook physicalBook14 = team_001.ItemFactory.createPhysicalBook("hi!", "hi!");
        student11.returnItem((team_001.Item) physicalBook14);
        java.lang.String str16 = student11.getPassword();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int28 = student24.checkOverdue((team_001.Item) virtualBook27);
        int int29 = student24.getId();
        student24.setUsername("");
        team_001.LibraryFacade libraryFacade34 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        team_001.Student student42 = new team_001.Student("", "", "hi!", strList40);
        team_001.Magazine magazine45 = new team_001.Magazine("", "hi!");
        student42.returnItem((team_001.Item) magazine45);
        java.lang.String str47 = student42.getEmail();
        team_001.CD cD50 = new team_001.CD("", "");
        boolean boolean51 = libraryFacade34.borrowItem((team_001.Client) student42, (team_001.Item) cD50);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        team_001.Student student59 = new team_001.Student("", "", "hi!", strList57);
        student59.setEmail("hi!");
        team_001.Magazine magazine64 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean65 = student59.isBorrowed((team_001.Item) magazine64);
        boolean boolean66 = student42.borrowItem((team_001.Item) magazine64);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        team_001.Student student74 = new team_001.Student("", "", "hi!", strList72);
        team_001.VirtualBook virtualBook77 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int78 = student74.checkOverdue((team_001.Item) virtualBook77);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap79 = student74.borrowed;
        team_001.BorrowedIterator borrowedIterator80 = new team_001.BorrowedIterator(itemMap79);
        student42.borrowed = itemMap79;
        student24.borrowed = itemMap79;
        student11.borrowed = itemMap79;
        team_001.BorrowedIterator borrowedIterator84 = new team_001.BorrowedIterator(itemMap79);
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item85 = borrowedIterator84.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 132 + "'", int29 == 132);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "" + "'", str47.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap79);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        team_001.Client client18 = userBuilder17.buildVisitor();
        team_001.Client client19 = userBuilder17.buildNonFacultyStaff();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        team_001.Student student27 = new team_001.Student("", "", "hi!", strList25);
        team_001.Magazine magazine30 = new team_001.Magazine("", "hi!");
        student27.returnItem((team_001.Item) magazine30);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        team_001.Magazine magazine42 = new team_001.Magazine("", "hi!");
        student39.returnItem((team_001.Item) magazine42);
        java.lang.String str44 = student39.getEmail();
        student39.setPassword("");
        team_001.VirtualBook virtualBook49 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook49.ID = '4';
        int int52 = student39.checkOverdue((team_001.Item) virtualBook49);
        java.lang.String str53 = virtualBook49.getTitle();
        boolean boolean54 = student27.borrowItem((team_001.Item) virtualBook49);
        client19.returnItem((team_001.Item) virtualBook49);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        team_001.Student student63 = new team_001.Student("", "", "hi!", strList61);
        team_001.VirtualBook virtualBook66 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int67 = student63.checkOverdue((team_001.Item) virtualBook66);
        boolean boolean68 = libraryFacade2.borrowItem(client19, (team_001.Item) virtualBook66);
        client19.setPassword("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "" + "'", str44.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "hi!" + "'", str53.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildVisitor();
        java.lang.String str7 = userBuilder0.password;
        team_001.UserBuilder userBuilder9 = userBuilder0.setUsername("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder9);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.UserBuilder userBuilder49 = userBuilder24.setUsername("hi!");
        team_001.UserBuilder userBuilder50 = new team_001.UserBuilder();
        team_001.Client client51 = userBuilder50.buildVisitor();
        java.lang.String str52 = userBuilder50.password;
        team_001.LibraryFacade libraryFacade55 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        libraryFacade55.bookKeeping("hi!", strList59);
        team_001.LibraryFacade libraryFacade65 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        libraryFacade65.bookKeeping("hi!", strList69);
        libraryFacade55.bookKeeping("", strList69);
        team_001.Library library73 = libraryFacade55.getLibrary();
        team_001.UserBuilder userBuilder74 = userBuilder50.setLibrary(library73);
        team_001.LibraryFacade libraryFacade77 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray80 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        libraryFacade77.bookKeeping("hi!", strList81);
        team_001.LibraryFacade libraryFacade87 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray90 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList91 = new java.util.ArrayList<java.lang.String>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList91, strArray90);
        libraryFacade87.bookKeeping("hi!", strList91);
        libraryFacade77.bookKeeping("", strList91);
        team_001.Library library95 = libraryFacade77.getLibrary();
        team_001.Library library96 = libraryFacade77.getLibrary();
        team_001.UserBuilder userBuilder97 = userBuilder74.setLibrary(library96);
        team_001.UserBuilder userBuilder98 = userBuilder24.setLibrary(library96);
        team_001.Client client99 = userBuilder98.buildNonFacultyStaff();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client99);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Client client27 = userBuilder26.buildStudent();
        java.lang.String str28 = userBuilder26.email;
        team_001.Client client29 = userBuilder26.buildStudent();
        java.lang.String str30 = client29.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "");
        team_001.Library library3 = libraryFacade2.getLibrary();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap12 = student11.getSubcribed();
        team_001.CD cD15 = team_001.ItemFactory.createCD("hi!", "");
        student11.returnItem((team_001.Item) cD15);
        student11.setEmail("hi!");
        team_001.Faculty faculty22 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter25 = new team_001.Newsletter("hi!", "");
        faculty22.subscribe(newsletter25);
        team_001.PhysicalBook physicalBook29 = new team_001.PhysicalBook("", "");
        faculty22.returnItem((team_001.Item) physicalBook29);
        libraryFacade2.returnItem((team_001.Client) student11, (team_001.Item) physicalBook29);
        team_001.Library library32 = libraryFacade2.getLibrary();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library32);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap8 = student7.getSubcribed();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        team_001.Student student16 = new team_001.Student("", "", "hi!", strList14);
        student16.setEmail("hi!");
        team_001.Magazine magazine21 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean22 = student16.isBorrowed((team_001.Item) magazine21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        team_001.Student student30 = new team_001.Student("", "", "hi!", strList28);
        team_001.VirtualBook virtualBook33 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int34 = student30.checkOverdue((team_001.Item) virtualBook33);
        java.lang.Boolean boolean35 = student16.isBorrowed((team_001.Item) virtualBook33);
        java.lang.String str36 = virtualBook33.getTitle();
        student7.returnItem((team_001.Item) virtualBook33);
        java.lang.Object obj38 = virtualBook33.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "hi!" + "'", str36.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj38);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        team_001.Faculty faculty45 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter48 = new team_001.Newsletter("hi!", "");
        faculty45.subscribe(newsletter48);
        java.util.ArrayList<java.lang.String> strList50 = faculty45.getCourses();
        libraryFacade2.bookKeeping("", strList50);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap52 = libraryFacade2.getInventory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap52);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        team_001.Faculty faculty45 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter48 = new team_001.Newsletter("hi!", "");
        faculty45.subscribe(newsletter48);
        java.util.ArrayList<java.lang.String> strList50 = faculty45.getCourses();
        libraryFacade2.bookKeeping("", strList50);
        team_001.Library library52 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap53 = libraryFacade2.getInventory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap53);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        team_001.VirtualBook virtualBook14 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int15 = student11.checkOverdue((team_001.Item) virtualBook14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        team_001.Student student23 = new team_001.Student("", "", "hi!", strList21);
        team_001.VirtualBook virtualBook26 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int27 = student23.checkOverdue((team_001.Item) virtualBook26);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap28 = student23.borrowed;
        team_001.BorrowedIterator borrowedIterator29 = new team_001.BorrowedIterator(itemMap28);
        student11.borrowed = itemMap28;
        faculty3.borrowed = itemMap28;
        java.util.ArrayList<java.lang.String> strList32 = faculty3.getCourses();
        faculty3.setId(2086);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList32);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        team_001.Client client6 = userManagement1.writeUser("hi!", "hi!", "hi!", "");
        java.lang.String str7 = client6.getEmail();
        client6.setEmail("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        userBuilder17.email = "hi!";
        team_001.Library library20 = userBuilder17.lib;
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Library library41 = libraryFacade23.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder17.setLibrary(library41);
        userBuilder0.lib = library41;
        team_001.UserBuilder userBuilder44 = new team_001.UserBuilder();
        userBuilder44.email = "hi!";
        team_001.Library library47 = userBuilder44.lib;
        team_001.LibraryFacade libraryFacade50 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        libraryFacade50.bookKeeping("hi!", strList54);
        team_001.LibraryFacade libraryFacade60 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        libraryFacade60.bookKeeping("hi!", strList64);
        libraryFacade50.bookKeeping("", strList64);
        team_001.Library library68 = libraryFacade50.getLibrary();
        team_001.UserBuilder userBuilder69 = userBuilder44.setLibrary(library68);
        userBuilder0.lib = library68;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder69);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.UserBuilder userBuilder29 = userBuilder23.setUsername("hi!");
        java.lang.String str30 = userBuilder29.email;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        java.lang.String str26 = userBuilder0.password;
        team_001.Client client27 = userBuilder0.buildStudent();
        userBuilder0.password = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        userBuilder17.email = "hi!";
        team_001.Library library20 = userBuilder17.lib;
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Library library41 = libraryFacade23.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder17.setLibrary(library41);
        userBuilder0.lib = library41;
        team_001.Client client44 = userBuilder0.buildVisitor();
        client44.setPassword("");
        java.lang.String str47 = client44.getUsername();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        team_001.Faculty faculty6 = new team_001.Faculty("hi!", "hi!", "");
        java.util.ArrayList<java.lang.String> strList7 = faculty6.getCourses();
        team_001.Student student8 = new team_001.Student("hi!", "", "hi!", strList7);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        team_001.Student student16 = new team_001.Student("", "", "hi!", strList14);
        team_001.VirtualBook virtualBook19 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int20 = student16.checkOverdue((team_001.Item) virtualBook19);
        int int21 = student16.getId();
        student16.setUsername("");
        team_001.LibraryFacade libraryFacade26 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        team_001.Student student34 = new team_001.Student("", "", "hi!", strList32);
        team_001.Magazine magazine37 = new team_001.Magazine("", "hi!");
        student34.returnItem((team_001.Item) magazine37);
        java.lang.String str39 = student34.getEmail();
        team_001.CD cD42 = new team_001.CD("", "");
        boolean boolean43 = libraryFacade26.borrowItem((team_001.Client) student34, (team_001.Item) cD42);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        team_001.Student student51 = new team_001.Student("", "", "hi!", strList49);
        student51.setEmail("hi!");
        team_001.Magazine magazine56 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean57 = student51.isBorrowed((team_001.Item) magazine56);
        boolean boolean58 = student34.borrowItem((team_001.Item) magazine56);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        team_001.Student student66 = new team_001.Student("", "", "hi!", strList64);
        team_001.VirtualBook virtualBook69 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int70 = student66.checkOverdue((team_001.Item) virtualBook69);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap71 = student66.borrowed;
        team_001.BorrowedIterator borrowedIterator72 = new team_001.BorrowedIterator(itemMap71);
        student34.borrowed = itemMap71;
        student16.borrowed = itemMap71;
        student8.borrowed = itemMap71;
        team_001.BorrowedIterator borrowedIterator76 = new team_001.BorrowedIterator(itemMap71);
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item77 = borrowedIterator76.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 218 + "'", int21 == 218);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "" + "'", str39.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap71);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        userBuilder15.password = "";
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        userBuilder15.lib = library39;
        team_001.LibraryFacade libraryFacade43 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        libraryFacade43.bookKeeping("hi!", strList47);
        team_001.LibraryFacade libraryFacade53 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        libraryFacade53.bookKeeping("hi!", strList57);
        libraryFacade43.bookKeeping("", strList57);
        team_001.Library library61 = libraryFacade43.getLibrary();
        team_001.Library library62 = libraryFacade43.getLibrary();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        team_001.Student student70 = new team_001.Student("", "", "hi!", strList68);
        student70.setEmail("hi!");
        student70.setEmail("hi!");
        team_001.PhysicalBook physicalBook77 = new team_001.PhysicalBook("", "hi!");
        boolean boolean78 = libraryFacade43.borrowItem((team_001.Client) student70, (team_001.Item) physicalBook77);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap79 = libraryFacade43.getInventory();
        team_001.Library library80 = libraryFacade43.getLibrary();
        userBuilder15.lib = library80;
        team_001.UserBuilder userBuilder83 = userBuilder15.setUsername("");
        team_001.Client client84 = userBuilder83.buildVisitor();
        int int85 = client84.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client84);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 224 + "'", int85 == 224);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = null;
        student7.borrowed = itemMap13;
        team_001.LibraryFacade libraryFacade17 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        team_001.Student student40 = new team_001.Student("", "", "hi!", strList38);
        team_001.Magazine magazine43 = new team_001.Magazine("", "hi!");
        student40.returnItem((team_001.Item) magazine43);
        java.lang.String str45 = student40.getEmail();
        student40.setPassword("");
        team_001.VirtualBook virtualBook50 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook50.ID = '4';
        int int53 = student40.checkOverdue((team_001.Item) virtualBook50);
        java.lang.String str54 = virtualBook50.getTitle();
        int int55 = libraryFacade17.checkOverdue((team_001.Client) student25, (team_001.Item) virtualBook50);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        team_001.Student student63 = new team_001.Student("", "", "hi!", strList61);
        team_001.Magazine magazine66 = new team_001.Magazine("", "hi!");
        student63.returnItem((team_001.Item) magazine66);
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        team_001.Student student75 = new team_001.Student("", "", "hi!", strList73);
        team_001.Magazine magazine78 = new team_001.Magazine("", "hi!");
        student75.returnItem((team_001.Item) magazine78);
        java.lang.String str80 = student75.getEmail();
        student75.setPassword("");
        team_001.VirtualBook virtualBook85 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook85.ID = '4';
        int int88 = student75.checkOverdue((team_001.Item) virtualBook85);
        java.lang.String str89 = virtualBook85.getTitle();
        boolean boolean90 = student63.borrowItem((team_001.Item) virtualBook85);
        student25.returnItem((team_001.Item) virtualBook85);
        java.lang.String str92 = virtualBook85.getAuthor();
        boolean boolean93 = student7.borrowItem((team_001.Item) virtualBook85);
        student7.setUsername("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "" + "'", str45.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "hi!" + "'", str54.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "" + "'", str80.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str89 + "' != '" + "hi!" + "'", str89.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str92 + "' != '" + "hi!" + "'", str92.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        // The following exception was thrown during execution in test generation
        try {
            team_001.Client client6 = userManagement1.writeUser("", "hi!", "", "hi!");
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        team_001.Magazine magazine12 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean13 = student7.isBorrowed((team_001.Item) magazine12);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        team_001.Student student21 = new team_001.Student("", "", "hi!", strList19);
        team_001.VirtualBook virtualBook24 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int25 = student21.checkOverdue((team_001.Item) virtualBook24);
        java.lang.Boolean boolean26 = student7.isBorrowed((team_001.Item) virtualBook24);
        student7.setPassword("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap29 = student7.borrowed;
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        team_001.Student student37 = new team_001.Student("", "", "hi!", strList35);
        team_001.Magazine magazine40 = new team_001.Magazine("", "hi!");
        student37.returnItem((team_001.Item) magazine40);
        java.lang.String str42 = student37.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap43 = null;
        student37.borrowed = itemMap43;
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        team_001.Student student52 = new team_001.Student("", "", "hi!", strList50);
        team_001.Magazine magazine55 = new team_001.Magazine("", "hi!");
        student52.returnItem((team_001.Item) magazine55);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        team_001.Student student64 = new team_001.Student("", "", "hi!", strList62);
        team_001.Magazine magazine67 = new team_001.Magazine("", "hi!");
        student64.returnItem((team_001.Item) magazine67);
        java.lang.String str69 = student64.getEmail();
        student64.setPassword("");
        team_001.VirtualBook virtualBook74 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook74.ID = '4';
        int int77 = student64.checkOverdue((team_001.Item) virtualBook74);
        java.lang.String str78 = virtualBook74.getTitle();
        boolean boolean79 = student52.borrowItem((team_001.Item) virtualBook74);
        team_001.Newsletter newsletter82 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean83 = student52.borrowItem((team_001.Item) newsletter82);
        student37.unsubscribe(newsletter82);
        student7.subscribe(newsletter82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "" + "'", str42.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "" + "'", str69.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "hi!" + "'", str78.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        team_001.Client client9 = userManagement1.writeUser("", "", "hi!", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = userManagement1.getType("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(client9);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        team_001.Student student28 = new team_001.Student("", "", "hi!", strList26);
        team_001.Newsletter newsletter31 = new team_001.Newsletter("hi!", "hi!");
        int int32 = student28.checkOverdue((team_001.Item) newsletter31);
        team_001.Magazine magazine35 = team_001.ItemFactory.createMagazine("", "");
        magazine35.ID = 1961;
        boolean boolean38 = libraryFacade2.borrowItem((team_001.Client) student28, (team_001.Item) magazine35);
        java.lang.String str39 = student28.getPassword();
        team_001.PhysicalBook physicalBook42 = team_001.ItemFactory.createPhysicalBook("hi!", "");
        int int43 = student28.checkOverdue((team_001.Item) physicalBook42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        java.lang.String str26 = userBuilder0.password;
        team_001.UserBuilder userBuilder27 = new team_001.UserBuilder();
        team_001.Client client28 = userBuilder27.buildVisitor();
        java.lang.String str29 = userBuilder27.password;
        userBuilder27.password = "hi!";
        team_001.LibraryFacade libraryFacade34 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        libraryFacade34.bookKeeping("hi!", strList38);
        team_001.Library library41 = libraryFacade34.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder27.setLibrary(library41);
        userBuilder42.password = "";
        team_001.LibraryFacade libraryFacade47 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        libraryFacade47.bookKeeping("hi!", strList51);
        team_001.LibraryFacade libraryFacade57 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        libraryFacade57.bookKeeping("hi!", strList61);
        libraryFacade47.bookKeeping("", strList61);
        team_001.Library library65 = libraryFacade47.getLibrary();
        team_001.Library library66 = libraryFacade47.getLibrary();
        userBuilder42.lib = library66;
        team_001.UserBuilder userBuilder68 = userBuilder0.setLibrary(library66);
        team_001.Client client69 = userBuilder68.buildNonFacultyStaff();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client69);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        team_001.Faculty faculty6 = new team_001.Faculty("", "hi!", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        team_001.Student student14 = new team_001.Student("", "", "hi!", strList12);
        team_001.VirtualBook virtualBook17 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int18 = student14.checkOverdue((team_001.Item) virtualBook17);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        team_001.Student student26 = new team_001.Student("", "", "hi!", strList24);
        team_001.VirtualBook virtualBook29 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int30 = student26.checkOverdue((team_001.Item) virtualBook29);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap31 = student26.borrowed;
        team_001.BorrowedIterator borrowedIterator32 = new team_001.BorrowedIterator(itemMap31);
        student14.borrowed = itemMap31;
        faculty6.borrowed = itemMap31;
        java.util.ArrayList<java.lang.String> strList35 = faculty6.getCourses();
        team_001.Student student36 = new team_001.Student("hi!", "hi!", "hi!", strList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList35);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        team_001.VirtualBook virtualBook2 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook2.ID = '4';
        int int5 = virtualBook2.ID;
        virtualBook2.ID = (short) -1;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        team_001.Magazine magazine22 = new team_001.Magazine("", "hi!");
        student19.returnItem((team_001.Item) magazine22);
        java.lang.String str24 = student19.getEmail();
        student19.setPassword("");
        team_001.VirtualBook virtualBook29 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook29.ID = '4';
        int int32 = student19.checkOverdue((team_001.Item) virtualBook29);
        java.lang.String str33 = virtualBook29.getTitle();
        boolean boolean34 = student7.borrowItem((team_001.Item) virtualBook29);
        team_001.Newsletter newsletter37 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean38 = student7.borrowItem((team_001.Item) newsletter37);
        java.lang.String str39 = student7.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "hi!" + "'", str33.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "" + "'", str39.equals(""));
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        team_001.Magazine magazine51 = new team_001.Magazine("", "hi!");
        student48.returnItem((team_001.Item) magazine51);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "", "hi!", strList58);
        team_001.Magazine magazine63 = new team_001.Magazine("", "hi!");
        student60.returnItem((team_001.Item) magazine63);
        java.lang.String str65 = student60.getEmail();
        student60.setPassword("");
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook70.ID = '4';
        int int73 = student60.checkOverdue((team_001.Item) virtualBook70);
        java.lang.String str74 = virtualBook70.getTitle();
        boolean boolean75 = student48.borrowItem((team_001.Item) virtualBook70);
        student10.returnItem((team_001.Item) virtualBook70);
        team_001.Newsletter newsletter79 = team_001.ItemFactory.createNewsLetter("", "hi!");
        student10.subscribe(newsletter79);
        java.lang.String[] strArray85 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        team_001.Student student88 = new team_001.Student("", "", "hi!", strList86);
        student88.setEmail("hi!");
        student88.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap93 = student88.borrowed;
        team_001.BorrowedIterator borrowedIterator94 = new team_001.BorrowedIterator(itemMap93);
        boolean boolean95 = borrowedIterator94.hasNext();
        java.util.ArrayList<team_001.Item> itemList96 = student10.checkItemsOverdue(borrowedIterator94);
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item97 = borrowedIterator94.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "hi!" + "'", str74.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList96);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap2 = client1.getSubcribed();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap11 = student10.getSubcribed();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        student19.setEmail("hi!");
        team_001.Magazine magazine24 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean25 = student19.isBorrowed((team_001.Item) magazine24);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        team_001.Student student33 = new team_001.Student("", "", "hi!", strList31);
        team_001.VirtualBook virtualBook36 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int37 = student33.checkOverdue((team_001.Item) virtualBook36);
        java.lang.Boolean boolean38 = student19.isBorrowed((team_001.Item) virtualBook36);
        java.lang.String str39 = virtualBook36.getTitle();
        student10.returnItem((team_001.Item) virtualBook36);
        virtualBook36.ID = 10;
        java.lang.Boolean boolean43 = client1.isBorrowed((team_001.Item) virtualBook36);
        team_001.UserBuilder userBuilder44 = new team_001.UserBuilder();
        team_001.Client client45 = userBuilder44.buildVisitor();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        team_001.VirtualBook virtualBook56 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int57 = student53.checkOverdue((team_001.Item) virtualBook56);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap58 = student53.borrowed;
        team_001.BorrowedIterator borrowedIterator59 = new team_001.BorrowedIterator(itemMap58);
        java.util.ArrayList<team_001.Item> itemList60 = client45.checkItemsOverdue(borrowedIterator59);
        java.util.ArrayList<team_001.Item> itemList61 = client1.checkItemsOverdue(borrowedIterator59);
        java.lang.String str62 = client1.getPassword();
        team_001.Faculty faculty66 = new team_001.Faculty("", "hi!", "hi!");
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        team_001.Student student74 = new team_001.Student("", "", "hi!", strList72);
        team_001.VirtualBook virtualBook77 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int78 = student74.checkOverdue((team_001.Item) virtualBook77);
        java.lang.String[] strArray83 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        team_001.Student student86 = new team_001.Student("", "", "hi!", strList84);
        team_001.VirtualBook virtualBook89 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int90 = student86.checkOverdue((team_001.Item) virtualBook89);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap91 = student86.borrowed;
        team_001.BorrowedIterator borrowedIterator92 = new team_001.BorrowedIterator(itemMap91);
        student74.borrowed = itemMap91;
        faculty66.borrowed = itemMap91;
        client1.setBorrowed(itemMap91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap91);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        team_001.PhysicalBook physicalBook2 = new team_001.PhysicalBook("", "");
        java.lang.String str3 = physicalBook2.getAuthor();
        java.lang.String str4 = physicalBook2.getTitle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "" + "'", str4.equals(""));
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        team_001.Student student22 = new team_001.Student("", "", "hi!", strList20);
        team_001.Magazine magazine25 = new team_001.Magazine("", "hi!");
        student22.returnItem((team_001.Item) magazine25);
        java.lang.String str27 = student22.getEmail();
        student22.setPassword("");
        team_001.VirtualBook virtualBook32 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook32.ID = '4';
        int int35 = student22.checkOverdue((team_001.Item) virtualBook32);
        java.lang.String str36 = virtualBook32.getTitle();
        boolean boolean37 = student10.borrowItem((team_001.Item) virtualBook32);
        client2.returnItem((team_001.Item) virtualBook32);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap39 = client2.getSubcribed();
        client2.setId(61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "hi!" + "'", str36.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap39);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        team_001.Magazine magazine51 = new team_001.Magazine("", "hi!");
        student48.returnItem((team_001.Item) magazine51);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "", "hi!", strList58);
        team_001.Magazine magazine63 = new team_001.Magazine("", "hi!");
        student60.returnItem((team_001.Item) magazine63);
        java.lang.String str65 = student60.getEmail();
        student60.setPassword("");
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook70.ID = '4';
        int int73 = student60.checkOverdue((team_001.Item) virtualBook70);
        java.lang.String str74 = virtualBook70.getTitle();
        boolean boolean75 = student48.borrowItem((team_001.Item) virtualBook70);
        student10.returnItem((team_001.Item) virtualBook70);
        team_001.Newsletter newsletter79 = team_001.ItemFactory.createNewsLetter("", "hi!");
        student10.subscribe(newsletter79);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap81 = student10.borrowed;
        team_001.BorrowedIterator borrowedIterator82 = new team_001.BorrowedIterator(itemMap81);
        team_001.BorrowedIterator borrowedIterator83 = new team_001.BorrowedIterator(itemMap81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "hi!" + "'", str74.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap81);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        faculty25.setId((int) (byte) -1);
        java.lang.String str32 = faculty25.getPassword();
        java.util.ArrayList<java.lang.String> strList33 = faculty25.getCourses();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "" + "'", str32.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList33);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.lang.String str8 = student7.getEmail();
        team_001.UserBuilder userBuilder9 = new team_001.UserBuilder();
        team_001.Client client10 = userBuilder9.buildVisitor();
        team_001.Client client11 = userBuilder9.buildNonFacultyStaff();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        team_001.Magazine magazine22 = new team_001.Magazine("", "hi!");
        student19.returnItem((team_001.Item) magazine22);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        team_001.Student student31 = new team_001.Student("", "", "hi!", strList29);
        team_001.Magazine magazine34 = new team_001.Magazine("", "hi!");
        student31.returnItem((team_001.Item) magazine34);
        java.lang.String str36 = student31.getEmail();
        student31.setPassword("");
        team_001.VirtualBook virtualBook41 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook41.ID = '4';
        int int44 = student31.checkOverdue((team_001.Item) virtualBook41);
        java.lang.String str45 = virtualBook41.getTitle();
        boolean boolean46 = student19.borrowItem((team_001.Item) virtualBook41);
        client11.returnItem((team_001.Item) virtualBook41);
        int int48 = virtualBook41.getID();
        int int49 = student7.checkOverdue((team_001.Item) virtualBook41);
        java.lang.Object obj50 = virtualBook41.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "" + "'", str36.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "hi!" + "'", str45.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj50);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        faculty25.setId((int) (byte) -1);
        java.lang.String str32 = faculty25.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "hi!" + "'", str32.equals("hi!"));
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        team_001.Magazine magazine51 = new team_001.Magazine("", "hi!");
        student48.returnItem((team_001.Item) magazine51);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "", "hi!", strList58);
        team_001.Magazine magazine63 = new team_001.Magazine("", "hi!");
        student60.returnItem((team_001.Item) magazine63);
        java.lang.String str65 = student60.getEmail();
        student60.setPassword("");
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook70.ID = '4';
        int int73 = student60.checkOverdue((team_001.Item) virtualBook70);
        java.lang.String str74 = virtualBook70.getTitle();
        boolean boolean75 = student48.borrowItem((team_001.Item) virtualBook70);
        student10.returnItem((team_001.Item) virtualBook70);
        team_001.Newsletter newsletter79 = team_001.ItemFactory.createNewsLetter("", "hi!");
        student10.subscribe(newsletter79);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap81 = student10.borrowed;
        team_001.BorrowedIterator borrowedIterator82 = new team_001.BorrowedIterator(itemMap81);
        boolean boolean83 = borrowedIterator82.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "hi!" + "'", str74.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        java.lang.String str4 = userBuilder0.email;
        java.lang.String str5 = userBuilder0.email;
        team_001.UserBuilder userBuilder7 = userBuilder0.setUsername("");
        team_001.Library library8 = userBuilder7.lib;
        team_001.Client client9 = userBuilder7.buildVisitor();
        team_001.Client client10 = userBuilder7.buildFaculty();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client10);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap14 = student9.borrowed;
        team_001.BorrowedIterator borrowedIterator15 = new team_001.BorrowedIterator(itemMap14);
        java.util.ArrayList<team_001.Item> itemList16 = client1.checkItemsOverdue(borrowedIterator15);
        team_001.Magazine magazine19 = new team_001.Magazine("hi!", "");
        int int20 = client1.checkOverdue((team_001.Item) magazine19);
        team_001.CD cD23 = team_001.ItemFactory.createCD("", "hi!");
        boolean boolean24 = client1.borrowItem((team_001.Item) cD23);
        java.lang.String str25 = cD23.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "hi!" + "'", str25.equals("hi!"));
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        team_001.Magazine magazine2 = new team_001.Magazine("", "hi!");
        int int3 = magazine2.ID;
        int int4 = magazine2.getID();
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 13152 + "'", int3 == 13152);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 13152 + "'", int4 == 13152);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        team_001.NonFacultyStaff nonFacultyStaff3 = new team_001.NonFacultyStaff("", "", "hi!");
        java.lang.String str4 = nonFacultyStaff3.getUsername();
        nonFacultyStaff3.setId(47);
        team_001.VirtualBook virtualBook9 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        java.lang.Boolean boolean10 = nonFacultyStaff3.isBorrowed((team_001.Item) virtualBook9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "" + "'", str4.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10.equals(false));
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "");
        team_001.Newsletter newsletter6 = team_001.ItemFactory.createNewsLetter("", "");
        faculty3.subscribe(newsletter6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter6);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        java.lang.String str6 = userBuilder0.password;
        team_001.Client client7 = userBuilder0.buildNonFacultyStaff();
        java.lang.String str8 = client7.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        userBuilder15.password = "";
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        userBuilder15.lib = library39;
        team_001.LibraryFacade libraryFacade43 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        libraryFacade43.bookKeeping("hi!", strList47);
        team_001.LibraryFacade libraryFacade53 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        libraryFacade53.bookKeeping("hi!", strList57);
        libraryFacade43.bookKeeping("", strList57);
        team_001.Library library61 = libraryFacade43.getLibrary();
        team_001.Library library62 = libraryFacade43.getLibrary();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        team_001.Student student70 = new team_001.Student("", "", "hi!", strList68);
        student70.setEmail("hi!");
        student70.setEmail("hi!");
        team_001.PhysicalBook physicalBook77 = new team_001.PhysicalBook("", "hi!");
        boolean boolean78 = libraryFacade43.borrowItem((team_001.Client) student70, (team_001.Item) physicalBook77);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap79 = libraryFacade43.getInventory();
        team_001.Library library80 = libraryFacade43.getLibrary();
        userBuilder15.lib = library80;
        team_001.UserBuilder userBuilder83 = userBuilder15.setUsername("");
        team_001.Client client84 = userBuilder83.buildNonFacultyStaff();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client84);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap10 = libraryFacade2.getInventory();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        java.lang.String str19 = student18.getEmail();
        student18.setUsername("hi!");
        student18.setPassword("");
        team_001.VirtualBook virtualBook26 = new team_001.VirtualBook("hi!", "");
        int int27 = libraryFacade2.checkOverdue((team_001.Client) student18, (team_001.Item) virtualBook26);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap28 = libraryFacade2.getInventory();
        team_001.Faculty faculty33 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter36 = new team_001.Newsletter("hi!", "");
        faculty33.subscribe(newsletter36);
        java.util.ArrayList<java.lang.String> strList38 = faculty33.getCourses();
        java.util.ArrayList<java.lang.String> strList39 = faculty33.getCourses();
        libraryFacade2.bookKeeping("hi!", strList39);
        java.lang.Class<?> wildcardClass41 = strList39.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "" + "'", str19.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        team_001.VirtualBook virtualBook19 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook19.ID = '4';
        virtualBook19.ID = (short) 100;
        boolean boolean24 = visitor12.borrowItem((team_001.Item) virtualBook19);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        team_001.Student student32 = new team_001.Student("", "", "hi!", strList30);
        student32.setEmail("hi!");
        student32.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap37 = student32.borrowed;
        student32.setUsername("");
        team_001.Newsletter newsletter42 = new team_001.Newsletter("hi!", "hi!");
        student32.unsubscribe(newsletter42);
        java.lang.Object obj44 = newsletter42.clone();
        visitor12.returnItem((team_001.Item) newsletter42);
        newsletter42.ID = (byte) 1;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj44);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        team_001.VirtualBook virtualBook2 = new team_001.VirtualBook("hi!", "hi!");
        int int3 = virtualBook2.getID();
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 13328 + "'", int3 == 13328);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        java.lang.String str26 = userBuilder0.password;
        team_001.Client client27 = userBuilder0.buildStudent();
        team_001.Client client28 = userBuilder0.buildNonFacultyStaff();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap29 = client28.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap29);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        team_001.NonFacultyStaff nonFacultyStaff3 = new team_001.NonFacultyStaff("", "", "hi!");
        java.lang.String str4 = nonFacultyStaff3.getUsername();
        nonFacultyStaff3.setId(47);
        team_001.Magazine magazine9 = new team_001.Magazine("", "");
        nonFacultyStaff3.returnItem((team_001.Item) magazine9);
        int int11 = magazine9.ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "" + "'", str4.equals(""));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 13379 + "'", int11 == 13379);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap14 = student9.borrowed;
        team_001.BorrowedIterator borrowedIterator15 = new team_001.BorrowedIterator(itemMap14);
        java.util.ArrayList<team_001.Item> itemList16 = client1.checkItemsOverdue(borrowedIterator15);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int28 = student24.checkOverdue((team_001.Item) virtualBook27);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap29 = student24.borrowed;
        team_001.BorrowedIterator borrowedIterator30 = new team_001.BorrowedIterator(itemMap29);
        client1.setBorrowed(itemMap29);
        client1.setId(2371);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap29);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Client client27 = userBuilder26.buildStudent();
        java.lang.String str28 = userBuilder26.email;
        java.lang.String str29 = userBuilder26.email;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        team_001.Client client18 = userBuilder17.buildVisitor();
        team_001.Client client19 = userBuilder17.buildNonFacultyStaff();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        team_001.Student student27 = new team_001.Student("", "", "hi!", strList25);
        team_001.Magazine magazine30 = new team_001.Magazine("", "hi!");
        student27.returnItem((team_001.Item) magazine30);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        team_001.Magazine magazine42 = new team_001.Magazine("", "hi!");
        student39.returnItem((team_001.Item) magazine42);
        java.lang.String str44 = student39.getEmail();
        student39.setPassword("");
        team_001.VirtualBook virtualBook49 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook49.ID = '4';
        int int52 = student39.checkOverdue((team_001.Item) virtualBook49);
        java.lang.String str53 = virtualBook49.getTitle();
        boolean boolean54 = student27.borrowItem((team_001.Item) virtualBook49);
        client19.returnItem((team_001.Item) virtualBook49);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        team_001.Student student63 = new team_001.Student("", "", "hi!", strList61);
        team_001.VirtualBook virtualBook66 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int67 = student63.checkOverdue((team_001.Item) virtualBook66);
        boolean boolean68 = libraryFacade2.borrowItem(client19, (team_001.Item) virtualBook66);
        team_001.Faculty faculty72 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter75 = new team_001.Newsletter("hi!", "");
        faculty72.subscribe(newsletter75);
        java.util.ArrayList<java.lang.String> strList77 = faculty72.getCourses();
        java.util.ArrayList<java.lang.String> strList78 = faculty72.getCourses();
        team_001.Item item79 = null;
        int int80 = libraryFacade2.checkOverdue((team_001.Client) faculty72, item79);
        team_001.Faculty faculty88 = new team_001.Faculty("hi!", "hi!", "");
        java.util.ArrayList<java.lang.String> strList89 = faculty88.getCourses();
        team_001.Student student90 = new team_001.Student("hi!", "", "hi!", strList89);
        libraryFacade2.bookKeeping("", strList89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "" + "'", str44.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "hi!" + "'", str53.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList89);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        team_001.Client client18 = userBuilder17.buildVisitor();
        team_001.Client client19 = userBuilder17.buildNonFacultyStaff();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        team_001.Student student27 = new team_001.Student("", "", "hi!", strList25);
        team_001.Magazine magazine30 = new team_001.Magazine("", "hi!");
        student27.returnItem((team_001.Item) magazine30);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        team_001.Magazine magazine42 = new team_001.Magazine("", "hi!");
        student39.returnItem((team_001.Item) magazine42);
        java.lang.String str44 = student39.getEmail();
        student39.setPassword("");
        team_001.VirtualBook virtualBook49 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook49.ID = '4';
        int int52 = student39.checkOverdue((team_001.Item) virtualBook49);
        java.lang.String str53 = virtualBook49.getTitle();
        boolean boolean54 = student27.borrowItem((team_001.Item) virtualBook49);
        client19.returnItem((team_001.Item) virtualBook49);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        team_001.Student student63 = new team_001.Student("", "", "hi!", strList61);
        team_001.VirtualBook virtualBook66 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int67 = student63.checkOverdue((team_001.Item) virtualBook66);
        boolean boolean68 = libraryFacade2.borrowItem(client19, (team_001.Item) virtualBook66);
        team_001.Library library69 = libraryFacade2.getLibrary();
        team_001.Client client70 = null;
        team_001.VirtualBook virtualBook73 = team_001.ItemFactory.createVirtualBook("hi!", "");
        java.lang.String str74 = virtualBook73.getAuthor();
        int int75 = virtualBook73.ID;
        java.lang.Object obj76 = virtualBook73.clone();
        libraryFacade2.returnItem(client70, (team_001.Item) virtualBook73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "" + "'", str44.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "hi!" + "'", str53.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "" + "'", str74.equals(""));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 13508 + "'", int75 == 13508);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj76);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "");
        team_001.Library library3 = libraryFacade2.getLibrary();
        team_001.Faculty faculty8 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter11 = new team_001.Newsletter("hi!", "");
        faculty8.subscribe(newsletter11);
        java.util.ArrayList<java.lang.String> strList13 = faculty8.getCourses();
        java.util.ArrayList<java.lang.String> strList14 = faculty8.getCourses();
        faculty8.setPassword("");
        java.util.ArrayList<java.lang.String> strList17 = faculty8.getCourses();
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("hi!", strList17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        team_001.Magazine magazine2 = new team_001.Magazine("hi!", "");
        int int3 = magazine2.getID();
        magazine2.ID = 3957;
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 13515 + "'", int3 == 13515);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        team_001.Client client9 = userManagement1.writeUser("hi!", "", "", "hi!");
        java.lang.String str11 = userManagement1.getType("hi!");
        java.lang.String str13 = userManagement1.getType("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        java.lang.String str26 = client25.getEmail();
        client25.setId(1402);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        team_001.Magazine magazine22 = new team_001.Magazine("", "hi!");
        student19.returnItem((team_001.Item) magazine22);
        java.lang.String str24 = student19.getEmail();
        student19.setPassword("");
        team_001.VirtualBook virtualBook29 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook29.ID = '4';
        int int32 = student19.checkOverdue((team_001.Item) virtualBook29);
        java.lang.String str33 = virtualBook29.getTitle();
        boolean boolean34 = student7.borrowItem((team_001.Item) virtualBook29);
        team_001.UserBuilder userBuilder35 = new team_001.UserBuilder();
        team_001.Client client36 = userBuilder35.buildVisitor();
        team_001.Library library37 = null;
        team_001.UserBuilder userBuilder38 = userBuilder35.setLibrary(library37);
        java.lang.String str39 = userBuilder35.email;
        team_001.Client client40 = userBuilder35.buildFaculty();
        team_001.Client client41 = userBuilder35.buildVisitor();
        team_001.LibraryFacade libraryFacade44 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        libraryFacade44.bookKeeping("hi!", strList48);
        team_001.LibraryFacade libraryFacade54 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        libraryFacade54.bookKeeping("hi!", strList58);
        libraryFacade44.bookKeeping("", strList58);
        team_001.Library library62 = libraryFacade44.getLibrary();
        team_001.Library library63 = libraryFacade44.getLibrary();
        team_001.Faculty faculty67 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean71 = libraryFacade44.borrowItem((team_001.Client) faculty67, (team_001.Item) virtualBook70);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        team_001.Student student79 = new team_001.Student("", "", "hi!", strList77);
        student79.setEmail("hi!");
        student79.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap84 = student79.borrowed;
        student79.setUsername("");
        team_001.Newsletter newsletter89 = new team_001.Newsletter("hi!", "hi!");
        student79.unsubscribe(newsletter89);
        java.lang.Object obj91 = newsletter89.clone();
        faculty67.unsubscribe(newsletter89);
        boolean boolean93 = client41.borrowItem((team_001.Item) newsletter89);
        student7.returnItem((team_001.Item) newsletter89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "hi!" + "'", str33.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        java.lang.String str5 = userBuilder0.email;
        userBuilder0.password = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap14 = student9.borrowed;
        team_001.BorrowedIterator borrowedIterator15 = new team_001.BorrowedIterator(itemMap14);
        java.util.ArrayList<team_001.Item> itemList16 = client1.checkItemsOverdue(borrowedIterator15);
        team_001.Magazine magazine19 = new team_001.Magazine("hi!", "");
        int int20 = client1.checkOverdue((team_001.Item) magazine19);
        int int21 = client1.getId();
        client1.setPassword("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 396 + "'", int21 == 396);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        team_001.Faculty faculty45 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter48 = new team_001.Newsletter("hi!", "");
        faculty45.subscribe(newsletter48);
        java.util.ArrayList<java.lang.String> strList50 = faculty45.getCourses();
        libraryFacade2.bookKeeping("", strList50);
        team_001.Library library52 = libraryFacade2.getLibrary();
        team_001.Faculty faculty60 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter63 = new team_001.Newsletter("hi!", "");
        faculty60.subscribe(newsletter63);
        java.util.ArrayList<java.lang.String> strList65 = faculty60.getCourses();
        java.util.ArrayList<java.lang.String> strList66 = faculty60.getCourses();
        team_001.Student student67 = new team_001.Student("", "hi!", "hi!", strList66);
        libraryFacade2.bookKeeping("", strList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList66);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap2 = client1.getSubcribed();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap11 = student10.getSubcribed();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        student19.setEmail("hi!");
        team_001.Magazine magazine24 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean25 = student19.isBorrowed((team_001.Item) magazine24);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        team_001.Student student33 = new team_001.Student("", "", "hi!", strList31);
        team_001.VirtualBook virtualBook36 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int37 = student33.checkOverdue((team_001.Item) virtualBook36);
        java.lang.Boolean boolean38 = student19.isBorrowed((team_001.Item) virtualBook36);
        java.lang.String str39 = virtualBook36.getTitle();
        student10.returnItem((team_001.Item) virtualBook36);
        virtualBook36.ID = 10;
        java.lang.Boolean boolean43 = client1.isBorrowed((team_001.Item) virtualBook36);
        java.lang.String str44 = client1.getUsername();
        team_001.LibraryFacade libraryFacade47 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        team_001.Student student55 = new team_001.Student("", "", "hi!", strList53);
        team_001.Magazine magazine58 = new team_001.Magazine("", "hi!");
        student55.returnItem((team_001.Item) magazine58);
        java.lang.String str60 = student55.getEmail();
        team_001.CD cD63 = new team_001.CD("", "");
        boolean boolean64 = libraryFacade47.borrowItem((team_001.Client) student55, (team_001.Item) cD63);
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        team_001.Student student72 = new team_001.Student("", "", "hi!", strList70);
        student72.setEmail("hi!");
        team_001.Magazine magazine77 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean78 = student72.isBorrowed((team_001.Item) magazine77);
        boolean boolean79 = student55.borrowItem((team_001.Item) magazine77);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap80 = student55.borrowed;
        team_001.BorrowedIterator borrowedIterator81 = new team_001.BorrowedIterator(itemMap80);
        client1.borrowed = itemMap80;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str60 + "' != '" + "" + "'", str60.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap80);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        team_001.VirtualBook virtualBook14 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int15 = student11.checkOverdue((team_001.Item) virtualBook14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        team_001.Student student23 = new team_001.Student("", "", "hi!", strList21);
        team_001.VirtualBook virtualBook26 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int27 = student23.checkOverdue((team_001.Item) virtualBook26);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap28 = student23.borrowed;
        team_001.BorrowedIterator borrowedIterator29 = new team_001.BorrowedIterator(itemMap28);
        student11.borrowed = itemMap28;
        faculty3.borrowed = itemMap28;
        java.util.ArrayList<java.lang.String> strList32 = faculty3.getCourses();
        faculty3.setPassword("hi!");
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap35 = faculty3.getSubcribed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap35);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        int int12 = student7.getId();
        java.lang.String str13 = student7.getUsername();
        team_001.Magazine magazine16 = new team_001.Magazine("", "hi!");
        magazine16.ID = 6821;
        java.lang.Boolean boolean19 = student7.isBorrowed((team_001.Item) magazine16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 422 + "'", int12 == 422);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19.equals(false));
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        student7.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = student7.borrowed;
        team_001.BorrowedIterator borrowedIterator13 = new team_001.BorrowedIterator(itemMap12);
        boolean boolean14 = borrowedIterator13.hasNext();
        java.lang.Class<?> wildcardClass15 = borrowedIterator13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        team_001.Newsletter newsletter2 = team_001.ItemFactory.createNewsLetter("hi!", "");
        java.lang.Object obj3 = newsletter2.clone();
        java.lang.Object obj4 = newsletter2.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj4);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Client client27 = userBuilder26.buildStudent();
        client27.setPassword("");
        java.lang.String str30 = client27.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder24.buildNonFacultyStaff();
        team_001.LibraryFacade libraryFacade28 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        libraryFacade28.bookKeeping("hi!", strList32);
        team_001.LibraryFacade libraryFacade38 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        libraryFacade38.bookKeeping("hi!", strList42);
        libraryFacade28.bookKeeping("", strList42);
        team_001.Library library46 = libraryFacade28.getLibrary();
        team_001.Library library47 = libraryFacade28.getLibrary();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        team_001.Student student55 = new team_001.Student("", "", "hi!", strList53);
        student55.setEmail("hi!");
        student55.setEmail("hi!");
        team_001.PhysicalBook physicalBook62 = new team_001.PhysicalBook("", "hi!");
        boolean boolean63 = libraryFacade28.borrowItem((team_001.Client) student55, (team_001.Item) physicalBook62);
        team_001.Library library64 = libraryFacade28.getLibrary();
        team_001.UserBuilder userBuilder65 = userBuilder24.setLibrary(library64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder65);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        team_001.PhysicalBook physicalBook2 = new team_001.PhysicalBook("hi!", "");
        java.lang.Object obj3 = physicalBook2.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj3);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        team_001.visitor visitor3 = new team_001.visitor("hi!", "", "");
        java.lang.String str4 = visitor3.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "" + "'", str4.equals(""));
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        team_001.Student student15 = new team_001.Student("", "", "hi!", strList13);
        team_001.Magazine magazine18 = new team_001.Magazine("", "hi!");
        student15.returnItem((team_001.Item) magazine18);
        java.lang.String str20 = student15.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap21 = null;
        student15.borrowed = itemMap21;
        java.lang.String str23 = student15.getPassword();
        team_001.visitor visitor27 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter30 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str31 = newsletter30.getTitle();
        visitor27.subscribe(newsletter30);
        student15.subscribe(newsletter30);
        student7.subscribe(newsletter30);
        java.lang.String str35 = newsletter30.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "" + "'", str20.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "hi!" + "'", str23.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "" + "'", str31.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "hi!" + "'", str35.equals("hi!"));
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        team_001.VirtualBook virtualBook14 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int15 = student11.checkOverdue((team_001.Item) virtualBook14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        team_001.Student student23 = new team_001.Student("", "", "hi!", strList21);
        team_001.VirtualBook virtualBook26 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int27 = student23.checkOverdue((team_001.Item) virtualBook26);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap28 = student23.borrowed;
        team_001.BorrowedIterator borrowedIterator29 = new team_001.BorrowedIterator(itemMap28);
        student11.borrowed = itemMap28;
        faculty3.borrowed = itemMap28;
        java.util.ArrayList<java.lang.String> strList32 = faculty3.getCourses();
        team_001.LibraryFacade libraryFacade35 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        libraryFacade35.bookKeeping("hi!", strList39);
        team_001.LibraryFacade libraryFacade45 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        libraryFacade45.bookKeeping("hi!", strList49);
        libraryFacade35.bookKeeping("", strList49);
        team_001.Library library53 = libraryFacade35.getLibrary();
        team_001.Library library54 = libraryFacade35.getLibrary();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        team_001.Student student62 = new team_001.Student("", "", "hi!", strList60);
        student62.setEmail("hi!");
        student62.setEmail("hi!");
        team_001.PhysicalBook physicalBook69 = new team_001.PhysicalBook("", "hi!");
        boolean boolean70 = libraryFacade35.borrowItem((team_001.Client) student62, (team_001.Item) physicalBook69);
        java.lang.Object obj71 = physicalBook69.clone();
        boolean boolean72 = faculty3.borrowItem((team_001.Item) physicalBook69);
        faculty3.setEmail("");
        java.util.ArrayList<java.lang.String> strList75 = faculty3.getCourses();
        team_001.Newsletter newsletter76 = null;
        faculty3.unsubscribe(newsletter76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList75);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        team_001.Faculty faculty6 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter9 = new team_001.Newsletter("hi!", "");
        faculty6.subscribe(newsletter9);
        team_001.PhysicalBook physicalBook13 = new team_001.PhysicalBook("", "");
        faculty6.returnItem((team_001.Item) physicalBook13);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap15 = null;
        faculty6.setBorrowed(itemMap15);
        java.util.ArrayList<java.lang.String> strList17 = faculty6.getCourses();
        team_001.Student student18 = new team_001.Student("", "hi!", "hi!", strList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        team_001.Client.current_id = ' ';
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        team_001.Faculty faculty6 = new team_001.Faculty("hi!", "hi!", "");
        java.util.ArrayList<java.lang.String> strList7 = faculty6.getCourses();
        team_001.Student student8 = new team_001.Student("hi!", "", "hi!", strList7);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        team_001.Student student16 = new team_001.Student("", "", "hi!", strList14);
        team_001.VirtualBook virtualBook19 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int20 = student16.checkOverdue((team_001.Item) virtualBook19);
        int int21 = student16.getId();
        student16.setUsername("");
        team_001.LibraryFacade libraryFacade26 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        team_001.Student student34 = new team_001.Student("", "", "hi!", strList32);
        team_001.Magazine magazine37 = new team_001.Magazine("", "hi!");
        student34.returnItem((team_001.Item) magazine37);
        java.lang.String str39 = student34.getEmail();
        team_001.CD cD42 = new team_001.CD("", "");
        boolean boolean43 = libraryFacade26.borrowItem((team_001.Client) student34, (team_001.Item) cD42);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        team_001.Student student51 = new team_001.Student("", "", "hi!", strList49);
        student51.setEmail("hi!");
        team_001.Magazine magazine56 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean57 = student51.isBorrowed((team_001.Item) magazine56);
        boolean boolean58 = student34.borrowItem((team_001.Item) magazine56);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        team_001.Student student66 = new team_001.Student("", "", "hi!", strList64);
        team_001.VirtualBook virtualBook69 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int70 = student66.checkOverdue((team_001.Item) virtualBook69);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap71 = student66.borrowed;
        team_001.BorrowedIterator borrowedIterator72 = new team_001.BorrowedIterator(itemMap71);
        student34.borrowed = itemMap71;
        student16.borrowed = itemMap71;
        student8.borrowed = itemMap71;
        team_001.BorrowedIterator borrowedIterator76 = new team_001.BorrowedIterator(itemMap71);
        boolean boolean77 = borrowedIterator76.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "" + "'", str39.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.Library library25 = userBuilder23.lib;
        java.lang.String str26 = userBuilder23.email;
        userBuilder23.email = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        java.lang.String str6 = userBuilder0.password;
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        team_001.Client client8 = userBuilder7.buildVisitor();
        java.lang.String str9 = userBuilder7.password;
        userBuilder7.password = "hi!";
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        team_001.Library library21 = libraryFacade14.getLibrary();
        team_001.UserBuilder userBuilder22 = userBuilder7.setLibrary(library21);
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library21);
        team_001.Library library24 = userBuilder23.lib;
        team_001.Library library25 = userBuilder23.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.Library library23 = libraryFacade4.getLibrary();
        team_001.Faculty faculty27 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook30 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean31 = libraryFacade4.borrowItem((team_001.Client) faculty27, (team_001.Item) virtualBook30);
        faculty27.setId((int) (byte) -1);
        java.lang.String str34 = faculty27.getPassword();
        team_001.Newsletter newsletter37 = new team_001.Newsletter("hi!", "hi!");
        faculty27.unsubscribe(newsletter37);
        client1.unsubscribe(newsletter37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "" + "'", str34.equals(""));
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        team_001.Magazine magazine51 = new team_001.Magazine("", "hi!");
        student48.returnItem((team_001.Item) magazine51);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "", "hi!", strList58);
        team_001.Magazine magazine63 = new team_001.Magazine("", "hi!");
        student60.returnItem((team_001.Item) magazine63);
        java.lang.String str65 = student60.getEmail();
        student60.setPassword("");
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook70.ID = '4';
        int int73 = student60.checkOverdue((team_001.Item) virtualBook70);
        java.lang.String str74 = virtualBook70.getTitle();
        boolean boolean75 = student48.borrowItem((team_001.Item) virtualBook70);
        student10.returnItem((team_001.Item) virtualBook70);
        java.lang.Object obj77 = virtualBook70.clone();
        java.lang.String str78 = virtualBook70.getTitle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "hi!" + "'", str74.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "hi!" + "'", str78.equals("hi!"));
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Client client27 = userBuilder23.buildNonFacultyStaff();
        team_001.Client client28 = userBuilder23.buildNonFacultyStaff();
        client28.setEmail("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildVisitor();
        java.lang.String str7 = client6.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        java.lang.String str6 = userManagement1.getType("");
        team_001.Client client11 = userManagement1.writeUser("hi!", "", "hi!", "");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client11);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder25 = userBuilder23.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        team_001.Client.current_id = 6909;
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        team_001.Newsletter newsletter2 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str3 = newsletter2.getTitle();
        java.lang.String str4 = newsletter2.getAuthor();
        java.lang.String str5 = newsletter2.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        team_001.Client.current_id = 6091;
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.UserBuilder userBuilder30 = userBuilder23.setUsername("");
        team_001.UserBuilder userBuilder32 = userBuilder23.setUsername("");
        userBuilder23.password = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder32);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        student7.setPassword("");
        team_001.VirtualBook virtualBook17 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook17.ID = '4';
        int int20 = student7.checkOverdue((team_001.Item) virtualBook17);
        int int21 = virtualBook17.getID();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        java.lang.String str4 = userBuilder0.email;
        team_001.UserBuilder userBuilder6 = userBuilder0.setPassword("hi!");
        java.lang.String str7 = userBuilder0.password;
        team_001.UserBuilder userBuilder8 = new team_001.UserBuilder();
        team_001.Client client9 = userBuilder8.buildVisitor();
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        team_001.LibraryFacade libraryFacade22 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        libraryFacade22.bookKeeping("hi!", strList26);
        libraryFacade12.bookKeeping("", strList26);
        team_001.Library library30 = libraryFacade12.getLibrary();
        team_001.UserBuilder userBuilder31 = userBuilder8.setLibrary(library30);
        team_001.Client client32 = userBuilder31.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder34 = userBuilder31.setUsername("hi!");
        team_001.UserBuilder userBuilder36 = userBuilder34.setUsername("");
        team_001.LibraryFacade libraryFacade39 = new team_001.LibraryFacade("", "");
        team_001.Library library40 = libraryFacade39.getLibrary();
        team_001.UserBuilder userBuilder41 = userBuilder34.setLibrary(library40);
        team_001.Library library42 = userBuilder34.lib;
        team_001.UserBuilder userBuilder43 = userBuilder0.setLibrary(library42);
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder45 = userBuilder0.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder43);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        team_001.Client client3 = userBuilder0.buildVisitor();
        java.lang.String str4 = userBuilder0.email;
        team_001.UserBuilder userBuilder6 = userBuilder0.setUsername("hi!");
        team_001.Client client7 = userBuilder6.buildFaculty();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client7);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setPassword("");
        java.lang.String str10 = student7.getUsername();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        java.lang.String str13 = student7.getPassword();
        java.lang.String str14 = student7.getUsername();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!" + "'", str13.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.Library library24 = libraryFacade5.getLibrary();
        team_001.Faculty faculty28 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook31 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean32 = libraryFacade5.borrowItem((team_001.Client) faculty28, (team_001.Item) virtualBook31);
        java.util.ArrayList<java.lang.String> strList33 = faculty28.getCourses();
        team_001.Student student34 = new team_001.Student("hi!", "hi!", "hi!", strList33);
        team_001.UserBuilder userBuilder35 = new team_001.UserBuilder();
        team_001.Client client36 = userBuilder35.buildVisitor();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        team_001.Student student44 = new team_001.Student("", "", "hi!", strList42);
        team_001.VirtualBook virtualBook47 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int48 = student44.checkOverdue((team_001.Item) virtualBook47);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap49 = student44.borrowed;
        team_001.BorrowedIterator borrowedIterator50 = new team_001.BorrowedIterator(itemMap49);
        java.util.ArrayList<team_001.Item> itemList51 = client36.checkItemsOverdue(borrowedIterator50);
        boolean boolean52 = borrowedIterator50.hasNext();
        java.util.ArrayList<team_001.Item> itemList53 = student34.checkItemsOverdue(borrowedIterator50);
        boolean boolean54 = borrowedIterator50.hasNext();
        boolean boolean55 = borrowedIterator50.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder24.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder27 = userBuilder24.setUsername("");
        userBuilder24.email = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder27);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.LibraryFacade libraryFacade6 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        libraryFacade6.bookKeeping("hi!", strList10);
        team_001.LibraryFacade libraryFacade16 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        libraryFacade16.bookKeeping("hi!", strList20);
        libraryFacade6.bookKeeping("", strList20);
        team_001.Library library24 = libraryFacade6.getLibrary();
        team_001.UserBuilder userBuilder25 = userBuilder0.setLibrary(library24);
        java.lang.String str26 = userBuilder0.password;
        team_001.UserBuilder userBuilder28 = userBuilder0.setUsername("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder28);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        java.lang.String str6 = userBuilder0.password;
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        team_001.Client client8 = userBuilder7.buildVisitor();
        java.lang.String str9 = userBuilder7.password;
        userBuilder7.password = "hi!";
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        team_001.Library library21 = libraryFacade14.getLibrary();
        team_001.UserBuilder userBuilder22 = userBuilder7.setLibrary(library21);
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library21);
        userBuilder0.password = "hi!";
        team_001.UserBuilder userBuilder26 = new team_001.UserBuilder();
        userBuilder26.email = "hi!";
        team_001.Library library29 = userBuilder26.lib;
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        libraryFacade42.bookKeeping("hi!", strList46);
        libraryFacade32.bookKeeping("", strList46);
        team_001.Library library50 = libraryFacade32.getLibrary();
        team_001.UserBuilder userBuilder51 = userBuilder26.setLibrary(library50);
        team_001.UserBuilder userBuilder52 = new team_001.UserBuilder();
        userBuilder52.email = "hi!";
        team_001.Library library55 = userBuilder52.lib;
        team_001.LibraryFacade libraryFacade58 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        libraryFacade58.bookKeeping("hi!", strList62);
        team_001.LibraryFacade libraryFacade68 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        libraryFacade68.bookKeeping("hi!", strList72);
        libraryFacade58.bookKeeping("", strList72);
        team_001.Library library76 = libraryFacade58.getLibrary();
        team_001.UserBuilder userBuilder77 = userBuilder52.setLibrary(library76);
        team_001.UserBuilder userBuilder78 = userBuilder51.setLibrary(library76);
        team_001.UserBuilder userBuilder79 = new team_001.UserBuilder();
        userBuilder79.email = "hi!";
        team_001.LibraryFacade libraryFacade84 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.Library library85 = libraryFacade84.getLibrary();
        team_001.UserBuilder userBuilder86 = userBuilder79.setLibrary(library85);
        userBuilder51.lib = library85;
        team_001.UserBuilder userBuilder88 = userBuilder0.setLibrary(library85);
        team_001.Client client89 = userBuilder88.buildStudent();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client89);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap8 = student7.getSubcribed();
        student7.setUsername("hi!");
        java.lang.String str11 = student7.getPassword();
        team_001.VirtualBook virtualBook14 = new team_001.VirtualBook("", "hi!");
        student7.returnItem((team_001.Item) virtualBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!" + "'", str11.equals("hi!"));
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        team_001.Faculty faculty6 = new team_001.Faculty("", "hi!", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        team_001.Student student14 = new team_001.Student("", "", "hi!", strList12);
        team_001.VirtualBook virtualBook17 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int18 = student14.checkOverdue((team_001.Item) virtualBook17);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        team_001.Student student26 = new team_001.Student("", "", "hi!", strList24);
        team_001.VirtualBook virtualBook29 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int30 = student26.checkOverdue((team_001.Item) virtualBook29);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap31 = student26.borrowed;
        team_001.BorrowedIterator borrowedIterator32 = new team_001.BorrowedIterator(itemMap31);
        student14.borrowed = itemMap31;
        faculty6.borrowed = itemMap31;
        java.util.ArrayList<java.lang.String> strList35 = faculty6.getCourses();
        team_001.Student student36 = new team_001.Student("", "hi!", "hi!", strList35);
        java.lang.String str37 = student36.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "hi!" + "'", str37.equals("hi!"));
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        java.lang.String str27 = userBuilder26.email;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        team_001.Student student13 = new team_001.Student("", "", "hi!", strList11);
        team_001.Magazine magazine16 = new team_001.Magazine("", "hi!");
        student13.returnItem((team_001.Item) magazine16);
        java.lang.String str18 = student13.getEmail();
        team_001.CD cD21 = new team_001.CD("", "");
        boolean boolean22 = libraryFacade5.borrowItem((team_001.Client) student13, (team_001.Item) cD21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        team_001.Student student30 = new team_001.Student("", "", "hi!", strList28);
        student30.setEmail("hi!");
        team_001.Magazine magazine35 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean36 = student30.isBorrowed((team_001.Item) magazine35);
        boolean boolean37 = student13.borrowItem((team_001.Item) magazine35);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        team_001.Student student45 = new team_001.Student("", "", "hi!", strList43);
        team_001.Magazine magazine48 = new team_001.Magazine("", "hi!");
        student45.returnItem((team_001.Item) magazine48);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        team_001.Student student57 = new team_001.Student("", "", "hi!", strList55);
        team_001.Magazine magazine60 = new team_001.Magazine("", "hi!");
        student57.returnItem((team_001.Item) magazine60);
        java.lang.String str62 = student57.getEmail();
        student57.setPassword("");
        team_001.VirtualBook virtualBook67 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook67.ID = '4';
        int int70 = student57.checkOverdue((team_001.Item) virtualBook67);
        java.lang.String str71 = virtualBook67.getTitle();
        boolean boolean72 = student45.borrowItem((team_001.Item) virtualBook67);
        team_001.Newsletter newsletter75 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean76 = student45.borrowItem((team_001.Item) newsletter75);
        int int77 = newsletter75.ID;
        int int78 = libraryFacade2.checkOverdue((team_001.Client) student13, (team_001.Item) newsletter75);
        team_001.Library library79 = libraryFacade2.getLibrary();
        team_001.Faculty faculty84 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter87 = new team_001.Newsletter("hi!", "");
        faculty84.subscribe(newsletter87);
        team_001.PhysicalBook physicalBook91 = new team_001.PhysicalBook("", "");
        faculty84.returnItem((team_001.Item) physicalBook91);
        java.util.ArrayList<java.lang.String> strList93 = faculty84.getCourses();
        java.util.ArrayList<java.lang.String> strList94 = faculty84.getCourses();
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("hi!", strList94);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "" + "'", str18.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "" + "'", str62.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str71 + "' != '" + "hi!" + "'", str71.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 14545 + "'", int77 == 14545);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList94);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        userBuilder17.email = "hi!";
        team_001.Library library20 = userBuilder17.lib;
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Library library41 = libraryFacade23.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder17.setLibrary(library41);
        userBuilder0.lib = library41;
        team_001.Client client44 = userBuilder0.buildFaculty();
        team_001.NonFacultyStaff nonFacultyStaff48 = new team_001.NonFacultyStaff("", "", "hi!");
        team_001.UserBuilder userBuilder49 = new team_001.UserBuilder();
        team_001.Client client50 = userBuilder49.buildVisitor();
        team_001.Client client51 = userBuilder49.buildNonFacultyStaff();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        team_001.Student student59 = new team_001.Student("", "", "hi!", strList57);
        team_001.Magazine magazine62 = new team_001.Magazine("", "hi!");
        student59.returnItem((team_001.Item) magazine62);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        team_001.Student student71 = new team_001.Student("", "", "hi!", strList69);
        team_001.Magazine magazine74 = new team_001.Magazine("", "hi!");
        student71.returnItem((team_001.Item) magazine74);
        java.lang.String str76 = student71.getEmail();
        student71.setPassword("");
        team_001.VirtualBook virtualBook81 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook81.ID = '4';
        int int84 = student71.checkOverdue((team_001.Item) virtualBook81);
        java.lang.String str85 = virtualBook81.getTitle();
        boolean boolean86 = student59.borrowItem((team_001.Item) virtualBook81);
        client51.returnItem((team_001.Item) virtualBook81);
        int int88 = virtualBook81.getID();
        nonFacultyStaff48.returnItem((team_001.Item) virtualBook81);
        boolean boolean90 = client44.borrowItem((team_001.Item) virtualBook81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "" + "'", str76.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str85 + "' != '" + "hi!" + "'", str85.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.Client client5 = userBuilder0.buildVisitor();
        team_001.Client client6 = userBuilder0.buildNonFacultyStaff();
        team_001.Library library7 = userBuilder0.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library7);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        team_001.Magazine magazine43 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean44 = student10.borrowItem((team_001.Item) magazine43);
        team_001.Newsletter newsletter47 = new team_001.Newsletter("hi!", "");
        student10.unsubscribe(newsletter47);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap49 = student10.borrowed;
        team_001.BorrowedIterator borrowedIterator50 = new team_001.BorrowedIterator(itemMap49);
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator50.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap49);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        visitor12.setPassword("hi!");
        java.lang.String str19 = visitor12.getEmail();
        team_001.CD cD22 = new team_001.CD("hi!", "");
        java.lang.Boolean boolean23 = visitor12.isBorrowed((team_001.Item) cD22);
        java.lang.String str24 = visitor12.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "hi!" + "'", str19.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "hi!" + "'", str24.equals("hi!"));
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap25 = client24.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap25);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap2 = client1.getSubcribed();
        client1.setUsername("");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        team_001.Student student12 = new team_001.Student("", "", "hi!", strList10);
        team_001.Magazine magazine15 = new team_001.Magazine("", "hi!");
        student12.returnItem((team_001.Item) magazine15);
        java.lang.String str17 = student12.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap18 = null;
        student12.borrowed = itemMap18;
        java.lang.String str20 = student12.getEmail();
        team_001.Magazine magazine23 = team_001.ItemFactory.createMagazine("", "hi!");
        boolean boolean24 = student12.borrowItem((team_001.Item) magazine23);
        client1.returnItem((team_001.Item) magazine23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "" + "'", str17.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "" + "'", str20.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        faculty25.setId((int) (byte) -1);
        java.lang.String str32 = faculty25.getPassword();
        team_001.Newsletter newsletter35 = new team_001.Newsletter("hi!", "hi!");
        faculty25.unsubscribe(newsletter35);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        team_001.Student student44 = new team_001.Student("", "", "hi!", strList42);
        student44.setEmail("hi!");
        student44.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap49 = student44.borrowed;
        team_001.UserBuilder userBuilder50 = new team_001.UserBuilder();
        team_001.Client client51 = userBuilder50.buildVisitor();
        team_001.LibraryFacade libraryFacade54 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        libraryFacade54.bookKeeping("hi!", strList58);
        team_001.LibraryFacade libraryFacade64 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        libraryFacade64.bookKeeping("hi!", strList68);
        libraryFacade54.bookKeeping("", strList68);
        team_001.Library library72 = libraryFacade54.getLibrary();
        team_001.UserBuilder userBuilder73 = userBuilder50.setLibrary(library72);
        team_001.Client client74 = userBuilder73.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder76 = userBuilder73.setPassword("hi!");
        team_001.Library library77 = userBuilder73.lib;
        team_001.Client client78 = userBuilder73.buildStudent();
        team_001.Newsletter newsletter81 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str82 = newsletter81.getTitle();
        java.lang.String str83 = newsletter81.getAuthor();
        client78.unsubscribe(newsletter81);
        int int85 = student44.checkOverdue((team_001.Item) newsletter81);
        int int86 = faculty25.checkOverdue((team_001.Item) newsletter81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "" + "'", str32.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str82 + "' != '" + "" + "'", str82.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str83 + "' != '" + "hi!" + "'", str83.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        team_001.Student student13 = new team_001.Student("", "", "hi!", strList11);
        team_001.Magazine magazine16 = new team_001.Magazine("", "hi!");
        student13.returnItem((team_001.Item) magazine16);
        java.lang.String str18 = student13.getEmail();
        student13.setPassword("");
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        team_001.Student student28 = new team_001.Student("", "", "hi!", strList26);
        team_001.Magazine magazine31 = new team_001.Magazine("", "hi!");
        student28.returnItem((team_001.Item) magazine31);
        java.lang.String str33 = student28.getEmail();
        student28.setPassword("");
        team_001.VirtualBook virtualBook38 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook38.ID = '4';
        int int41 = student28.checkOverdue((team_001.Item) virtualBook38);
        java.lang.String str42 = virtualBook38.getTitle();
        int int43 = libraryFacade5.checkOverdue((team_001.Client) student13, (team_001.Item) virtualBook38);
        team_001.Faculty faculty48 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter51 = new team_001.Newsletter("hi!", "");
        faculty48.subscribe(newsletter51);
        java.util.ArrayList<java.lang.String> strList53 = faculty48.getCourses();
        libraryFacade5.bookKeeping("", strList53);
        team_001.Student student55 = new team_001.Student("", "hi!", "", strList53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "" + "'", str18.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "" + "'", str33.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "hi!" + "'", str42.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList53);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap14 = student9.borrowed;
        team_001.BorrowedIterator borrowedIterator15 = new team_001.BorrowedIterator(itemMap14);
        java.util.ArrayList<team_001.Item> itemList16 = client1.checkItemsOverdue(borrowedIterator15);
        client1.setId(833);
        client1.setPassword("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList16);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        team_001.Magazine magazine22 = new team_001.Magazine("", "hi!");
        student19.returnItem((team_001.Item) magazine22);
        java.lang.String str24 = student19.getEmail();
        student19.setPassword("");
        team_001.VirtualBook virtualBook29 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook29.ID = '4';
        int int32 = student19.checkOverdue((team_001.Item) virtualBook29);
        java.lang.String str33 = virtualBook29.getTitle();
        boolean boolean34 = student7.borrowItem((team_001.Item) virtualBook29);
        team_001.Newsletter newsletter37 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean38 = student7.borrowItem((team_001.Item) newsletter37);
        team_001.UserBuilder userBuilder39 = new team_001.UserBuilder();
        team_001.Client client40 = userBuilder39.buildVisitor();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        team_001.VirtualBook virtualBook51 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int52 = student48.checkOverdue((team_001.Item) virtualBook51);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap53 = student48.borrowed;
        team_001.BorrowedIterator borrowedIterator54 = new team_001.BorrowedIterator(itemMap53);
        java.util.ArrayList<team_001.Item> itemList55 = client40.checkItemsOverdue(borrowedIterator54);
        team_001.Magazine magazine58 = new team_001.Magazine("hi!", "");
        int int59 = client40.checkOverdue((team_001.Item) magazine58);
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        team_001.Student student67 = new team_001.Student("", "", "hi!", strList65);
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int71 = student67.checkOverdue((team_001.Item) virtualBook70);
        int int72 = virtualBook70.ID;
        int int73 = client40.checkOverdue((team_001.Item) virtualBook70);
        boolean boolean74 = student7.borrowItem((team_001.Item) virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "hi!" + "'", str33.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 14884 + "'", int72 == 14884);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        java.util.ArrayList<java.lang.String> strList30 = faculty25.getCourses();
        java.util.ArrayList<java.lang.String> strList31 = faculty25.getCourses();
        java.util.ArrayList<java.lang.String> strList32 = faculty25.getCourses();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        team_001.Student student40 = new team_001.Student("", "", "hi!", strList38);
        team_001.VirtualBook virtualBook43 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int44 = student40.checkOverdue((team_001.Item) virtualBook43);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        team_001.Student student52 = new team_001.Student("", "", "hi!", strList50);
        student52.setEmail("hi!");
        team_001.Magazine magazine57 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean58 = student52.isBorrowed((team_001.Item) magazine57);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        team_001.Student student66 = new team_001.Student("", "", "hi!", strList64);
        team_001.VirtualBook virtualBook69 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int70 = student66.checkOverdue((team_001.Item) virtualBook69);
        java.lang.Boolean boolean71 = student52.isBorrowed((team_001.Item) virtualBook69);
        int int72 = student40.checkOverdue((team_001.Item) virtualBook69);
        int int73 = faculty25.checkOverdue((team_001.Item) virtualBook69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        team_001.Student student37 = new team_001.Student("", "", "hi!", strList35);
        student37.setEmail("hi!");
        student37.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap42 = student37.borrowed;
        student37.setUsername("");
        team_001.Newsletter newsletter47 = new team_001.Newsletter("hi!", "hi!");
        student37.unsubscribe(newsletter47);
        java.lang.Object obj49 = newsletter47.clone();
        faculty25.unsubscribe(newsletter47);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap51 = null;
        faculty25.borrowed = itemMap51;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj49);
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        team_001.Client client16 = userBuilder0.buildNonFacultyStaff();
        java.lang.String str17 = userBuilder0.password;
        team_001.UserBuilder userBuilder19 = userBuilder0.setUsername("");
        team_001.Client client20 = userBuilder19.buildFaculty();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!" + "'", str17.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client20);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        team_001.Client client9 = userManagement1.writeUser("hi!", "", "hi!", "");
        java.lang.Class<?> wildcardClass10 = client9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade8 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        libraryFacade8.bookKeeping("hi!", strList12);
        team_001.Library library15 = libraryFacade8.getLibrary();
        team_001.UserBuilder userBuilder16 = userBuilder0.setLibrary(library15);
        java.lang.String str17 = userBuilder0.email;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        student7.setId(7905);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        team_001.visitor visitor3 = new team_001.visitor("", "hi!", "");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        team_001.VirtualBook virtualBook14 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int15 = student11.checkOverdue((team_001.Item) virtualBook14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        team_001.Student student23 = new team_001.Student("", "", "hi!", strList21);
        team_001.VirtualBook virtualBook26 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int27 = student23.checkOverdue((team_001.Item) virtualBook26);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap28 = student23.borrowed;
        team_001.BorrowedIterator borrowedIterator29 = new team_001.BorrowedIterator(itemMap28);
        student11.borrowed = itemMap28;
        visitor3.setBorrowed(itemMap28);
        visitor3.setPassword("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap28);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        java.lang.String str26 = userBuilder0.password;
        team_001.Client client27 = userBuilder0.buildStudent();
        team_001.UserBuilder userBuilder28 = new team_001.UserBuilder();
        team_001.Client client29 = userBuilder28.buildStudent();
        team_001.UserBuilder userBuilder30 = new team_001.UserBuilder();
        team_001.Client client31 = userBuilder30.buildVisitor();
        team_001.UserBuilder userBuilder33 = userBuilder30.setPassword("hi!");
        userBuilder30.password = "hi!";
        team_001.Client client36 = userBuilder30.buildStudent();
        team_001.Library library37 = userBuilder30.lib;
        team_001.UserBuilder userBuilder38 = new team_001.UserBuilder();
        userBuilder38.email = "hi!";
        team_001.Library library41 = userBuilder38.lib;
        team_001.LibraryFacade libraryFacade44 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        libraryFacade44.bookKeeping("hi!", strList48);
        team_001.LibraryFacade libraryFacade54 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        libraryFacade54.bookKeeping("hi!", strList58);
        libraryFacade44.bookKeeping("", strList58);
        team_001.Library library62 = libraryFacade44.getLibrary();
        team_001.UserBuilder userBuilder63 = userBuilder38.setLibrary(library62);
        userBuilder30.lib = library62;
        userBuilder28.lib = library62;
        team_001.UserBuilder userBuilder66 = userBuilder0.setLibrary(library62);
        team_001.Client client67 = userBuilder66.buildVisitor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client67);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.UserBuilder userBuilder30 = userBuilder23.setUsername("");
        team_001.Client client31 = userBuilder30.buildFaculty();
        team_001.BorrowedIterator borrowedIterator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<team_001.Item> itemList33 = client31.checkItemsOverdue(borrowedIterator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"team_001.BorrowedIterator.hasNext()\" because \"iterator\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client31);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap14 = student9.borrowed;
        team_001.BorrowedIterator borrowedIterator15 = new team_001.BorrowedIterator(itemMap14);
        java.util.ArrayList<team_001.Item> itemList16 = client1.checkItemsOverdue(borrowedIterator15);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int28 = student24.checkOverdue((team_001.Item) virtualBook27);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap29 = student24.borrowed;
        team_001.BorrowedIterator borrowedIterator30 = new team_001.BorrowedIterator(itemMap29);
        client1.setBorrowed(itemMap29);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap40 = student39.getSubcribed();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        student48.setEmail("hi!");
        team_001.Magazine magazine53 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean54 = student48.isBorrowed((team_001.Item) magazine53);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        team_001.Student student62 = new team_001.Student("", "", "hi!", strList60);
        team_001.VirtualBook virtualBook65 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int66 = student62.checkOverdue((team_001.Item) virtualBook65);
        java.lang.Boolean boolean67 = student48.isBorrowed((team_001.Item) virtualBook65);
        java.lang.String str68 = virtualBook65.getTitle();
        student39.returnItem((team_001.Item) virtualBook65);
        int int70 = virtualBook65.ID;
        int int71 = virtualBook65.ID;
        int int72 = client1.checkOverdue((team_001.Item) virtualBook65);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap73 = client1.borrowed;
        team_001.VirtualBook virtualBook76 = team_001.ItemFactory.createVirtualBook("hi!", "");
        java.lang.String str77 = virtualBook76.getTitle();
        boolean boolean78 = client1.borrowItem((team_001.Item) virtualBook76);
        virtualBook76.ID = 13152;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "hi!" + "'", str68.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 15154 + "'", int70 == 15154);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 15154 + "'", int71 == 15154);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str77 + "' != '" + "hi!" + "'", str77.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        faculty25.setId((int) (byte) -1);
        java.util.ArrayList<java.lang.String> strList32 = faculty25.getCourses();
        team_001.LibraryFacade libraryFacade35 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        team_001.Student student43 = new team_001.Student("", "", "hi!", strList41);
        team_001.Magazine magazine46 = new team_001.Magazine("", "hi!");
        student43.returnItem((team_001.Item) magazine46);
        java.lang.String str48 = student43.getEmail();
        team_001.CD cD51 = new team_001.CD("", "");
        boolean boolean52 = libraryFacade35.borrowItem((team_001.Client) student43, (team_001.Item) cD51);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "hi!", "hi!", strList58);
        team_001.LibraryFacade libraryFacade63 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        libraryFacade63.bookKeeping("hi!", strList67);
        team_001.visitor visitor73 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine76 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean77 = libraryFacade63.borrowItem((team_001.Client) visitor73, (team_001.Item) magazine76);
        visitor73.setPassword("hi!");
        java.lang.String str80 = visitor73.getEmail();
        team_001.CD cD83 = new team_001.CD("hi!", "");
        java.lang.Boolean boolean84 = visitor73.isBorrowed((team_001.Item) cD83);
        libraryFacade35.returnItem((team_001.Client) student60, (team_001.Item) cD83);
        faculty25.returnItem((team_001.Item) cD83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "" + "'", str48.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "hi!" + "'", str80.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84.equals(false));
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        userBuilder17.email = "hi!";
        team_001.Library library20 = userBuilder17.lib;
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Library library41 = libraryFacade23.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder17.setLibrary(library41);
        userBuilder0.lib = library41;
        team_001.Client client44 = userBuilder0.buildFaculty();
        userBuilder0.password = "hi!";
        team_001.Client client47 = userBuilder0.buildNonFacultyStaff();
        java.lang.String str48 = client47.getPassword();
        int int49 = client47.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "hi!" + "'", str48.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 6255 + "'", int49 == 6255);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        libraryFacade2.bookKeeping("", strList27);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap31 = libraryFacade2.getInventory();
        team_001.Faculty faculty35 = new team_001.Faculty("hi!", "", "");
        team_001.PhysicalBook physicalBook38 = new team_001.PhysicalBook("", "");
        java.lang.String str39 = physicalBook38.getAuthor();
        libraryFacade2.returnItem((team_001.Client) faculty35, (team_001.Item) physicalBook38);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap41 = libraryFacade2.getInventory();
        team_001.Library library42 = libraryFacade2.getLibrary();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "" + "'", str39.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library42);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        team_001.Client client18 = userBuilder17.buildVisitor();
        team_001.Client client19 = userBuilder17.buildNonFacultyStaff();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        team_001.Student student27 = new team_001.Student("", "", "hi!", strList25);
        team_001.Magazine magazine30 = new team_001.Magazine("", "hi!");
        student27.returnItem((team_001.Item) magazine30);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        team_001.Magazine magazine42 = new team_001.Magazine("", "hi!");
        student39.returnItem((team_001.Item) magazine42);
        java.lang.String str44 = student39.getEmail();
        student39.setPassword("");
        team_001.VirtualBook virtualBook49 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook49.ID = '4';
        int int52 = student39.checkOverdue((team_001.Item) virtualBook49);
        java.lang.String str53 = virtualBook49.getTitle();
        boolean boolean54 = student27.borrowItem((team_001.Item) virtualBook49);
        client19.returnItem((team_001.Item) virtualBook49);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        team_001.Student student63 = new team_001.Student("", "", "hi!", strList61);
        team_001.VirtualBook virtualBook66 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int67 = student63.checkOverdue((team_001.Item) virtualBook66);
        boolean boolean68 = libraryFacade2.borrowItem(client19, (team_001.Item) virtualBook66);
        team_001.Faculty faculty72 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter75 = new team_001.Newsletter("hi!", "");
        faculty72.subscribe(newsletter75);
        java.util.ArrayList<java.lang.String> strList77 = faculty72.getCourses();
        java.util.ArrayList<java.lang.String> strList78 = faculty72.getCourses();
        team_001.Item item79 = null;
        int int80 = libraryFacade2.checkOverdue((team_001.Client) faculty72, item79);
        java.util.ArrayList<java.lang.String> strList81 = faculty72.getCourses();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "" + "'", str44.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "hi!" + "'", str53.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList81);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        team_001.visitor visitor3 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter6 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str7 = newsletter6.getTitle();
        visitor3.subscribe(newsletter6);
        team_001.Newsletter newsletter11 = team_001.ItemFactory.createNewsLetter("hi!", "");
        visitor3.subscribe(newsletter11);
        int int13 = newsletter11.ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter11);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15271 + "'", int13 == 15271);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.UserBuilder userBuilder49 = userBuilder24.setUsername("hi!");
        team_001.Client client50 = userBuilder24.buildFaculty();
        client50.setId(0);
        team_001.UserBuilder userBuilder53 = new team_001.UserBuilder();
        team_001.Client client54 = userBuilder53.buildVisitor();
        java.lang.String str55 = userBuilder53.password;
        team_001.LibraryFacade libraryFacade58 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        libraryFacade58.bookKeeping("hi!", strList62);
        team_001.LibraryFacade libraryFacade68 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        libraryFacade68.bookKeeping("hi!", strList72);
        libraryFacade58.bookKeeping("", strList72);
        team_001.Library library76 = libraryFacade58.getLibrary();
        team_001.UserBuilder userBuilder77 = userBuilder53.setLibrary(library76);
        team_001.Client client78 = userBuilder53.buildVisitor();
        java.lang.String str79 = userBuilder53.password;
        team_001.Client client80 = userBuilder53.buildVisitor();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap81 = client80.borrowed;
        team_001.BorrowedIterator borrowedIterator82 = new team_001.BorrowedIterator(itemMap81);
        java.util.ArrayList<team_001.Item> itemList83 = client50.checkItemsOverdue(borrowedIterator82);
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item84 = borrowedIterator82.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList83);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        userBuilder17.email = "hi!";
        team_001.Library library20 = userBuilder17.lib;
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Library library41 = libraryFacade23.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder17.setLibrary(library41);
        userBuilder0.lib = library41;
        userBuilder0.email = "";
        java.lang.String str46 = userBuilder0.password;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder48 = userBuilder0.setPassword("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid password format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "hi!" + "'", str46.equals("hi!"));
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "");
        team_001.Library library3 = libraryFacade2.getLibrary();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap12 = student11.getSubcribed();
        team_001.CD cD15 = team_001.ItemFactory.createCD("hi!", "");
        student11.returnItem((team_001.Item) cD15);
        student11.setEmail("hi!");
        team_001.Faculty faculty22 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter25 = new team_001.Newsletter("hi!", "");
        faculty22.subscribe(newsletter25);
        team_001.PhysicalBook physicalBook29 = new team_001.PhysicalBook("", "");
        faculty22.returnItem((team_001.Item) physicalBook29);
        libraryFacade2.returnItem((team_001.Client) student11, (team_001.Item) physicalBook29);
        student11.setPassword("hi!");
        java.lang.String str34 = student11.getEmail();
        java.lang.String str35 = student11.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "hi!" + "'", str34.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "hi!" + "'", str35.equals("hi!"));
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        java.lang.String str26 = userBuilder0.password;
        team_001.Client client27 = userBuilder0.buildStudent();
        team_001.Client client28 = userBuilder0.buildNonFacultyStaff();
        userBuilder0.email = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        team_001.Client client9 = userManagement1.writeUser("hi!", "", "", "hi!");
        team_001.Client client14 = userManagement1.writeUser("hi!", "", "", "");
        boolean boolean17 = userManagement1.readUsers("", "");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        team_001.NonFacultyStaff nonFacultyStaff3 = new team_001.NonFacultyStaff("", "", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        team_001.Student student14 = new team_001.Student("", "", "hi!", strList12);
        team_001.Student student15 = new team_001.Student("", "hi!", "", strList12);
        team_001.PhysicalBook physicalBook18 = team_001.ItemFactory.createPhysicalBook("hi!", "hi!");
        student15.returnItem((team_001.Item) physicalBook18);
        java.lang.String str20 = student15.getPassword();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        team_001.Student student28 = new team_001.Student("", "", "hi!", strList26);
        team_001.VirtualBook virtualBook31 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int32 = student28.checkOverdue((team_001.Item) virtualBook31);
        int int33 = student28.getId();
        student28.setUsername("");
        team_001.LibraryFacade libraryFacade38 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        team_001.Student student46 = new team_001.Student("", "", "hi!", strList44);
        team_001.Magazine magazine49 = new team_001.Magazine("", "hi!");
        student46.returnItem((team_001.Item) magazine49);
        java.lang.String str51 = student46.getEmail();
        team_001.CD cD54 = new team_001.CD("", "");
        boolean boolean55 = libraryFacade38.borrowItem((team_001.Client) student46, (team_001.Item) cD54);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        team_001.Student student63 = new team_001.Student("", "", "hi!", strList61);
        student63.setEmail("hi!");
        team_001.Magazine magazine68 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean69 = student63.isBorrowed((team_001.Item) magazine68);
        boolean boolean70 = student46.borrowItem((team_001.Item) magazine68);
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        team_001.Student student78 = new team_001.Student("", "", "hi!", strList76);
        team_001.VirtualBook virtualBook81 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int82 = student78.checkOverdue((team_001.Item) virtualBook81);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap83 = student78.borrowed;
        team_001.BorrowedIterator borrowedIterator84 = new team_001.BorrowedIterator(itemMap83);
        student46.borrowed = itemMap83;
        student28.borrowed = itemMap83;
        student15.borrowed = itemMap83;
        nonFacultyStaff3.borrowed = itemMap83;
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap89 = nonFacultyStaff3.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "" + "'", str20.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6289 + "'", int33 == 6289);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "" + "'", str51.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap89);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = null;
        student7.borrowed = itemMap13;
        java.lang.String str15 = student7.getEmail();
        java.lang.String str16 = student7.getPassword();
        student7.setPassword("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!" + "'", str16.equals("hi!"));
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        team_001.Client.current_id = 10322;
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        student19.setEmail("hi!");
        student19.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap24 = student19.borrowed;
        student19.setUsername("");
        team_001.Newsletter newsletter29 = new team_001.Newsletter("hi!", "hi!");
        student19.unsubscribe(newsletter29);
        java.lang.Object obj31 = newsletter29.clone();
        student7.subscribe(newsletter29);
        int int33 = student7.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj31);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10333 + "'", int33 == 10333);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.Class<?> wildcardClass12 = student7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        team_001.visitor visitor3 = new team_001.visitor("", "hi!", "hi!");
        team_001.VirtualBook virtualBook6 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook6.ID = '4';
        java.lang.Boolean boolean9 = visitor3.isBorrowed((team_001.Item) virtualBook6);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        team_001.Student student17 = new team_001.Student("", "", "hi!", strList15);
        team_001.VirtualBook virtualBook20 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int21 = student17.checkOverdue((team_001.Item) virtualBook20);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap22 = student17.borrowed;
        team_001.BorrowedIterator borrowedIterator23 = new team_001.BorrowedIterator(itemMap22);
        visitor3.borrowed = itemMap22;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap22);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        java.lang.String str6 = userBuilder0.password;
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        team_001.Client client8 = userBuilder7.buildVisitor();
        java.lang.String str9 = userBuilder7.password;
        userBuilder7.password = "hi!";
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        team_001.Library library21 = libraryFacade14.getLibrary();
        team_001.UserBuilder userBuilder22 = userBuilder7.setLibrary(library21);
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library21);
        userBuilder0.password = "hi!";
        team_001.UserBuilder userBuilder26 = new team_001.UserBuilder();
        userBuilder26.email = "hi!";
        team_001.Library library29 = userBuilder26.lib;
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        libraryFacade42.bookKeeping("hi!", strList46);
        libraryFacade32.bookKeeping("", strList46);
        team_001.Library library50 = libraryFacade32.getLibrary();
        team_001.UserBuilder userBuilder51 = userBuilder26.setLibrary(library50);
        team_001.UserBuilder userBuilder52 = new team_001.UserBuilder();
        userBuilder52.email = "hi!";
        team_001.Library library55 = userBuilder52.lib;
        team_001.LibraryFacade libraryFacade58 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        libraryFacade58.bookKeeping("hi!", strList62);
        team_001.LibraryFacade libraryFacade68 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        libraryFacade68.bookKeeping("hi!", strList72);
        libraryFacade58.bookKeeping("", strList72);
        team_001.Library library76 = libraryFacade58.getLibrary();
        team_001.UserBuilder userBuilder77 = userBuilder52.setLibrary(library76);
        team_001.UserBuilder userBuilder78 = userBuilder51.setLibrary(library76);
        team_001.UserBuilder userBuilder79 = new team_001.UserBuilder();
        userBuilder79.email = "hi!";
        team_001.LibraryFacade libraryFacade84 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.Library library85 = libraryFacade84.getLibrary();
        team_001.UserBuilder userBuilder86 = userBuilder79.setLibrary(library85);
        userBuilder51.lib = library85;
        team_001.UserBuilder userBuilder88 = userBuilder0.setLibrary(library85);
        userBuilder0.email = "";
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder92 = userBuilder0.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder88);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        java.lang.String str4 = userBuilder0.email;
        team_001.UserBuilder userBuilder6 = userBuilder0.setPassword("hi!");
        java.lang.String str7 = userBuilder0.password;
        team_001.UserBuilder userBuilder8 = new team_001.UserBuilder();
        userBuilder8.email = "hi!";
        team_001.Library library11 = userBuilder8.lib;
        java.lang.String str12 = userBuilder8.email;
        team_001.UserBuilder userBuilder13 = new team_001.UserBuilder();
        team_001.Client client14 = userBuilder13.buildVisitor();
        team_001.LibraryFacade libraryFacade17 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        libraryFacade17.bookKeeping("hi!", strList21);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        libraryFacade17.bookKeeping("", strList31);
        team_001.Library library35 = libraryFacade17.getLibrary();
        team_001.UserBuilder userBuilder36 = userBuilder13.setLibrary(library35);
        team_001.Client client37 = userBuilder36.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder39 = userBuilder36.setPassword("hi!");
        team_001.Library library40 = userBuilder36.lib;
        team_001.Client client41 = userBuilder36.buildStudent();
        team_001.UserBuilder userBuilder43 = userBuilder36.setUsername("");
        team_001.UserBuilder userBuilder44 = new team_001.UserBuilder();
        team_001.Client client45 = userBuilder44.buildVisitor();
        team_001.UserBuilder userBuilder47 = userBuilder44.setPassword("hi!");
        userBuilder44.password = "hi!";
        team_001.LibraryFacade libraryFacade52 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        libraryFacade52.bookKeeping("hi!", strList56);
        team_001.Library library59 = libraryFacade52.getLibrary();
        team_001.UserBuilder userBuilder60 = userBuilder44.setLibrary(library59);
        team_001.UserBuilder userBuilder61 = userBuilder43.setLibrary(library59);
        team_001.Library library62 = userBuilder61.lib;
        userBuilder8.lib = library62;
        userBuilder0.lib = library62;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "hi!" + "'", str12.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        team_001.Client client3 = userBuilder0.buildVisitor();
        team_001.Client client4 = userBuilder0.buildStudent();
        team_001.Client client5 = userBuilder0.buildStudent();
        userBuilder0.email = "";
        team_001.Client client8 = userBuilder0.buildVisitor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.LibraryFacade libraryFacade6 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        libraryFacade6.bookKeeping("hi!", strList10);
        team_001.LibraryFacade libraryFacade16 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        libraryFacade16.bookKeeping("hi!", strList20);
        libraryFacade6.bookKeeping("", strList20);
        team_001.Library library24 = libraryFacade6.getLibrary();
        team_001.UserBuilder userBuilder25 = userBuilder0.setLibrary(library24);
        team_001.UserBuilder userBuilder26 = new team_001.UserBuilder();
        userBuilder26.email = "hi!";
        team_001.Library library29 = userBuilder26.lib;
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        libraryFacade42.bookKeeping("hi!", strList46);
        libraryFacade32.bookKeeping("", strList46);
        team_001.Library library50 = libraryFacade32.getLibrary();
        team_001.UserBuilder userBuilder51 = userBuilder26.setLibrary(library50);
        team_001.UserBuilder userBuilder52 = userBuilder25.setLibrary(library50);
        team_001.UserBuilder userBuilder53 = new team_001.UserBuilder();
        userBuilder53.email = "hi!";
        team_001.LibraryFacade libraryFacade58 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.Library library59 = libraryFacade58.getLibrary();
        team_001.UserBuilder userBuilder60 = userBuilder53.setLibrary(library59);
        userBuilder25.lib = library59;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder63 = userBuilder25.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder60);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        team_001.Magazine magazine12 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean13 = student7.isBorrowed((team_001.Item) magazine12);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        team_001.Student student21 = new team_001.Student("", "", "hi!", strList19);
        team_001.VirtualBook virtualBook24 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int25 = student21.checkOverdue((team_001.Item) virtualBook24);
        java.lang.Boolean boolean26 = student7.isBorrowed((team_001.Item) virtualBook24);
        java.lang.String str27 = virtualBook24.getTitle();
        int int28 = virtualBook24.getID();
        java.lang.String str29 = virtualBook24.getAuthor();
        java.lang.Object obj30 = virtualBook24.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "hi!" + "'", str27.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 15716 + "'", int28 == 15716);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "hi!" + "'", str29.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj30);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder24.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder27 = userBuilder24.setUsername("");
        team_001.UserBuilder userBuilder28 = new team_001.UserBuilder();
        team_001.Client client29 = userBuilder28.buildVisitor();
        java.lang.String str30 = userBuilder28.password;
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        team_001.LibraryFacade libraryFacade43 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        libraryFacade43.bookKeeping("hi!", strList47);
        libraryFacade33.bookKeeping("", strList47);
        team_001.Library library51 = libraryFacade33.getLibrary();
        team_001.UserBuilder userBuilder52 = userBuilder28.setLibrary(library51);
        team_001.Client client53 = userBuilder28.buildFaculty();
        team_001.Library library54 = userBuilder28.lib;
        team_001.UserBuilder userBuilder55 = userBuilder27.setLibrary(library54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder55);
    }
}
