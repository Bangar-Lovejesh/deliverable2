package Randoop_Tests;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test501");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setPassword("");
        int int10 = student7.getId();
        student7.setEmail("");
        java.lang.String str13 = student7.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10383 + "'", int10 == 10383);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
    }

    @Test
    public void test502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test502");
        team_001.CD cD2 = new team_001.CD("", "");
        java.lang.Object obj3 = cD2.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj3);
    }

    @Test
    public void test503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test503");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        faculty25.setId((int) (byte) -1);
        java.util.ArrayList<java.lang.String> strList32 = faculty25.getCourses();
        team_001.LibraryFacade libraryFacade35 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        team_001.Student student43 = new team_001.Student("", "", "hi!", strList41);
        team_001.Magazine magazine46 = new team_001.Magazine("", "hi!");
        student43.returnItem((team_001.Item) magazine46);
        java.lang.String str48 = student43.getEmail();
        team_001.CD cD51 = new team_001.CD("", "");
        boolean boolean52 = libraryFacade35.borrowItem((team_001.Client) student43, (team_001.Item) cD51);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "", "hi!", strList58);
        student60.setEmail("hi!");
        team_001.Magazine magazine65 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean66 = student60.isBorrowed((team_001.Item) magazine65);
        boolean boolean67 = student43.borrowItem((team_001.Item) magazine65);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap68 = student43.borrowed;
        faculty25.setBorrowed(itemMap68);
        faculty25.setPassword("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "" + "'", str48.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap68);
    }

    @Test
    public void test504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test504");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        team_001.Client client16 = userBuilder0.buildNonFacultyStaff();
        java.lang.String str17 = userBuilder0.password;
        userBuilder0.email = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!" + "'", str17.equals("hi!"));
    }

    @Test
    public void test505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test505");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap2 = client1.getSubcribed();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap11 = student10.getSubcribed();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        student19.setEmail("hi!");
        team_001.Magazine magazine24 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean25 = student19.isBorrowed((team_001.Item) magazine24);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        team_001.Student student33 = new team_001.Student("", "", "hi!", strList31);
        team_001.VirtualBook virtualBook36 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int37 = student33.checkOverdue((team_001.Item) virtualBook36);
        java.lang.Boolean boolean38 = student19.isBorrowed((team_001.Item) virtualBook36);
        java.lang.String str39 = virtualBook36.getTitle();
        student10.returnItem((team_001.Item) virtualBook36);
        virtualBook36.ID = 10;
        java.lang.Boolean boolean43 = client1.isBorrowed((team_001.Item) virtualBook36);
        team_001.UserBuilder userBuilder44 = new team_001.UserBuilder();
        team_001.Client client45 = userBuilder44.buildVisitor();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        team_001.VirtualBook virtualBook56 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int57 = student53.checkOverdue((team_001.Item) virtualBook56);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap58 = student53.borrowed;
        team_001.BorrowedIterator borrowedIterator59 = new team_001.BorrowedIterator(itemMap58);
        java.util.ArrayList<team_001.Item> itemList60 = client45.checkItemsOverdue(borrowedIterator59);
        java.util.ArrayList<team_001.Item> itemList61 = client1.checkItemsOverdue(borrowedIterator59);
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator59.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList61);
    }

    @Test
    public void test506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test506");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "");
        team_001.Library library3 = libraryFacade2.getLibrary();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap12 = student11.getSubcribed();
        team_001.CD cD15 = team_001.ItemFactory.createCD("hi!", "");
        student11.returnItem((team_001.Item) cD15);
        student11.setEmail("hi!");
        team_001.Faculty faculty22 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter25 = new team_001.Newsletter("hi!", "");
        faculty22.subscribe(newsletter25);
        team_001.PhysicalBook physicalBook29 = new team_001.PhysicalBook("", "");
        faculty22.returnItem((team_001.Item) physicalBook29);
        libraryFacade2.returnItem((team_001.Client) student11, (team_001.Item) physicalBook29);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap32 = libraryFacade2.getInventory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap32);
    }

    @Test
    public void test507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test507");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        team_001.Client client18 = userBuilder17.buildVisitor();
        team_001.Client client19 = userBuilder17.buildNonFacultyStaff();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        team_001.Student student27 = new team_001.Student("", "", "hi!", strList25);
        team_001.Magazine magazine30 = new team_001.Magazine("", "hi!");
        student27.returnItem((team_001.Item) magazine30);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        team_001.Magazine magazine42 = new team_001.Magazine("", "hi!");
        student39.returnItem((team_001.Item) magazine42);
        java.lang.String str44 = student39.getEmail();
        student39.setPassword("");
        team_001.VirtualBook virtualBook49 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook49.ID = '4';
        int int52 = student39.checkOverdue((team_001.Item) virtualBook49);
        java.lang.String str53 = virtualBook49.getTitle();
        boolean boolean54 = student27.borrowItem((team_001.Item) virtualBook49);
        client19.returnItem((team_001.Item) virtualBook49);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        team_001.Student student63 = new team_001.Student("", "", "hi!", strList61);
        team_001.VirtualBook virtualBook66 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int67 = student63.checkOverdue((team_001.Item) virtualBook66);
        boolean boolean68 = libraryFacade2.borrowItem(client19, (team_001.Item) virtualBook66);
        team_001.Faculty faculty72 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter75 = new team_001.Newsletter("hi!", "");
        faculty72.subscribe(newsletter75);
        java.util.ArrayList<java.lang.String> strList77 = faculty72.getCourses();
        java.util.ArrayList<java.lang.String> strList78 = faculty72.getCourses();
        team_001.Item item79 = null;
        int int80 = libraryFacade2.checkOverdue((team_001.Client) faculty72, item79);
        faculty72.setEmail("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "" + "'", str44.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "hi!" + "'", str53.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test508");
        team_001.Magazine magazine2 = new team_001.Magazine("", "hi!");
        int int3 = magazine2.getID();
        java.lang.String str4 = magazine2.getTitle();
        java.lang.Object obj5 = magazine2.clone();
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 15932 + "'", int3 == 15932);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "" + "'", str4.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj5);
    }

    @Test
    public void test509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test509");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.Library library25 = userBuilder23.lib;
        team_001.Library library26 = userBuilder23.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library26);
    }

    @Test
    public void test510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test510");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        student7.setPassword("");
        student7.setUsername("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test511");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "");
        team_001.Faculty faculty6 = new team_001.Faculty("", "", "hi!");
        team_001.visitor visitor10 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter13 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str14 = newsletter13.getTitle();
        visitor10.subscribe(newsletter13);
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) faculty6, (team_001.Item) newsletter13);
        team_001.Faculty faculty21 = new team_001.Faculty("hi!", "hi!", "hi!");
        java.util.ArrayList<java.lang.String> strList22 = faculty21.getCourses();
        libraryFacade2.bookKeeping("", strList22);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        team_001.LibraryFacade libraryFacade40 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        libraryFacade40.bookKeeping("hi!", strList44);
        libraryFacade30.bookKeeping("", strList44);
        team_001.Student student48 = new team_001.Student("hi!", "", "", strList44);
        libraryFacade2.bookKeeping("", strList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test512");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        virtualBook28.ID = 11826;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test513");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        team_001.Client client6 = userManagement1.writeUser("", "hi!", "hi!", "hi!");
        boolean boolean9 = userManagement1.readUsers("", "hi!");
        boolean boolean12 = userManagement1.readUsers("", "hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test514");
        team_001.Magazine magazine2 = new team_001.Magazine("", "hi!");
        magazine2.ID = 6821;
        int int5 = magazine2.getID();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6821 + "'", int5 == 6821);
    }

    @Test
    public void test515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test515");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter6 = new team_001.Newsletter("hi!", "");
        faculty3.subscribe(newsletter6);
        team_001.PhysicalBook physicalBook10 = new team_001.PhysicalBook("", "");
        faculty3.returnItem((team_001.Item) physicalBook10);
        java.lang.String str12 = physicalBook10.getAuthor();
        int int13 = physicalBook10.ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16047 + "'", int13 == 16047);
    }

    @Test
    public void test516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test516");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "");
        team_001.Faculty faculty6 = new team_001.Faculty("", "", "hi!");
        team_001.visitor visitor10 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter13 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str14 = newsletter13.getTitle();
        visitor10.subscribe(newsletter13);
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) faculty6, (team_001.Item) newsletter13);
        java.util.ArrayList<java.lang.String> strList17 = faculty6.getCourses();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test517");
        team_001.Faculty faculty9 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter12 = new team_001.Newsletter("hi!", "");
        faculty9.subscribe(newsletter12);
        java.util.ArrayList<java.lang.String> strList14 = faculty9.getCourses();
        faculty9.setUsername("hi!");
        java.util.ArrayList<java.lang.String> strList17 = faculty9.getCourses();
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList17);
        team_001.Student student19 = new team_001.Student("", "hi!", "", strList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test518");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "hi!", "hi!", strList8);
        team_001.Student student11 = new team_001.Student("", "", "", strList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test519");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        team_001.Student student13 = new team_001.Student("", "", "hi!", strList11);
        team_001.Magazine magazine16 = new team_001.Magazine("", "hi!");
        student13.returnItem((team_001.Item) magazine16);
        java.lang.String str18 = student13.getEmail();
        team_001.CD cD21 = new team_001.CD("", "");
        boolean boolean22 = libraryFacade5.borrowItem((team_001.Client) student13, (team_001.Item) cD21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        team_001.Student student30 = new team_001.Student("", "", "hi!", strList28);
        student30.setEmail("hi!");
        team_001.Magazine magazine35 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean36 = student30.isBorrowed((team_001.Item) magazine35);
        boolean boolean37 = student13.borrowItem((team_001.Item) magazine35);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        team_001.Student student45 = new team_001.Student("", "", "hi!", strList43);
        team_001.Magazine magazine48 = new team_001.Magazine("", "hi!");
        student45.returnItem((team_001.Item) magazine48);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        team_001.Student student57 = new team_001.Student("", "", "hi!", strList55);
        team_001.Magazine magazine60 = new team_001.Magazine("", "hi!");
        student57.returnItem((team_001.Item) magazine60);
        java.lang.String str62 = student57.getEmail();
        student57.setPassword("");
        team_001.VirtualBook virtualBook67 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook67.ID = '4';
        int int70 = student57.checkOverdue((team_001.Item) virtualBook67);
        java.lang.String str71 = virtualBook67.getTitle();
        boolean boolean72 = student45.borrowItem((team_001.Item) virtualBook67);
        team_001.Newsletter newsletter75 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean76 = student45.borrowItem((team_001.Item) newsletter75);
        int int77 = newsletter75.ID;
        int int78 = libraryFacade2.checkOverdue((team_001.Client) student13, (team_001.Item) newsletter75);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap79 = libraryFacade2.getInventory();
        team_001.Faculty faculty84 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter87 = new team_001.Newsletter("hi!", "");
        faculty84.subscribe(newsletter87);
        java.util.ArrayList<java.lang.String> strList89 = faculty84.getCourses();
        faculty84.setUsername("hi!");
        java.util.ArrayList<java.lang.String> strList92 = faculty84.getCourses();
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("", strList92);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "" + "'", str18.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "" + "'", str62.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str71 + "' != '" + "hi!" + "'", str71.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 16111 + "'", int77 == 16111);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList92);
    }

    @Test
    public void test520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test520");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.Client client48 = userBuilder24.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder50 = userBuilder24.setUsername("");
        team_001.UserBuilder userBuilder51 = new team_001.UserBuilder();
        team_001.Client client52 = userBuilder51.buildVisitor();
        team_001.LibraryFacade libraryFacade55 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        libraryFacade55.bookKeeping("hi!", strList59);
        team_001.LibraryFacade libraryFacade65 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        libraryFacade65.bookKeeping("hi!", strList69);
        libraryFacade55.bookKeeping("", strList69);
        team_001.Library library73 = libraryFacade55.getLibrary();
        team_001.UserBuilder userBuilder74 = userBuilder51.setLibrary(library73);
        team_001.Client client75 = userBuilder74.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder77 = userBuilder74.setUsername("hi!");
        team_001.UserBuilder userBuilder79 = userBuilder77.setUsername("");
        team_001.LibraryFacade libraryFacade82 = new team_001.LibraryFacade("", "");
        team_001.Library library83 = libraryFacade82.getLibrary();
        team_001.UserBuilder userBuilder84 = userBuilder77.setLibrary(library83);
        userBuilder24.lib = library83;
        team_001.UserBuilder userBuilder86 = new team_001.UserBuilder();
        userBuilder86.email = "hi!";
        team_001.LibraryFacade libraryFacade91 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.Library library92 = libraryFacade91.getLibrary();
        team_001.UserBuilder userBuilder93 = userBuilder86.setLibrary(library92);
        team_001.Library library94 = userBuilder93.lib;
        team_001.UserBuilder userBuilder95 = userBuilder24.setLibrary(library94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder95);
    }

    @Test
    public void test521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test521");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.Library library25 = userBuilder23.lib;
        team_001.Client client26 = userBuilder23.buildFaculty();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client26);
    }

    @Test
    public void test522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test522");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder0.buildVisitor();
        team_001.Client client25 = userBuilder0.buildStudent();
        client25.setPassword("");
        int int28 = client25.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10468 + "'", int28 == 10468);
    }

    @Test
    public void test523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test523");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.Client client48 = userBuilder47.buildNonFacultyStaff();
        team_001.LibraryFacade libraryFacade51 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        libraryFacade51.bookKeeping("hi!", strList55);
        team_001.LibraryFacade libraryFacade61 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        libraryFacade61.bookKeeping("hi!", strList65);
        libraryFacade51.bookKeeping("", strList65);
        team_001.Library library69 = libraryFacade51.getLibrary();
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        team_001.Student student77 = new team_001.Student("", "", "hi!", strList75);
        team_001.Newsletter newsletter80 = new team_001.Newsletter("hi!", "hi!");
        int int81 = student77.checkOverdue((team_001.Item) newsletter80);
        team_001.Magazine magazine84 = team_001.ItemFactory.createMagazine("", "");
        magazine84.ID = 1961;
        boolean boolean87 = libraryFacade51.borrowItem((team_001.Client) student77, (team_001.Item) magazine84);
        client48.returnItem((team_001.Item) magazine84);
        client48.setUsername("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test524");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildStudent();
        team_001.UserBuilder userBuilder25 = new team_001.UserBuilder();
        team_001.Client client26 = userBuilder25.buildVisitor();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        team_001.Student student34 = new team_001.Student("", "", "hi!", strList32);
        team_001.VirtualBook virtualBook37 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int38 = student34.checkOverdue((team_001.Item) virtualBook37);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap39 = student34.borrowed;
        team_001.BorrowedIterator borrowedIterator40 = new team_001.BorrowedIterator(itemMap39);
        java.util.ArrayList<team_001.Item> itemList41 = client26.checkItemsOverdue(borrowedIterator40);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        team_001.Student student49 = new team_001.Student("", "", "hi!", strList47);
        team_001.VirtualBook virtualBook52 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int53 = student49.checkOverdue((team_001.Item) virtualBook52);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap54 = student49.borrowed;
        team_001.BorrowedIterator borrowedIterator55 = new team_001.BorrowedIterator(itemMap54);
        client26.setBorrowed(itemMap54);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        team_001.Student student64 = new team_001.Student("", "", "hi!", strList62);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap65 = student64.getSubcribed();
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        team_001.Student student73 = new team_001.Student("", "", "hi!", strList71);
        student73.setEmail("hi!");
        team_001.Magazine magazine78 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean79 = student73.isBorrowed((team_001.Item) magazine78);
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        team_001.Student student87 = new team_001.Student("", "", "hi!", strList85);
        team_001.VirtualBook virtualBook90 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int91 = student87.checkOverdue((team_001.Item) virtualBook90);
        java.lang.Boolean boolean92 = student73.isBorrowed((team_001.Item) virtualBook90);
        java.lang.String str93 = virtualBook90.getTitle();
        student64.returnItem((team_001.Item) virtualBook90);
        int int95 = virtualBook90.ID;
        int int96 = virtualBook90.ID;
        int int97 = client26.checkOverdue((team_001.Item) virtualBook90);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap98 = client26.borrowed;
        client24.setBorrowed(itemMap98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str93 + "' != '" + "hi!" + "'", str93.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int95 + "' != '" + 16295 + "'", int95 == 16295);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int96 + "' != '" + 16295 + "'", int96 == 16295);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap98);
    }

    @Test
    public void test525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test525");
        team_001.VirtualBook virtualBook2 = new team_001.VirtualBook("", "");
        java.lang.Object obj3 = virtualBook2.clone();
        int int4 = virtualBook2.getID();
        java.lang.String str5 = virtualBook2.getTitle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16296 + "'", int4 == 16296);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "" + "'", str5.equals(""));
    }

    @Test
    public void test526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test526");
        team_001.Magazine magazine2 = new team_001.Magazine("hi!", "hi!");
        java.lang.String str3 = magazine2.getTitle();
        java.lang.String str4 = magazine2.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!" + "'", str3.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
    }

    @Test
    public void test527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test527");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        team_001.Client client6 = userManagement1.writeUser("", "hi!", "hi!", "hi!");
        boolean boolean9 = userManagement1.readUsers("hi!", "hi!");
        java.lang.String str11 = userManagement1.getType("");
        team_001.Client client16 = userManagement1.writeUser("", "hi!", "hi!", "hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap17 = client16.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap17);
    }

    @Test
    public void test528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test528");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Student student11 = new team_001.Student("", "hi!", "", strList8);
        team_001.PhysicalBook physicalBook14 = team_001.ItemFactory.createPhysicalBook("hi!", "hi!");
        student11.returnItem((team_001.Item) physicalBook14);
        int int16 = student11.getId();
        java.lang.String str17 = student11.getPassword();
        team_001.UserBuilder userBuilder18 = new team_001.UserBuilder();
        team_001.Client client19 = userBuilder18.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap20 = client19.getSubcribed();
        team_001.UserBuilder userBuilder21 = new team_001.UserBuilder();
        team_001.Client client22 = userBuilder21.buildVisitor();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        team_001.Student student30 = new team_001.Student("", "", "hi!", strList28);
        team_001.VirtualBook virtualBook33 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int34 = student30.checkOverdue((team_001.Item) virtualBook33);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap35 = student30.borrowed;
        team_001.BorrowedIterator borrowedIterator36 = new team_001.BorrowedIterator(itemMap35);
        java.util.ArrayList<team_001.Item> itemList37 = client22.checkItemsOverdue(borrowedIterator36);
        team_001.Newsletter newsletter40 = new team_001.Newsletter("hi!", "");
        client22.subscribe(newsletter40);
        client19.returnItem((team_001.Item) newsletter40);
        int int43 = newsletter40.ID;
        student11.unsubscribe(newsletter40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10487 + "'", int16 == 10487);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "" + "'", str17.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList37);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 16335 + "'", int43 == 16335);
    }

    @Test
    public void test529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test529");
        team_001.Newsletter newsletter2 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str3 = newsletter2.getTitle();
        java.lang.String str4 = newsletter2.getAuthor();
        newsletter2.ID = 324;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
    }

    @Test
    public void test530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test530");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        student7.setPassword("");
        team_001.VirtualBook virtualBook17 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook17.ID = '4';
        int int20 = student7.checkOverdue((team_001.Item) virtualBook17);
        student7.setUsername("");
        java.lang.String str23 = student7.getUsername();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "" + "'", str23.equals(""));
    }

    @Test
    public void test531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test531");
        team_001.Faculty faculty6 = new team_001.Faculty("hi!", "hi!", "");
        java.util.ArrayList<java.lang.String> strList7 = faculty6.getCourses();
        team_001.Student student8 = new team_001.Student("hi!", "", "hi!", strList7);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        team_001.Student student16 = new team_001.Student("", "", "hi!", strList14);
        team_001.VirtualBook virtualBook19 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int20 = student16.checkOverdue((team_001.Item) virtualBook19);
        int int21 = student16.getId();
        student16.setUsername("");
        team_001.LibraryFacade libraryFacade26 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        team_001.Student student34 = new team_001.Student("", "", "hi!", strList32);
        team_001.Magazine magazine37 = new team_001.Magazine("", "hi!");
        student34.returnItem((team_001.Item) magazine37);
        java.lang.String str39 = student34.getEmail();
        team_001.CD cD42 = new team_001.CD("", "");
        boolean boolean43 = libraryFacade26.borrowItem((team_001.Client) student34, (team_001.Item) cD42);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        team_001.Student student51 = new team_001.Student("", "", "hi!", strList49);
        student51.setEmail("hi!");
        team_001.Magazine magazine56 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean57 = student51.isBorrowed((team_001.Item) magazine56);
        boolean boolean58 = student34.borrowItem((team_001.Item) magazine56);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        team_001.Student student66 = new team_001.Student("", "", "hi!", strList64);
        team_001.VirtualBook virtualBook69 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int70 = student66.checkOverdue((team_001.Item) virtualBook69);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap71 = student66.borrowed;
        team_001.BorrowedIterator borrowedIterator72 = new team_001.BorrowedIterator(itemMap71);
        student34.borrowed = itemMap71;
        student16.borrowed = itemMap71;
        student8.borrowed = itemMap71;
        team_001.BorrowedIterator borrowedIterator76 = new team_001.BorrowedIterator(itemMap71);
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator76.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10515 + "'", int21 == 10515);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "" + "'", str39.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap71);
    }

    @Test
    public void test532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test532");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap17 = libraryFacade2.getInventory();
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        team_001.Student student47 = new team_001.Student("", "", "hi!", strList45);
        student47.setEmail("hi!");
        student47.setEmail("hi!");
        team_001.PhysicalBook physicalBook54 = new team_001.PhysicalBook("", "hi!");
        boolean boolean55 = libraryFacade20.borrowItem((team_001.Client) student47, (team_001.Item) physicalBook54);
        java.lang.String str56 = student47.getEmail();
        team_001.Magazine magazine59 = new team_001.Magazine("", "hi!");
        int int60 = magazine59.getID();
        boolean boolean61 = libraryFacade2.borrowItem((team_001.Client) student47, (team_001.Item) magazine59);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap62 = libraryFacade2.getInventory();
        team_001.Faculty faculty67 = new team_001.Faculty("hi!", "hi!", "hi!");
        java.util.ArrayList<java.lang.String> strList68 = faculty67.getCourses();
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("", strList68);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "hi!" + "'", str56.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 16507 + "'", int60 == 16507);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList68);
    }

    @Test
    public void test533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test533");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "");
        team_001.Faculty faculty6 = new team_001.Faculty("", "", "hi!");
        team_001.visitor visitor10 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter13 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str14 = newsletter13.getTitle();
        visitor10.subscribe(newsletter13);
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) faculty6, (team_001.Item) newsletter13);
        team_001.Faculty faculty21 = new team_001.Faculty("hi!", "hi!", "hi!");
        java.util.ArrayList<java.lang.String> strList22 = faculty21.getCourses();
        libraryFacade2.bookKeeping("", strList22);
        team_001.Library library24 = libraryFacade2.getLibrary();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library24);
    }

    @Test
    public void test534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test534");
        team_001.VirtualBook virtualBook2 = team_001.ItemFactory.createVirtualBook("hi!", "");
        java.lang.String str3 = virtualBook2.getAuthor();
        int int4 = virtualBook2.ID;
        virtualBook2.ID = 5689;
        virtualBook2.ID = 553;
        java.lang.Object obj9 = virtualBook2.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16529 + "'", int4 == 16529);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test535");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        java.lang.String str4 = userBuilder0.email;
        java.lang.String str5 = userBuilder0.email;
        team_001.UserBuilder userBuilder7 = userBuilder0.setUsername("");
        team_001.UserBuilder userBuilder8 = new team_001.UserBuilder();
        team_001.Client client9 = userBuilder8.buildVisitor();
        team_001.UserBuilder userBuilder11 = userBuilder8.setPassword("hi!");
        userBuilder8.password = "hi!";
        java.lang.String str14 = userBuilder8.password;
        team_001.Client client15 = userBuilder8.buildNonFacultyStaff();
        team_001.LibraryFacade libraryFacade18 = new team_001.LibraryFacade("", "");
        team_001.Library library19 = libraryFacade18.getLibrary();
        userBuilder8.lib = library19;
        team_001.UserBuilder userBuilder21 = userBuilder0.setLibrary(library19);
        userBuilder0.email = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!" + "'", str14.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder21);
    }

    @Test
    public void test536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test536");
        team_001.NonFacultyStaff nonFacultyStaff3 = new team_001.NonFacultyStaff("", "", "hi!");
        java.lang.String str4 = nonFacultyStaff3.getUsername();
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.LibraryFacade libraryFacade10 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        team_001.Magazine magazine21 = new team_001.Magazine("", "hi!");
        student18.returnItem((team_001.Item) magazine21);
        java.lang.String str23 = student18.getEmail();
        team_001.CD cD26 = new team_001.CD("", "");
        boolean boolean27 = libraryFacade10.borrowItem((team_001.Client) student18, (team_001.Item) cD26);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        team_001.Student student35 = new team_001.Student("", "", "hi!", strList33);
        student35.setEmail("hi!");
        team_001.Magazine magazine40 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean41 = student35.isBorrowed((team_001.Item) magazine40);
        boolean boolean42 = student18.borrowItem((team_001.Item) magazine40);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        team_001.Student student50 = new team_001.Student("", "", "hi!", strList48);
        team_001.Magazine magazine53 = new team_001.Magazine("", "hi!");
        student50.returnItem((team_001.Item) magazine53);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        team_001.Student student62 = new team_001.Student("", "", "hi!", strList60);
        team_001.Magazine magazine65 = new team_001.Magazine("", "hi!");
        student62.returnItem((team_001.Item) magazine65);
        java.lang.String str67 = student62.getEmail();
        student62.setPassword("");
        team_001.VirtualBook virtualBook72 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook72.ID = '4';
        int int75 = student62.checkOverdue((team_001.Item) virtualBook72);
        java.lang.String str76 = virtualBook72.getTitle();
        boolean boolean77 = student50.borrowItem((team_001.Item) virtualBook72);
        team_001.Newsletter newsletter80 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean81 = student50.borrowItem((team_001.Item) newsletter80);
        int int82 = newsletter80.ID;
        int int83 = libraryFacade7.checkOverdue((team_001.Client) student18, (team_001.Item) newsletter80);
        boolean boolean84 = nonFacultyStaff3.borrowItem((team_001.Item) newsletter80);
        java.lang.String str85 = nonFacultyStaff3.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "" + "'", str4.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "" + "'", str23.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "" + "'", str67.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "hi!" + "'", str76.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 16571 + "'", int82 == 16571);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str85 + "' != '" + "" + "'", str85.equals(""));
    }

    @Test
    public void test537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test537");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "");
        team_001.Library library3 = libraryFacade2.getLibrary();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        team_001.Student student15 = new team_001.Student("", "", "hi!", strList13);
        team_001.Student student16 = new team_001.Student("", "hi!", "", strList13);
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("", strList13);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test538");
        team_001.Client.current_id = 1563;
    }

    @Test
    public void test539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test539");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        team_001.Client client18 = userBuilder17.buildVisitor();
        team_001.Client client19 = userBuilder17.buildNonFacultyStaff();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        team_001.Student student27 = new team_001.Student("", "", "hi!", strList25);
        team_001.Magazine magazine30 = new team_001.Magazine("", "hi!");
        student27.returnItem((team_001.Item) magazine30);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        team_001.Magazine magazine42 = new team_001.Magazine("", "hi!");
        student39.returnItem((team_001.Item) magazine42);
        java.lang.String str44 = student39.getEmail();
        student39.setPassword("");
        team_001.VirtualBook virtualBook49 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook49.ID = '4';
        int int52 = student39.checkOverdue((team_001.Item) virtualBook49);
        java.lang.String str53 = virtualBook49.getTitle();
        boolean boolean54 = student27.borrowItem((team_001.Item) virtualBook49);
        client19.returnItem((team_001.Item) virtualBook49);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        team_001.Student student63 = new team_001.Student("", "", "hi!", strList61);
        team_001.VirtualBook virtualBook66 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int67 = student63.checkOverdue((team_001.Item) virtualBook66);
        boolean boolean68 = libraryFacade2.borrowItem(client19, (team_001.Item) virtualBook66);
        team_001.Library library69 = libraryFacade2.getLibrary();
        team_001.Faculty faculty74 = new team_001.Faculty("", "hi!", "hi!");
        java.util.ArrayList<java.lang.String> strList75 = faculty74.getCourses();
        libraryFacade2.bookKeeping("hi!", strList75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "" + "'", str44.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "hi!" + "'", str53.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList75);
    }

    @Test
    public void test540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test540");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildNonFacultyStaff();
        team_001.CD cD9 = new team_001.CD("", "");
        java.lang.Boolean boolean10 = client6.isBorrowed((team_001.Item) cD9);
        cD9.ID = 1769;
        int int13 = cD9.ID;
        int int14 = cD9.getID();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1769 + "'", int13 == 1769);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1769 + "'", int14 == 1769);
    }

    @Test
    public void test541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test541");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        java.lang.String str48 = userBuilder47.password;
        team_001.Library library49 = userBuilder47.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library49);
    }

    @Test
    public void test542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test542");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        libraryFacade2.bookKeeping("", strList27);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap31 = libraryFacade2.getInventory();
        team_001.UserBuilder userBuilder32 = new team_001.UserBuilder();
        team_001.Client client33 = userBuilder32.buildVisitor();
        java.lang.String str34 = userBuilder32.password;
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        team_001.LibraryFacade libraryFacade47 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        libraryFacade47.bookKeeping("hi!", strList51);
        libraryFacade37.bookKeeping("", strList51);
        team_001.Library library55 = libraryFacade37.getLibrary();
        team_001.UserBuilder userBuilder56 = userBuilder32.setLibrary(library55);
        team_001.Client client57 = userBuilder32.buildVisitor();
        java.lang.String str58 = userBuilder32.password;
        team_001.Client client59 = userBuilder32.buildVisitor();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap60 = client59.borrowed;
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        team_001.Student student68 = new team_001.Student("", "", "hi!", strList66);
        student68.setEmail("hi!");
        team_001.Magazine magazine73 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean74 = student68.isBorrowed((team_001.Item) magazine73);
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        team_001.Student student82 = new team_001.Student("", "", "hi!", strList80);
        team_001.VirtualBook virtualBook85 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int86 = student82.checkOverdue((team_001.Item) virtualBook85);
        java.lang.Boolean boolean87 = student68.isBorrowed((team_001.Item) virtualBook85);
        java.lang.String str88 = virtualBook85.getTitle();
        int int89 = virtualBook85.getID();
        libraryFacade2.returnItem(client59, (team_001.Item) virtualBook85);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap91 = libraryFacade2.getInventory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str88 + "' != '" + "hi!" + "'", str88.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 16707 + "'", int89 == 16707);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap91);
    }

    @Test
    public void test543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test543");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Client client27 = userBuilder26.buildStudent();
        client27.setPassword("");
        client27.setUsername("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
    }

    @Test
    public void test544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test544");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.Client client3 = userBuilder0.buildFaculty();
        team_001.Client client4 = userBuilder0.buildNonFacultyStaff();
        userBuilder0.password = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
    }

    @Test
    public void test545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test545");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildStudent();
        java.lang.String str2 = userBuilder0.email;
        team_001.Client client3 = userBuilder0.buildStudent();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
    }

    @Test
    public void test546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test546");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.UserBuilder userBuilder30 = userBuilder23.setUsername("");
        team_001.UserBuilder userBuilder32 = userBuilder23.setUsername("");
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder34 = userBuilder23.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder32);
    }

    @Test
    public void test547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test547");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.Client client48 = userBuilder47.buildNonFacultyStaff();
        team_001.Client client49 = userBuilder47.buildNonFacultyStaff();
        client49.setEmail("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client49);
    }

    @Test
    public void test548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test548");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        java.lang.String str48 = userBuilder47.email;
        team_001.UserBuilder userBuilder50 = userBuilder47.setUsername("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder50);
    }

    @Test
    public void test549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test549");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildNonFacultyStaff();
        team_001.CD cD9 = new team_001.CD("", "");
        java.lang.Boolean boolean10 = client6.isBorrowed((team_001.Item) cD9);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap11 = client6.borrowed;
        team_001.BorrowedIterator borrowedIterator12 = new team_001.BorrowedIterator(itemMap11);
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator12.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap11);
    }

    @Test
    public void test550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test550");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setPassword("");
        int int10 = student7.getId();
        java.lang.String str11 = student7.getPassword();
        student7.setUsername("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1608 + "'", int10 == 1608);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
    }

    @Test
    public void test551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test551");
        team_001.Faculty faculty3 = new team_001.Faculty("", "", "");
        java.util.ArrayList<java.lang.String> strList4 = faculty3.getCourses();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test552");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.lang.String str8 = student7.getEmail();
        student7.setUsername("hi!");
        student7.setPassword("");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        team_001.Student student20 = new team_001.Student("", "", "hi!", strList18);
        team_001.Magazine magazine23 = new team_001.Magazine("", "hi!");
        student20.returnItem((team_001.Item) magazine23);
        java.lang.String str25 = student20.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap26 = null;
        student20.borrowed = itemMap26;
        java.lang.String str28 = student20.getPassword();
        team_001.visitor visitor32 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter35 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str36 = newsletter35.getTitle();
        visitor32.subscribe(newsletter35);
        student20.subscribe(newsletter35);
        student7.unsubscribe(newsletter35);
        student7.setUsername("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "" + "'", str25.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "" + "'", str36.equals(""));
    }

    @Test
    public void test553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test553");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        libraryFacade2.bookKeeping("", strList27);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap31 = libraryFacade2.getInventory();
        team_001.LibraryFacade libraryFacade34 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        libraryFacade34.bookKeeping("hi!", strList38);
        team_001.visitor visitor44 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine47 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean48 = libraryFacade34.borrowItem((team_001.Client) visitor44, (team_001.Item) magazine47);
        visitor44.setPassword("hi!");
        team_001.LibraryFacade libraryFacade53 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        libraryFacade53.bookKeeping("hi!", strList57);
        team_001.LibraryFacade libraryFacade63 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        libraryFacade63.bookKeeping("hi!", strList67);
        libraryFacade53.bookKeeping("", strList67);
        team_001.Library library71 = libraryFacade53.getLibrary();
        team_001.Library library72 = libraryFacade53.getLibrary();
        team_001.Faculty faculty76 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook79 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean80 = libraryFacade53.borrowItem((team_001.Client) faculty76, (team_001.Item) virtualBook79);
        int int81 = libraryFacade2.checkOverdue((team_001.Client) visitor44, (team_001.Item) virtualBook79);
        java.util.ArrayList<java.lang.String> strList83 = null;
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.bookKeeping("hi!", strList83);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.iterator()\" because \"list\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test554");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        team_001.Student student29 = new team_001.Student("", "", "hi!", strList27);
        student29.setEmail("hi!");
        student29.setEmail("hi!");
        team_001.PhysicalBook physicalBook36 = new team_001.PhysicalBook("", "hi!");
        boolean boolean37 = libraryFacade2.borrowItem((team_001.Client) student29, (team_001.Item) physicalBook36);
        java.lang.Object obj38 = physicalBook36.clone();
        java.lang.Object obj39 = physicalBook36.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj39);
    }

    @Test
    public void test555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test555");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap22 = libraryFacade2.getInventory();
        team_001.visitor visitor26 = new team_001.visitor("", "hi!", "");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        team_001.Student student34 = new team_001.Student("", "", "hi!", strList32);
        team_001.VirtualBook virtualBook37 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int38 = student34.checkOverdue((team_001.Item) virtualBook37);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        team_001.Student student46 = new team_001.Student("", "", "hi!", strList44);
        team_001.VirtualBook virtualBook49 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int50 = student46.checkOverdue((team_001.Item) virtualBook49);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap51 = student46.borrowed;
        team_001.BorrowedIterator borrowedIterator52 = new team_001.BorrowedIterator(itemMap51);
        student34.borrowed = itemMap51;
        visitor26.setBorrowed(itemMap51);
        team_001.PhysicalBook physicalBook57 = team_001.ItemFactory.createPhysicalBook("", "");
        int int58 = physicalBook57.ID;
        libraryFacade2.returnItem((team_001.Client) visitor26, (team_001.Item) physicalBook57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook57);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 16963 + "'", int58 == 16963);
    }

    @Test
    public void test556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test556");
        team_001.NonFacultyStaff nonFacultyStaff3 = new team_001.NonFacultyStaff("", "", "");
    }

    @Test
    public void test557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test557");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        team_001.Student student27 = new team_001.Student("", "hi!", "hi!", strList25);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        team_001.visitor visitor40 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine43 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean44 = libraryFacade30.borrowItem((team_001.Client) visitor40, (team_001.Item) magazine43);
        visitor40.setPassword("hi!");
        java.lang.String str47 = visitor40.getEmail();
        team_001.CD cD50 = new team_001.CD("hi!", "");
        java.lang.Boolean boolean51 = visitor40.isBorrowed((team_001.Item) cD50);
        libraryFacade2.returnItem((team_001.Client) student27, (team_001.Item) cD50);
        team_001.LibraryFacade libraryFacade62 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        libraryFacade62.bookKeeping("hi!", strList66);
        team_001.LibraryFacade libraryFacade72 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray75 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        libraryFacade72.bookKeeping("hi!", strList76);
        libraryFacade62.bookKeeping("", strList76);
        team_001.Student student80 = new team_001.Student("hi!", "", "hi!", strList76);
        team_001.Student student81 = new team_001.Student("hi!", "", "hi!", strList76);
        libraryFacade2.bookKeeping("", strList76);
        java.lang.String[] strArray88 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList89 = new java.util.ArrayList<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList89, strArray88);
        team_001.Student student91 = new team_001.Student("", "", "hi!", strList89);
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("", strList89);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "hi!" + "'", str47.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test558");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder0.buildVisitor();
        java.lang.String str25 = client24.getEmail();
        int int26 = client24.getId();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap27 = client24.getSubcribed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1646 + "'", int26 == 1646);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap27);
    }

    @Test
    public void test559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test559");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.LibraryFacade libraryFacade31 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        libraryFacade31.bookKeeping("hi!", strList35);
        team_001.visitor visitor41 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine44 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean45 = libraryFacade31.borrowItem((team_001.Client) visitor41, (team_001.Item) magazine44);
        java.lang.Boolean boolean46 = client28.isBorrowed((team_001.Item) magazine44);
        team_001.LibraryFacade libraryFacade49 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        team_001.Student student57 = new team_001.Student("", "", "hi!", strList55);
        team_001.Magazine magazine60 = new team_001.Magazine("", "hi!");
        student57.returnItem((team_001.Item) magazine60);
        java.lang.String str62 = student57.getEmail();
        team_001.CD cD65 = new team_001.CD("", "");
        boolean boolean66 = libraryFacade49.borrowItem((team_001.Client) student57, (team_001.Item) cD65);
        java.lang.String str67 = cD65.getAuthor();
        java.lang.String str68 = cD65.getAuthor();
        java.lang.Boolean boolean69 = client28.isBorrowed((team_001.Item) cD65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "" + "'", str62.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "" + "'", str67.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "" + "'", str68.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69.equals(false));
    }

    @Test
    public void test560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test560");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.lang.String str8 = student7.getEmail();
        student7.setUsername("hi!");
        java.lang.String str11 = student7.getPassword();
        int int12 = student7.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!" + "'", str11.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1652 + "'", int12 == 1652);
    }

    @Test
    public void test561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test561");
        team_001.LibraryFacade libraryFacade8 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        libraryFacade8.bookKeeping("hi!", strList12);
        team_001.LibraryFacade libraryFacade18 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        libraryFacade18.bookKeeping("hi!", strList22);
        libraryFacade8.bookKeeping("", strList22);
        team_001.Student student26 = new team_001.Student("hi!", "", "hi!", strList22);
        team_001.Student student27 = new team_001.Student("hi!", "", "hi!", strList22);
        team_001.UserBuilder userBuilder28 = new team_001.UserBuilder();
        team_001.Client client29 = userBuilder28.buildVisitor();
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        libraryFacade42.bookKeeping("hi!", strList46);
        libraryFacade32.bookKeeping("", strList46);
        team_001.Library library50 = libraryFacade32.getLibrary();
        team_001.UserBuilder userBuilder51 = userBuilder28.setLibrary(library50);
        team_001.Client client52 = userBuilder51.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder54 = userBuilder51.setPassword("hi!");
        team_001.Library library55 = userBuilder51.lib;
        team_001.Client client56 = userBuilder51.buildStudent();
        team_001.Newsletter newsletter59 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str60 = newsletter59.getTitle();
        java.lang.String str61 = newsletter59.getAuthor();
        client56.unsubscribe(newsletter59);
        student27.returnItem((team_001.Item) newsletter59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str60 + "' != '" + "" + "'", str60.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "hi!" + "'", str61.equals("hi!"));
    }

    @Test
    public void test562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test562");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.UserBuilder userBuilder24 = new team_001.UserBuilder();
        team_001.Client client25 = userBuilder24.buildVisitor();
        team_001.LibraryFacade libraryFacade28 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        libraryFacade28.bookKeeping("hi!", strList32);
        team_001.LibraryFacade libraryFacade38 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        libraryFacade38.bookKeeping("hi!", strList42);
        libraryFacade28.bookKeeping("", strList42);
        team_001.Library library46 = libraryFacade28.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.Client client48 = userBuilder47.buildNonFacultyStaff();
        team_001.Library library49 = userBuilder47.lib;
        java.lang.String str50 = userBuilder47.email;
        team_001.UserBuilder userBuilder51 = new team_001.UserBuilder();
        team_001.Client client52 = userBuilder51.buildVisitor();
        team_001.UserBuilder userBuilder54 = userBuilder51.setPassword("hi!");
        userBuilder51.password = "hi!";
        java.lang.String str57 = userBuilder51.password;
        team_001.Client client58 = userBuilder51.buildNonFacultyStaff();
        team_001.LibraryFacade libraryFacade61 = new team_001.LibraryFacade("", "");
        team_001.Library library62 = libraryFacade61.getLibrary();
        userBuilder51.lib = library62;
        team_001.UserBuilder userBuilder64 = userBuilder47.setLibrary(library62);
        team_001.UserBuilder userBuilder65 = new team_001.UserBuilder();
        team_001.Client client66 = userBuilder65.buildVisitor();
        java.lang.String str67 = userBuilder65.password;
        team_001.LibraryFacade libraryFacade70 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray73 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        libraryFacade70.bookKeeping("hi!", strList74);
        team_001.LibraryFacade libraryFacade80 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray83 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        libraryFacade80.bookKeeping("hi!", strList84);
        libraryFacade70.bookKeeping("", strList84);
        team_001.Library library88 = libraryFacade70.getLibrary();
        team_001.UserBuilder userBuilder89 = userBuilder65.setLibrary(library88);
        team_001.Client client90 = userBuilder89.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder92 = userBuilder89.setUsername("");
        team_001.Library library93 = userBuilder89.lib;
        userBuilder64.lib = library93;
        userBuilder0.lib = library93;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "hi!" + "'", str57.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library93);
    }

    @Test
    public void test563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test563");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.UserBuilder userBuilder49 = userBuilder24.setPassword("hi!");
        team_001.UserBuilder userBuilder51 = userBuilder24.setPassword("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
    }

    @Test
    public void test564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test564");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.Client client5 = userBuilder0.buildVisitor();
        team_001.Client client6 = userBuilder0.buildFaculty();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        team_001.Student student14 = new team_001.Student("", "", "hi!", strList12);
        java.lang.String str15 = student14.getEmail();
        student14.setUsername("hi!");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int29 = student25.checkOverdue((team_001.Item) virtualBook28);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        team_001.Student student37 = new team_001.Student("", "", "hi!", strList35);
        student37.setEmail("hi!");
        student37.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap42 = student37.borrowed;
        student37.setUsername("");
        team_001.Newsletter newsletter47 = new team_001.Newsletter("hi!", "hi!");
        student37.unsubscribe(newsletter47);
        java.lang.Object obj49 = newsletter47.clone();
        student25.subscribe(newsletter47);
        java.lang.String str51 = newsletter47.getAuthor();
        student14.subscribe(newsletter47);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "", "hi!", strList58);
        student60.setEmail("hi!");
        student60.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap65 = student60.borrowed;
        team_001.BorrowedIterator borrowedIterator66 = new team_001.BorrowedIterator(itemMap65);
        student14.setBorrowed(itemMap65);
        client6.setBorrowed(itemMap65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "hi!" + "'", str51.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap65);
    }

    @Test
    public void test565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test565");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        userBuilder15.password = "";
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        userBuilder15.lib = library39;
        team_001.Client client41 = userBuilder15.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder43 = userBuilder15.setUsername("");
        team_001.Client client44 = userBuilder43.buildVisitor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client44);
    }

    @Test
    public void test566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test566");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        libraryFacade2.bookKeeping("hi!", strList9);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap13 = libraryFacade2.getInventory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap13);
    }

    @Test
    public void test567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test567");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        student10.setEmail("hi!");
        team_001.Magazine magazine15 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean16 = student10.isBorrowed((team_001.Item) magazine15);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int28 = student24.checkOverdue((team_001.Item) virtualBook27);
        java.lang.Boolean boolean29 = student10.isBorrowed((team_001.Item) virtualBook27);
        student10.setPassword("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap32 = student10.borrowed;
        team_001.Item item33 = null;
        int int34 = libraryFacade2.checkOverdue((team_001.Client) student10, item33);
        team_001.UserBuilder userBuilder35 = new team_001.UserBuilder();
        team_001.Client client36 = userBuilder35.buildVisitor();
        team_001.LibraryFacade libraryFacade39 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        libraryFacade39.bookKeeping("hi!", strList43);
        team_001.LibraryFacade libraryFacade49 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        libraryFacade49.bookKeeping("hi!", strList53);
        libraryFacade39.bookKeeping("", strList53);
        team_001.Library library57 = libraryFacade39.getLibrary();
        team_001.UserBuilder userBuilder58 = userBuilder35.setLibrary(library57);
        team_001.Client client59 = userBuilder58.buildStudent();
        team_001.visitor visitor63 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter66 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str67 = newsletter66.getTitle();
        visitor63.subscribe(newsletter66);
        int int69 = libraryFacade2.checkOverdue(client59, (team_001.Item) newsletter66);
        java.lang.Class<?> wildcardClass70 = newsletter66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "" + "'", str67.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test568");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setUsername("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test569");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setUsername("hi!");
        team_001.UserBuilder userBuilder28 = userBuilder26.setUsername("");
        team_001.LibraryFacade libraryFacade31 = new team_001.LibraryFacade("", "");
        team_001.Library library32 = libraryFacade31.getLibrary();
        team_001.UserBuilder userBuilder33 = userBuilder26.setLibrary(library32);
        team_001.Library library34 = userBuilder26.lib;
        java.lang.String str35 = userBuilder26.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test570");
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.Library library12 = libraryFacade5.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap13 = libraryFacade5.getInventory();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        team_001.Student student21 = new team_001.Student("", "", "hi!", strList19);
        java.lang.String str22 = student21.getEmail();
        student21.setUsername("hi!");
        student21.setPassword("");
        team_001.VirtualBook virtualBook29 = new team_001.VirtualBook("hi!", "");
        int int30 = libraryFacade5.checkOverdue((team_001.Client) student21, (team_001.Item) virtualBook29);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap31 = libraryFacade5.getInventory();
        team_001.Faculty faculty36 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter39 = new team_001.Newsletter("hi!", "");
        faculty36.subscribe(newsletter39);
        java.util.ArrayList<java.lang.String> strList41 = faculty36.getCourses();
        java.util.ArrayList<java.lang.String> strList42 = faculty36.getCourses();
        libraryFacade5.bookKeeping("hi!", strList42);
        team_001.Student student44 = new team_001.Student("hi!", "", "hi!", strList42);
        team_001.Newsletter newsletter47 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str48 = newsletter47.getTitle();
        java.lang.String str49 = newsletter47.getAuthor();
        student44.unsubscribe(newsletter47);
        student44.setPassword("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "" + "'", str22.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "" + "'", str48.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "hi!" + "'", str49.equals("hi!"));
    }

    @Test
    public void test571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test571");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        team_001.Student student29 = new team_001.Student("", "", "hi!", strList27);
        student29.setEmail("hi!");
        student29.setEmail("hi!");
        team_001.PhysicalBook physicalBook36 = new team_001.PhysicalBook("", "hi!");
        boolean boolean37 = libraryFacade2.borrowItem((team_001.Client) student29, (team_001.Item) physicalBook36);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap38 = libraryFacade2.getInventory();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap39 = libraryFacade2.getInventory();
        team_001.UserBuilder userBuilder40 = new team_001.UserBuilder();
        team_001.Client client41 = userBuilder40.buildVisitor();
        team_001.Client client42 = userBuilder40.buildNonFacultyStaff();
        team_001.Client client43 = userBuilder40.buildVisitor();
        java.lang.String str44 = userBuilder40.email;
        team_001.Client client45 = userBuilder40.buildFaculty();
        team_001.UserBuilder userBuilder46 = new team_001.UserBuilder();
        team_001.Client client47 = userBuilder46.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap48 = client47.getSubcribed();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        team_001.Student student56 = new team_001.Student("", "", "hi!", strList54);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap57 = student56.getSubcribed();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        team_001.Student student65 = new team_001.Student("", "", "hi!", strList63);
        student65.setEmail("hi!");
        team_001.Magazine magazine70 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean71 = student65.isBorrowed((team_001.Item) magazine70);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        team_001.Student student79 = new team_001.Student("", "", "hi!", strList77);
        team_001.VirtualBook virtualBook82 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int83 = student79.checkOverdue((team_001.Item) virtualBook82);
        java.lang.Boolean boolean84 = student65.isBorrowed((team_001.Item) virtualBook82);
        java.lang.String str85 = virtualBook82.getTitle();
        student56.returnItem((team_001.Item) virtualBook82);
        virtualBook82.ID = 10;
        java.lang.Boolean boolean89 = client47.isBorrowed((team_001.Item) virtualBook82);
        int int90 = client45.checkOverdue((team_001.Item) virtualBook82);
        client45.setEmail("");
        team_001.CD cD95 = new team_001.CD("hi!", "hi!");
        boolean boolean96 = libraryFacade2.borrowItem(client45, (team_001.Item) cD95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str85 + "' != '" + "hi!" + "'", str85.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test572");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        team_001.Student student15 = new team_001.Student("", "", "hi!", strList13);
        student15.setEmail("hi!");
        team_001.Magazine magazine20 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean21 = student15.isBorrowed((team_001.Item) magazine20);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        team_001.Student student29 = new team_001.Student("", "", "hi!", strList27);
        team_001.VirtualBook virtualBook32 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int33 = student29.checkOverdue((team_001.Item) virtualBook32);
        java.lang.Boolean boolean34 = student15.isBorrowed((team_001.Item) virtualBook32);
        java.lang.String str35 = virtualBook32.getTitle();
        int int36 = virtualBook32.getID();
        student7.returnItem((team_001.Item) virtualBook32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "hi!" + "'", str35.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 17429 + "'", int36 == 17429);
    }

    @Test
    public void test573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test573");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap14 = student9.borrowed;
        team_001.BorrowedIterator borrowedIterator15 = new team_001.BorrowedIterator(itemMap14);
        java.util.ArrayList<team_001.Item> itemList16 = client1.checkItemsOverdue(borrowedIterator15);
        team_001.Magazine magazine19 = new team_001.Magazine("hi!", "");
        int int20 = client1.checkOverdue((team_001.Item) magazine19);
        team_001.CD cD23 = team_001.ItemFactory.createCD("", "hi!");
        boolean boolean24 = client1.borrowItem((team_001.Item) cD23);
        client1.setUsername("");
        java.lang.String str27 = client1.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test574");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        userBuilder15.password = "";
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        userBuilder15.lib = library39;
        team_001.LibraryFacade libraryFacade43 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        libraryFacade43.bookKeeping("hi!", strList47);
        team_001.LibraryFacade libraryFacade53 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        libraryFacade53.bookKeeping("hi!", strList57);
        libraryFacade43.bookKeeping("", strList57);
        team_001.Library library61 = libraryFacade43.getLibrary();
        team_001.Library library62 = libraryFacade43.getLibrary();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        team_001.Student student70 = new team_001.Student("", "", "hi!", strList68);
        student70.setEmail("hi!");
        student70.setEmail("hi!");
        team_001.PhysicalBook physicalBook77 = new team_001.PhysicalBook("", "hi!");
        boolean boolean78 = libraryFacade43.borrowItem((team_001.Client) student70, (team_001.Item) physicalBook77);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap79 = libraryFacade43.getInventory();
        team_001.Library library80 = libraryFacade43.getLibrary();
        userBuilder15.lib = library80;
        team_001.UserBuilder userBuilder83 = userBuilder15.setUsername("");
        userBuilder15.email = "";
        userBuilder15.password = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder83);
    }

    @Test
    public void test575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test575");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Library library2 = null;
        team_001.UserBuilder userBuilder3 = userBuilder0.setLibrary(library2);
        java.lang.String str4 = userBuilder0.email;
        team_001.Client client5 = userBuilder0.buildFaculty();
        int int6 = client5.getId();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap7 = client5.getSubcribed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1724 + "'", int6 == 1724);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap7);
    }

    @Test
    public void test576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test576");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        java.lang.String str25 = userBuilder24.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test577");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        java.lang.String str6 = userManagement1.getType("");
        team_001.Client client11 = userManagement1.writeUser("", "", "hi!", "");
        java.lang.String str13 = userManagement1.getType("");
        boolean boolean16 = userManagement1.readUsers("", "");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test578");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        java.lang.String str48 = userBuilder47.password;
        java.lang.String str49 = userBuilder47.email;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test579");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap10 = libraryFacade2.getInventory();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        java.lang.String str19 = student18.getEmail();
        student18.setUsername("hi!");
        student18.setPassword("");
        team_001.VirtualBook virtualBook26 = new team_001.VirtualBook("hi!", "");
        int int27 = libraryFacade2.checkOverdue((team_001.Client) student18, (team_001.Item) virtualBook26);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap28 = libraryFacade2.getInventory();
        team_001.Faculty faculty33 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter36 = new team_001.Newsletter("hi!", "");
        faculty33.subscribe(newsletter36);
        java.util.ArrayList<java.lang.String> strList38 = faculty33.getCourses();
        java.util.ArrayList<java.lang.String> strList39 = faculty33.getCourses();
        libraryFacade2.bookKeeping("hi!", strList39);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        team_001.Student student49 = new team_001.Student("", "", "hi!", strList47);
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("", strList47);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "" + "'", str19.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test580");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Client client27 = userBuilder23.buildNonFacultyStaff();
        team_001.Client client28 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder30 = userBuilder23.setPassword("hi!");
        team_001.Library library31 = userBuilder30.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library31);
    }

    @Test
    public void test581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test581");
        team_001.VirtualBook virtualBook2 = team_001.ItemFactory.createVirtualBook("hi!", "");
        java.lang.String str3 = virtualBook2.getTitle();
        java.lang.String str4 = virtualBook2.getTitle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!" + "'", str3.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
    }

    @Test
    public void test582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test582");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        student7.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = student7.borrowed;
        java.lang.String str13 = student7.getEmail();
        java.lang.String str14 = student7.getUsername();
        int int15 = student7.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!" + "'", str13.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1743 + "'", int15 == 1743);
    }

    @Test
    public void test583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test583");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        team_001.Client client3 = userBuilder0.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap4 = client3.getSubcribed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap4);
    }

    @Test
    public void test584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test584");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap10 = libraryFacade2.getInventory();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        java.lang.String str19 = student18.getEmail();
        student18.setUsername("hi!");
        student18.setPassword("");
        team_001.VirtualBook virtualBook26 = new team_001.VirtualBook("hi!", "");
        int int27 = libraryFacade2.checkOverdue((team_001.Client) student18, (team_001.Item) virtualBook26);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        team_001.Student student35 = new team_001.Student("", "", "hi!", strList33);
        team_001.VirtualBook virtualBook38 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int39 = student35.checkOverdue((team_001.Item) virtualBook38);
        int int40 = student35.getId();
        student35.setUsername("");
        team_001.LibraryFacade libraryFacade45 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        team_001.Magazine magazine56 = new team_001.Magazine("", "hi!");
        student53.returnItem((team_001.Item) magazine56);
        java.lang.String str58 = student53.getEmail();
        team_001.CD cD61 = new team_001.CD("", "");
        boolean boolean62 = libraryFacade45.borrowItem((team_001.Client) student53, (team_001.Item) cD61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        team_001.Student student70 = new team_001.Student("", "", "hi!", strList68);
        student70.setEmail("hi!");
        team_001.Magazine magazine75 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean76 = student70.isBorrowed((team_001.Item) magazine75);
        boolean boolean77 = student53.borrowItem((team_001.Item) magazine75);
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        team_001.Student student85 = new team_001.Student("", "", "hi!", strList83);
        team_001.VirtualBook virtualBook88 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int89 = student85.checkOverdue((team_001.Item) virtualBook88);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap90 = student85.borrowed;
        team_001.BorrowedIterator borrowedIterator91 = new team_001.BorrowedIterator(itemMap90);
        student53.borrowed = itemMap90;
        student35.borrowed = itemMap90;
        student18.setBorrowed(itemMap90);
        team_001.BorrowedIterator borrowedIterator95 = new team_001.BorrowedIterator(itemMap90);
        boolean boolean96 = borrowedIterator95.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "" + "'", str19.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1748 + "'", int40 == 1748);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "" + "'", str58.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test585");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        team_001.Client client3 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade6 = new team_001.LibraryFacade("", "");
        team_001.Library library7 = libraryFacade6.getLibrary();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        team_001.Student student15 = new team_001.Student("", "", "hi!", strList13);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap16 = student15.getSubcribed();
        team_001.CD cD19 = team_001.ItemFactory.createCD("hi!", "");
        student15.returnItem((team_001.Item) cD19);
        student15.setEmail("hi!");
        team_001.Faculty faculty26 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter29 = new team_001.Newsletter("hi!", "");
        faculty26.subscribe(newsletter29);
        team_001.PhysicalBook physicalBook33 = new team_001.PhysicalBook("", "");
        faculty26.returnItem((team_001.Item) physicalBook33);
        libraryFacade6.returnItem((team_001.Client) student15, (team_001.Item) physicalBook33);
        boolean boolean36 = client3.borrowItem((team_001.Item) physicalBook33);
        java.lang.String str37 = client3.getUsername();
        team_001.LibraryFacade libraryFacade40 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        team_001.Magazine magazine51 = new team_001.Magazine("", "hi!");
        student48.returnItem((team_001.Item) magazine51);
        java.lang.String str53 = student48.getEmail();
        student48.setPassword("");
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        team_001.Student student63 = new team_001.Student("", "", "hi!", strList61);
        team_001.Magazine magazine66 = new team_001.Magazine("", "hi!");
        student63.returnItem((team_001.Item) magazine66);
        java.lang.String str68 = student63.getEmail();
        student63.setPassword("");
        team_001.VirtualBook virtualBook73 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook73.ID = '4';
        int int76 = student63.checkOverdue((team_001.Item) virtualBook73);
        java.lang.String str77 = virtualBook73.getTitle();
        int int78 = libraryFacade40.checkOverdue((team_001.Client) student48, (team_001.Item) virtualBook73);
        team_001.Magazine magazine81 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean82 = student48.borrowItem((team_001.Item) magazine81);
        team_001.Newsletter newsletter85 = new team_001.Newsletter("hi!", "");
        student48.unsubscribe(newsletter85);
        java.lang.Boolean boolean87 = client3.isBorrowed((team_001.Item) newsletter85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "" + "'", str53.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "" + "'", str68.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str77 + "' != '" + "hi!" + "'", str77.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87.equals(false));
    }

    @Test
    public void test586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test586");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "");
        team_001.Library library3 = libraryFacade2.getLibrary();
        team_001.UserBuilder userBuilder4 = new team_001.UserBuilder();
        team_001.Client client5 = userBuilder4.buildVisitor();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        team_001.Student student13 = new team_001.Student("", "", "hi!", strList11);
        team_001.VirtualBook virtualBook16 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int17 = student13.checkOverdue((team_001.Item) virtualBook16);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        student25.setEmail("hi!");
        student25.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap30 = student25.borrowed;
        student25.setUsername("");
        team_001.Newsletter newsletter35 = new team_001.Newsletter("hi!", "hi!");
        student25.unsubscribe(newsletter35);
        java.lang.Object obj37 = newsletter35.clone();
        student13.subscribe(newsletter35);
        client5.unsubscribe(newsletter35);
        java.lang.String str40 = client5.getUsername();
        team_001.visitor visitor44 = new team_001.visitor("", "", "");
        team_001.LibraryFacade libraryFacade47 = new team_001.LibraryFacade("hi!", "");
        team_001.Faculty faculty51 = new team_001.Faculty("", "", "hi!");
        team_001.visitor visitor55 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter58 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str59 = newsletter58.getTitle();
        visitor55.subscribe(newsletter58);
        boolean boolean61 = libraryFacade47.borrowItem((team_001.Client) faculty51, (team_001.Item) newsletter58);
        visitor44.returnItem((team_001.Item) newsletter58);
        java.lang.Object obj63 = newsletter58.clone();
        libraryFacade2.returnItem(client5, (team_001.Item) newsletter58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "" + "'", str59.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj63);
    }

    @Test
    public void test587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test587");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "");
        team_001.Faculty faculty6 = new team_001.Faculty("", "", "hi!");
        team_001.visitor visitor10 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter13 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str14 = newsletter13.getTitle();
        visitor10.subscribe(newsletter13);
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) faculty6, (team_001.Item) newsletter13);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap17 = libraryFacade2.getInventory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap17);
    }

    @Test
    public void test588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test588");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        student7.setEmail("");
        student7.setId(1724);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test589");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        libraryFacade2.bookKeeping("", strList27);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap31 = libraryFacade2.getInventory();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        team_001.VirtualBook virtualBook42 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int43 = student39.checkOverdue((team_001.Item) virtualBook42);
        int int44 = student39.getId();
        student39.setUsername("hi!");
        team_001.LibraryFacade libraryFacade49 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        libraryFacade49.bookKeeping("hi!", strList53);
        team_001.LibraryFacade libraryFacade59 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        libraryFacade59.bookKeeping("hi!", strList63);
        libraryFacade49.bookKeeping("", strList63);
        team_001.Library library67 = libraryFacade49.getLibrary();
        team_001.Library library68 = libraryFacade49.getLibrary();
        team_001.Faculty faculty72 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook75 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean76 = libraryFacade49.borrowItem((team_001.Client) faculty72, (team_001.Item) virtualBook75);
        java.util.ArrayList<java.lang.String> strList77 = faculty72.getCourses();
        team_001.LibraryFacade libraryFacade80 = new team_001.LibraryFacade("hi!", "");
        team_001.Faculty faculty84 = new team_001.Faculty("", "", "hi!");
        team_001.visitor visitor88 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter91 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str92 = newsletter91.getTitle();
        visitor88.subscribe(newsletter91);
        boolean boolean94 = libraryFacade80.borrowItem((team_001.Client) faculty84, (team_001.Item) newsletter91);
        int int95 = faculty72.checkOverdue((team_001.Item) newsletter91);
        int int96 = libraryFacade2.checkOverdue((team_001.Client) student39, (team_001.Item) newsletter91);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap97 = student39.getSubcribed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1776 + "'", int44 == 1776);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str92 + "' != '" + "" + "'", str92.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap97);
    }

    @Test
    public void test590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test590");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.Library library25 = userBuilder23.lib;
        java.lang.String str26 = userBuilder23.email;
        team_001.UserBuilder userBuilder27 = new team_001.UserBuilder();
        team_001.Client client28 = userBuilder27.buildVisitor();
        java.lang.String str29 = userBuilder27.password;
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        libraryFacade42.bookKeeping("hi!", strList46);
        libraryFacade32.bookKeeping("", strList46);
        team_001.Library library50 = libraryFacade32.getLibrary();
        team_001.UserBuilder userBuilder51 = userBuilder27.setLibrary(library50);
        team_001.Client client52 = userBuilder51.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder54 = userBuilder51.setUsername("");
        team_001.Library library55 = userBuilder51.lib;
        team_001.UserBuilder userBuilder56 = userBuilder23.setLibrary(library55);
        java.lang.String str57 = userBuilder23.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test591");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        libraryFacade2.bookKeeping("hi!", strList9);
        team_001.Faculty faculty16 = new team_001.Faculty("hi!", "hi!", "hi!");
        java.util.ArrayList<java.lang.String> strList17 = faculty16.getCourses();
        java.util.ArrayList<java.lang.String> strList18 = faculty16.getCourses();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        team_001.Student student26 = new team_001.Student("", "", "hi!", strList24);
        team_001.Magazine magazine29 = new team_001.Magazine("", "hi!");
        student26.returnItem((team_001.Item) magazine29);
        java.lang.String str31 = student26.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap32 = null;
        student26.borrowed = itemMap32;
        java.lang.String str34 = student26.getPassword();
        team_001.visitor visitor38 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter41 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str42 = newsletter41.getTitle();
        visitor38.subscribe(newsletter41);
        student26.subscribe(newsletter41);
        int int45 = libraryFacade2.checkOverdue((team_001.Client) faculty16, (team_001.Item) newsletter41);
        int int46 = newsletter41.getID();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "" + "'", str31.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "hi!" + "'", str34.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "" + "'", str42.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 17847 + "'", int46 == 17847);
    }

    @Test
    public void test592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test592");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.Library library25 = userBuilder23.lib;
        team_001.UserBuilder userBuilder27 = userBuilder23.setPassword("hi!");
        team_001.UserBuilder userBuilder29 = userBuilder27.setUsername("");
        java.lang.String str30 = userBuilder29.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "hi!" + "'", str30.equals("hi!"));
    }

    @Test
    public void test593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test593");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap8 = student7.getSubcribed();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap9 = student7.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap9);
    }

    @Test
    public void test594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test594");
        team_001.PhysicalBook physicalBook2 = team_001.ItemFactory.createPhysicalBook("hi!", "");
        int int3 = physicalBook2.getID();
        java.lang.String str4 = physicalBook2.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook2);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 17863 + "'", int3 == 17863);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "" + "'", str4.equals(""));
    }

    @Test
    public void test595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test595");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        team_001.Client client9 = userManagement1.writeUser("", "", "hi!", "hi!");
        boolean boolean12 = userManagement1.readUsers("hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            team_001.Client client17 = userManagement1.writeUser("", "", "", "");
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test596");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        team_001.Student student17 = new team_001.Student("", "", "hi!", strList15);
        team_001.Magazine magazine20 = new team_001.Magazine("", "hi!");
        student17.returnItem((team_001.Item) magazine20);
        java.lang.String str22 = student17.getEmail();
        student17.setPassword("");
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook27.ID = '4';
        int int30 = student17.checkOverdue((team_001.Item) virtualBook27);
        team_001.UserBuilder userBuilder31 = new team_001.UserBuilder();
        team_001.Client client32 = userBuilder31.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap33 = client32.getSubcribed();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        team_001.Student student41 = new team_001.Student("", "", "hi!", strList39);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap42 = student41.getSubcribed();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        team_001.Student student50 = new team_001.Student("", "", "hi!", strList48);
        student50.setEmail("hi!");
        team_001.Magazine magazine55 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean56 = student50.isBorrowed((team_001.Item) magazine55);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        team_001.Student student64 = new team_001.Student("", "", "hi!", strList62);
        team_001.VirtualBook virtualBook67 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int68 = student64.checkOverdue((team_001.Item) virtualBook67);
        java.lang.Boolean boolean69 = student50.isBorrowed((team_001.Item) virtualBook67);
        java.lang.String str70 = virtualBook67.getTitle();
        student41.returnItem((team_001.Item) virtualBook67);
        virtualBook67.ID = 10;
        java.lang.Boolean boolean74 = client32.isBorrowed((team_001.Item) virtualBook67);
        boolean boolean75 = libraryFacade2.borrowItem((team_001.Client) student17, (team_001.Item) virtualBook67);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap76 = libraryFacade2.getInventory();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap77 = libraryFacade2.getInventory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "" + "'", str22.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "hi!" + "'", str70.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap77);
    }

    @Test
    public void test597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test597");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        userBuilder15.password = "";
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        userBuilder15.lib = library39;
        team_001.LibraryFacade libraryFacade43 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        libraryFacade43.bookKeeping("hi!", strList47);
        team_001.LibraryFacade libraryFacade53 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        libraryFacade53.bookKeeping("hi!", strList57);
        libraryFacade43.bookKeeping("", strList57);
        team_001.Library library61 = libraryFacade43.getLibrary();
        team_001.Library library62 = libraryFacade43.getLibrary();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        team_001.Student student70 = new team_001.Student("", "", "hi!", strList68);
        student70.setEmail("hi!");
        student70.setEmail("hi!");
        team_001.PhysicalBook physicalBook77 = new team_001.PhysicalBook("", "hi!");
        boolean boolean78 = libraryFacade43.borrowItem((team_001.Client) student70, (team_001.Item) physicalBook77);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap79 = libraryFacade43.getInventory();
        team_001.Library library80 = libraryFacade43.getLibrary();
        userBuilder15.lib = library80;
        team_001.UserBuilder userBuilder83 = userBuilder15.setUsername("");
        team_001.Client client84 = userBuilder83.buildVisitor();
        team_001.Item item85 = null;
        int int86 = client84.checkOverdue(item85);
        java.lang.String str87 = client84.getUsername();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str87 + "' != '" + "" + "'", str87.equals(""));
    }

    @Test
    public void test598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test598");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        team_001.Magazine magazine51 = new team_001.Magazine("", "hi!");
        student48.returnItem((team_001.Item) magazine51);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "", "hi!", strList58);
        team_001.Magazine magazine63 = new team_001.Magazine("", "hi!");
        student60.returnItem((team_001.Item) magazine63);
        java.lang.String str65 = student60.getEmail();
        student60.setPassword("");
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook70.ID = '4';
        int int73 = student60.checkOverdue((team_001.Item) virtualBook70);
        java.lang.String str74 = virtualBook70.getTitle();
        boolean boolean75 = student48.borrowItem((team_001.Item) virtualBook70);
        student10.returnItem((team_001.Item) virtualBook70);
        java.lang.String str77 = virtualBook70.getAuthor();
        java.lang.String str78 = virtualBook70.getTitle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "hi!" + "'", str74.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str77 + "' != '" + "hi!" + "'", str77.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "hi!" + "'", str78.equals("hi!"));
    }

    @Test
    public void test599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test599");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        java.lang.String str5 = userBuilder0.email;
        team_001.Client client6 = userBuilder0.buildStudent();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
    }

    @Test
    public void test600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test600");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        team_001.Client client9 = userManagement1.writeUser("hi!", "", "", "hi!");
        team_001.Client client14 = userManagement1.writeUser("hi!", "", "", "");
        java.lang.String str16 = userManagement1.getType("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test601");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "");
        team_001.Library library3 = libraryFacade2.getLibrary();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap12 = student11.getSubcribed();
        team_001.CD cD15 = team_001.ItemFactory.createCD("hi!", "");
        student11.returnItem((team_001.Item) cD15);
        student11.setEmail("hi!");
        team_001.Faculty faculty22 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter25 = new team_001.Newsletter("hi!", "");
        faculty22.subscribe(newsletter25);
        team_001.PhysicalBook physicalBook29 = new team_001.PhysicalBook("", "");
        faculty22.returnItem((team_001.Item) physicalBook29);
        libraryFacade2.returnItem((team_001.Client) student11, (team_001.Item) physicalBook29);
        student11.setPassword("hi!");
        java.lang.String str34 = student11.getEmail();
        java.lang.String str35 = student11.getUsername();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "hi!" + "'", str34.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "" + "'", str35.equals(""));
    }

    @Test
    public void test602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test602");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        team_001.Student student27 = new team_001.Student("", "hi!", "hi!", strList25);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        team_001.visitor visitor40 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine43 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean44 = libraryFacade30.borrowItem((team_001.Client) visitor40, (team_001.Item) magazine43);
        visitor40.setPassword("hi!");
        java.lang.String str47 = visitor40.getEmail();
        team_001.CD cD50 = new team_001.CD("hi!", "");
        java.lang.Boolean boolean51 = visitor40.isBorrowed((team_001.Item) cD50);
        libraryFacade2.returnItem((team_001.Client) student27, (team_001.Item) cD50);
        team_001.LibraryFacade libraryFacade62 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        libraryFacade62.bookKeeping("hi!", strList66);
        team_001.LibraryFacade libraryFacade72 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray75 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        libraryFacade72.bookKeeping("hi!", strList76);
        libraryFacade62.bookKeeping("", strList76);
        team_001.Student student80 = new team_001.Student("hi!", "", "hi!", strList76);
        team_001.Student student81 = new team_001.Student("hi!", "", "hi!", strList76);
        libraryFacade2.bookKeeping("", strList76);
        team_001.Library library83 = libraryFacade2.getLibrary();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "hi!" + "'", str47.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library83);
    }

    @Test
    public void test603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test603");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        faculty25.setId((int) (byte) -1);
        java.lang.String str32 = faculty25.getPassword();
        team_001.Newsletter newsletter35 = new team_001.Newsletter("hi!", "hi!");
        faculty25.unsubscribe(newsletter35);
        faculty25.setEmail("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "" + "'", str32.equals(""));
    }

    @Test
    public void test604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test604");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        team_001.Magazine magazine51 = new team_001.Magazine("", "hi!");
        student48.returnItem((team_001.Item) magazine51);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "", "hi!", strList58);
        team_001.Magazine magazine63 = new team_001.Magazine("", "hi!");
        student60.returnItem((team_001.Item) magazine63);
        java.lang.String str65 = student60.getEmail();
        student60.setPassword("");
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook70.ID = '4';
        int int73 = student60.checkOverdue((team_001.Item) virtualBook70);
        java.lang.String str74 = virtualBook70.getTitle();
        boolean boolean75 = student48.borrowItem((team_001.Item) virtualBook70);
        student10.returnItem((team_001.Item) virtualBook70);
        team_001.Newsletter newsletter79 = team_001.ItemFactory.createNewsLetter("", "hi!");
        student10.subscribe(newsletter79);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap81 = student10.borrowed;
        java.lang.String str82 = student10.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "hi!" + "'", str74.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str82 + "' != '" + "" + "'", str82.equals(""));
    }

    @Test
    public void test605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test605");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap8 = student7.getSubcribed();
        student7.setPassword("hi!");
        team_001.LibraryFacade libraryFacade13 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.LibraryFacade libraryFacade16 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.Magazine magazine27 = new team_001.Magazine("", "hi!");
        student24.returnItem((team_001.Item) magazine27);
        java.lang.String str29 = student24.getEmail();
        team_001.CD cD32 = new team_001.CD("", "");
        boolean boolean33 = libraryFacade16.borrowItem((team_001.Client) student24, (team_001.Item) cD32);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        team_001.Student student41 = new team_001.Student("", "", "hi!", strList39);
        student41.setEmail("hi!");
        team_001.Magazine magazine46 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean47 = student41.isBorrowed((team_001.Item) magazine46);
        boolean boolean48 = student24.borrowItem((team_001.Item) magazine46);
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        team_001.Student student56 = new team_001.Student("", "", "hi!", strList54);
        team_001.Magazine magazine59 = new team_001.Magazine("", "hi!");
        student56.returnItem((team_001.Item) magazine59);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        team_001.Student student68 = new team_001.Student("", "", "hi!", strList66);
        team_001.Magazine magazine71 = new team_001.Magazine("", "hi!");
        student68.returnItem((team_001.Item) magazine71);
        java.lang.String str73 = student68.getEmail();
        student68.setPassword("");
        team_001.VirtualBook virtualBook78 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook78.ID = '4';
        int int81 = student68.checkOverdue((team_001.Item) virtualBook78);
        java.lang.String str82 = virtualBook78.getTitle();
        boolean boolean83 = student56.borrowItem((team_001.Item) virtualBook78);
        team_001.Newsletter newsletter86 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean87 = student56.borrowItem((team_001.Item) newsletter86);
        int int88 = newsletter86.ID;
        int int89 = libraryFacade13.checkOverdue((team_001.Client) student24, (team_001.Item) newsletter86);
        student7.subscribe(newsletter86);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap91 = student7.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "" + "'", str29.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str73 + "' != '" + "" + "'", str73.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str82 + "' != '" + "hi!" + "'", str82.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 18093 + "'", int88 == 18093);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap91);
    }

    @Test
    public void test606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test606");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        userBuilder17.email = "hi!";
        team_001.Library library20 = userBuilder17.lib;
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Library library41 = libraryFacade23.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder17.setLibrary(library41);
        userBuilder0.lib = library41;
        team_001.Client client44 = userBuilder0.buildFaculty();
        team_001.UserBuilder userBuilder46 = userBuilder0.setUsername("hi!");
        team_001.UserBuilder userBuilder48 = userBuilder0.setUsername("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder48);
    }

    @Test
    public void test607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test607");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        team_001.Student student27 = new team_001.Student("", "", "hi!", strList25);
        student27.setEmail("hi!");
        team_001.Magazine magazine32 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean33 = student27.isBorrowed((team_001.Item) magazine32);
        boolean boolean34 = student10.borrowItem((team_001.Item) magazine32);
        team_001.Newsletter newsletter37 = team_001.ItemFactory.createNewsLetter("hi!", "hi!");
        boolean boolean38 = student10.borrowItem((team_001.Item) newsletter37);
        team_001.UserBuilder userBuilder39 = new team_001.UserBuilder();
        team_001.Client client40 = userBuilder39.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap41 = client40.getSubcribed();
        team_001.UserBuilder userBuilder42 = new team_001.UserBuilder();
        team_001.Client client43 = userBuilder42.buildVisitor();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        team_001.Student student51 = new team_001.Student("", "", "hi!", strList49);
        team_001.VirtualBook virtualBook54 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int55 = student51.checkOverdue((team_001.Item) virtualBook54);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap56 = student51.borrowed;
        team_001.BorrowedIterator borrowedIterator57 = new team_001.BorrowedIterator(itemMap56);
        java.util.ArrayList<team_001.Item> itemList58 = client43.checkItemsOverdue(borrowedIterator57);
        team_001.Newsletter newsletter61 = new team_001.Newsletter("hi!", "");
        client43.subscribe(newsletter61);
        client40.returnItem((team_001.Item) newsletter61);
        student10.subscribe(newsletter61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList58);
    }

    @Test
    public void test608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test608");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.LibraryFacade libraryFacade9 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        libraryFacade9.bookKeeping("hi!", strList13);
        team_001.LibraryFacade libraryFacade19 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        libraryFacade19.bookKeeping("hi!", strList23);
        libraryFacade9.bookKeeping("", strList23);
        team_001.Library library27 = libraryFacade9.getLibrary();
        team_001.Library library28 = libraryFacade9.getLibrary();
        team_001.Faculty faculty32 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean36 = libraryFacade9.borrowItem((team_001.Client) faculty32, (team_001.Item) virtualBook35);
        java.util.ArrayList<java.lang.String> strList37 = faculty32.getCourses();
        team_001.Student student38 = new team_001.Student("hi!", "hi!", "hi!", strList37);
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("", strList37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList37);
    }

    @Test
    public void test609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test609");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "");
        team_001.LibraryFacade libraryFacade6 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        libraryFacade6.bookKeeping("hi!", strList10);
        team_001.LibraryFacade libraryFacade16 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        libraryFacade16.bookKeeping("hi!", strList20);
        libraryFacade6.bookKeeping("", strList20);
        team_001.Library library24 = libraryFacade6.getLibrary();
        team_001.Library library25 = libraryFacade6.getLibrary();
        team_001.Faculty faculty29 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook32 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean33 = libraryFacade6.borrowItem((team_001.Client) faculty29, (team_001.Item) virtualBook32);
        java.util.ArrayList<java.lang.String> strList34 = faculty29.getCourses();
        java.util.ArrayList<java.lang.String> strList35 = faculty29.getCourses();
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("", strList35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList35);
    }

    @Test
    public void test610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test610");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        visitor12.setPassword("hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        team_001.Student student26 = new team_001.Student("", "", "hi!", strList24);
        team_001.VirtualBook virtualBook29 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int30 = student26.checkOverdue((team_001.Item) virtualBook29);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap31 = student26.borrowed;
        team_001.BorrowedIterator borrowedIterator32 = new team_001.BorrowedIterator(itemMap31);
        team_001.BorrowedIterator borrowedIterator33 = new team_001.BorrowedIterator(itemMap31);
        java.util.ArrayList<team_001.Item> itemList34 = visitor12.checkItemsOverdue(borrowedIterator33);
        java.lang.String str35 = visitor12.getUsername();
        java.lang.String str36 = visitor12.getUsername();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        team_001.Student student44 = new team_001.Student("", "", "hi!", strList42);
        team_001.Newsletter newsletter47 = new team_001.Newsletter("hi!", "hi!");
        int int48 = student44.checkOverdue((team_001.Item) newsletter47);
        int int49 = newsletter47.ID;
        visitor12.unsubscribe(newsletter47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "hi!" + "'", str35.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "hi!" + "'", str36.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 18211 + "'", int49 == 18211);
    }

    @Test
    public void test611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test611");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        team_001.Client client4 = userBuilder3.buildStudent();
        java.lang.String str5 = userBuilder3.password;
        userBuilder3.email = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
    }

    @Test
    public void test612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test612");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = null;
        student7.borrowed = itemMap13;
        java.lang.String str15 = student7.getPassword();
        java.lang.String str16 = student7.getUsername();
        student7.setUsername("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap19 = student7.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(itemMap19);
    }

    @Test
    public void test613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test613");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        java.lang.String str4 = userBuilder3.password;
        userBuilder3.email = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
    }

    @Test
    public void test614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test614");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = null;
        student7.borrowed = itemMap13;
        java.lang.String str15 = student7.getEmail();
        team_001.LibraryFacade libraryFacade18 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        team_001.Student student26 = new team_001.Student("", "", "hi!", strList24);
        team_001.Magazine magazine29 = new team_001.Magazine("", "hi!");
        student26.returnItem((team_001.Item) magazine29);
        java.lang.String str31 = student26.getEmail();
        student26.setPassword("");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        team_001.Student student41 = new team_001.Student("", "", "hi!", strList39);
        team_001.Magazine magazine44 = new team_001.Magazine("", "hi!");
        student41.returnItem((team_001.Item) magazine44);
        java.lang.String str46 = student41.getEmail();
        student41.setPassword("");
        team_001.VirtualBook virtualBook51 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook51.ID = '4';
        int int54 = student41.checkOverdue((team_001.Item) virtualBook51);
        java.lang.String str55 = virtualBook51.getTitle();
        int int56 = libraryFacade18.checkOverdue((team_001.Client) student26, (team_001.Item) virtualBook51);
        team_001.Magazine magazine59 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean60 = student26.borrowItem((team_001.Item) magazine59);
        student26.setPassword("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap63 = student26.borrowed;
        student7.borrowed = itemMap63;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "" + "'", str31.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "" + "'", str46.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str55 + "' != '" + "hi!" + "'", str55.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap63);
    }

    @Test
    public void test615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test615");
        team_001.VirtualBook virtualBook2 = team_001.ItemFactory.createVirtualBook("", "hi!");
        int int3 = virtualBook2.getID();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook2);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 18263 + "'", int3 == 18263);
    }

    @Test
    public void test616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test616");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        team_001.Student student56 = new team_001.Student("", "", "hi!", strList54);
        student56.setEmail("hi!");
        team_001.Magazine magazine61 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean62 = student56.isBorrowed((team_001.Item) magazine61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        team_001.Student student70 = new team_001.Student("", "", "hi!", strList68);
        team_001.VirtualBook virtualBook73 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int74 = student70.checkOverdue((team_001.Item) virtualBook73);
        java.lang.Boolean boolean75 = student56.isBorrowed((team_001.Item) virtualBook73);
        java.lang.String str76 = virtualBook73.getTitle();
        int int77 = virtualBook73.getID();
        virtualBook73.ID = (byte) 1;
        java.lang.Boolean boolean80 = student48.isBorrowed((team_001.Item) virtualBook73);
        int int81 = student10.checkOverdue((team_001.Item) virtualBook73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "hi!" + "'", str76.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 18308 + "'", int77 == 18308);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test617");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        team_001.Student student21 = new team_001.Student("", "", "hi!", strList19);
        student21.setEmail("hi!");
        student21.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap26 = student21.borrowed;
        student21.setUsername("");
        team_001.Newsletter newsletter31 = new team_001.Newsletter("hi!", "hi!");
        student21.unsubscribe(newsletter31);
        java.lang.Object obj33 = newsletter31.clone();
        student9.subscribe(newsletter31);
        client1.unsubscribe(newsletter31);
        team_001.LibraryFacade libraryFacade38 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        team_001.Student student46 = new team_001.Student("", "", "hi!", strList44);
        team_001.Magazine magazine49 = new team_001.Magazine("", "hi!");
        student46.returnItem((team_001.Item) magazine49);
        java.lang.String str51 = student46.getEmail();
        team_001.CD cD54 = new team_001.CD("", "");
        boolean boolean55 = libraryFacade38.borrowItem((team_001.Client) student46, (team_001.Item) cD54);
        team_001.Library library56 = libraryFacade38.getLibrary();
        team_001.Library library57 = libraryFacade38.getLibrary();
        team_001.UserBuilder userBuilder58 = new team_001.UserBuilder();
        team_001.Client client59 = userBuilder58.buildVisitor();
        team_001.LibraryFacade libraryFacade62 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        libraryFacade62.bookKeeping("hi!", strList66);
        team_001.LibraryFacade libraryFacade72 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray75 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        libraryFacade72.bookKeeping("hi!", strList76);
        libraryFacade62.bookKeeping("", strList76);
        team_001.Library library80 = libraryFacade62.getLibrary();
        team_001.UserBuilder userBuilder81 = userBuilder58.setLibrary(library80);
        team_001.Client client82 = userBuilder58.buildVisitor();
        int int83 = client82.getId();
        team_001.CD cD86 = new team_001.CD("hi!", "");
        java.lang.String str87 = cD86.getAuthor();
        java.lang.Object obj88 = cD86.clone();
        boolean boolean89 = libraryFacade38.borrowItem(client82, (team_001.Item) cD86);
        boolean boolean90 = client1.borrowItem((team_001.Item) cD86);
        java.lang.String str91 = client1.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "" + "'", str51.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client82);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1877 + "'", int83 == 1877);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str87 + "' != '" + "" + "'", str87.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test618");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = null;
        student7.borrowed = itemMap13;
        team_001.LibraryFacade libraryFacade17 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        team_001.Student student40 = new team_001.Student("", "", "hi!", strList38);
        team_001.Magazine magazine43 = new team_001.Magazine("", "hi!");
        student40.returnItem((team_001.Item) magazine43);
        java.lang.String str45 = student40.getEmail();
        student40.setPassword("");
        team_001.VirtualBook virtualBook50 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook50.ID = '4';
        int int53 = student40.checkOverdue((team_001.Item) virtualBook50);
        java.lang.String str54 = virtualBook50.getTitle();
        int int55 = libraryFacade17.checkOverdue((team_001.Client) student25, (team_001.Item) virtualBook50);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        team_001.Student student63 = new team_001.Student("", "", "hi!", strList61);
        team_001.Magazine magazine66 = new team_001.Magazine("", "hi!");
        student63.returnItem((team_001.Item) magazine66);
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        team_001.Student student75 = new team_001.Student("", "", "hi!", strList73);
        team_001.Magazine magazine78 = new team_001.Magazine("", "hi!");
        student75.returnItem((team_001.Item) magazine78);
        java.lang.String str80 = student75.getEmail();
        student75.setPassword("");
        team_001.VirtualBook virtualBook85 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook85.ID = '4';
        int int88 = student75.checkOverdue((team_001.Item) virtualBook85);
        java.lang.String str89 = virtualBook85.getTitle();
        boolean boolean90 = student63.borrowItem((team_001.Item) virtualBook85);
        student25.returnItem((team_001.Item) virtualBook85);
        java.lang.String str92 = virtualBook85.getAuthor();
        boolean boolean93 = student7.borrowItem((team_001.Item) virtualBook85);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap94 = student7.borrowed;
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap95 = student7.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "" + "'", str45.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "hi!" + "'", str54.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "" + "'", str80.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str89 + "' != '" + "hi!" + "'", str89.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str92 + "' != '" + "hi!" + "'", str92.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(itemMap94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(itemMap95);
    }

    @Test
    public void test619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test619");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildStudent();
        team_001.Library library7 = userBuilder0.lib;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder9 = userBuilder0.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library7);
    }

    @Test
    public void test620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test620");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        libraryFacade2.bookKeeping("", strList27);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap31 = libraryFacade2.getInventory();
        team_001.Faculty faculty35 = new team_001.Faculty("hi!", "", "");
        team_001.PhysicalBook physicalBook38 = new team_001.PhysicalBook("", "");
        java.lang.String str39 = physicalBook38.getAuthor();
        libraryFacade2.returnItem((team_001.Client) faculty35, (team_001.Item) physicalBook38);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap41 = libraryFacade2.getInventory();
        java.lang.Class<?> wildcardClass42 = intMap41.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "" + "'", str39.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test621");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        // The following exception was thrown during execution in test generation
        try {
            team_001.Client client6 = userManagement1.writeUser("hi!", "hi!", "", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test622");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        team_001.Client client4 = userBuilder3.buildStudent();
        team_001.Library library5 = userBuilder3.lib;
        team_001.LibraryFacade libraryFacade8 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        team_001.Student student16 = new team_001.Student("", "", "hi!", strList14);
        team_001.Magazine magazine19 = new team_001.Magazine("", "hi!");
        student16.returnItem((team_001.Item) magazine19);
        java.lang.String str21 = student16.getEmail();
        team_001.CD cD24 = new team_001.CD("", "");
        boolean boolean25 = libraryFacade8.borrowItem((team_001.Client) student16, (team_001.Item) cD24);
        team_001.Library library26 = libraryFacade8.getLibrary();
        team_001.Library library27 = libraryFacade8.getLibrary();
        userBuilder3.lib = library27;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "" + "'", str21.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
    }

    @Test
    public void test623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test623");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        team_001.Magazine magazine12 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean13 = student7.isBorrowed((team_001.Item) magazine12);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        team_001.Student student21 = new team_001.Student("", "", "hi!", strList19);
        team_001.VirtualBook virtualBook24 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int25 = student21.checkOverdue((team_001.Item) virtualBook24);
        java.lang.Boolean boolean26 = student7.isBorrowed((team_001.Item) virtualBook24);
        student7.setId(9168);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26.equals(false));
    }

    @Test
    public void test624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test624");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter6 = new team_001.Newsletter("hi!", "");
        faculty3.subscribe(newsletter6);
        java.util.ArrayList<java.lang.String> strList8 = faculty3.getCourses();
        java.util.ArrayList<java.lang.String> strList9 = faculty3.getCourses();
        java.lang.String str10 = faculty3.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
    }

    @Test
    public void test625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test625");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter6 = new team_001.Newsletter("hi!", "");
        faculty3.subscribe(newsletter6);
        team_001.PhysicalBook physicalBook10 = new team_001.PhysicalBook("", "");
        faculty3.returnItem((team_001.Item) physicalBook10);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = null;
        faculty3.setBorrowed(itemMap12);
        java.util.ArrayList<java.lang.String> strList14 = faculty3.getCourses();
        int int15 = faculty3.getId();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap16 = faculty3.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1895 + "'", int15 == 1895);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(itemMap16);
    }

    @Test
    public void test626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test626");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.Newsletter newsletter31 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str32 = newsletter31.getTitle();
        java.lang.String str33 = newsletter31.getAuthor();
        client28.unsubscribe(newsletter31);
        int int35 = client28.getId();
        client28.setEmail("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "" + "'", str32.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "hi!" + "'", str33.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1898 + "'", int35 == 1898);
    }

    @Test
    public void test627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test627");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.lang.String str8 = student7.getEmail();
        student7.setUsername("hi!");
        student7.setEmail("hi!");
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap13 = student7.getSubcribed();
        student7.setPassword("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap13);
    }

    @Test
    public void test628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test628");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap2 = client1.getSubcribed();
        team_001.UserBuilder userBuilder3 = new team_001.UserBuilder();
        team_001.Client client4 = userBuilder3.buildVisitor();
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        team_001.Student student12 = new team_001.Student("", "", "hi!", strList10);
        team_001.VirtualBook virtualBook15 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int16 = student12.checkOverdue((team_001.Item) virtualBook15);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap17 = student12.borrowed;
        team_001.BorrowedIterator borrowedIterator18 = new team_001.BorrowedIterator(itemMap17);
        java.util.ArrayList<team_001.Item> itemList19 = client4.checkItemsOverdue(borrowedIterator18);
        team_001.Newsletter newsletter22 = new team_001.Newsletter("hi!", "");
        client4.subscribe(newsletter22);
        client1.returnItem((team_001.Item) newsletter22);
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "");
        java.lang.String str28 = virtualBook27.getTitle();
        int int29 = client1.checkOverdue((team_001.Item) virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test629");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap10 = libraryFacade2.getInventory();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap11 = libraryFacade2.getInventory();
        team_001.LibraryFacade libraryFacade17 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        libraryFacade17.bookKeeping("hi!", strList21);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        libraryFacade17.bookKeeping("", strList31);
        team_001.Library library35 = libraryFacade17.getLibrary();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        team_001.Student student43 = new team_001.Student("", "", "hi!", strList41);
        team_001.Newsletter newsletter46 = new team_001.Newsletter("hi!", "hi!");
        int int47 = student43.checkOverdue((team_001.Item) newsletter46);
        team_001.Magazine magazine50 = team_001.ItemFactory.createMagazine("", "");
        magazine50.ID = 1961;
        boolean boolean53 = libraryFacade17.borrowItem((team_001.Client) student43, (team_001.Item) magazine50);
        team_001.Faculty faculty58 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter61 = new team_001.Newsletter("hi!", "");
        faculty58.subscribe(newsletter61);
        java.util.ArrayList<java.lang.String> strList63 = faculty58.getCourses();
        libraryFacade17.bookKeeping("hi!", strList63);
        team_001.Student student65 = new team_001.Student("", "hi!", "hi!", strList63);
        team_001.VirtualBook virtualBook68 = team_001.ItemFactory.createVirtualBook("hi!", "");
        java.lang.String str69 = virtualBook68.getAuthor();
        int int70 = virtualBook68.ID;
        virtualBook68.ID = 5689;
        virtualBook68.ID = 553;
        int int75 = libraryFacade2.checkOverdue((team_001.Client) student65, (team_001.Item) virtualBook68);
        java.lang.Object obj76 = virtualBook68.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "" + "'", str69.equals(""));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 18559 + "'", int70 == 18559);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj76);
    }

    @Test
    public void test630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test630");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "");
        team_001.Library library3 = libraryFacade2.getLibrary();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap12 = student11.getSubcribed();
        team_001.CD cD15 = team_001.ItemFactory.createCD("hi!", "");
        student11.returnItem((team_001.Item) cD15);
        student11.setEmail("hi!");
        team_001.Faculty faculty22 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter25 = new team_001.Newsletter("hi!", "");
        faculty22.subscribe(newsletter25);
        team_001.PhysicalBook physicalBook29 = new team_001.PhysicalBook("", "");
        faculty22.returnItem((team_001.Item) physicalBook29);
        libraryFacade2.returnItem((team_001.Client) student11, (team_001.Item) physicalBook29);
        student11.setPassword("hi!");
        java.lang.String str34 = student11.getEmail();
        team_001.UserManagement userManagement36 = new team_001.UserManagement("");
        team_001.Client client41 = userManagement36.writeUser("hi!", "hi!", "hi!", "");
        team_001.LibraryFacade libraryFacade44 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        team_001.Student student52 = new team_001.Student("", "", "hi!", strList50);
        team_001.Magazine magazine55 = new team_001.Magazine("", "hi!");
        student52.returnItem((team_001.Item) magazine55);
        java.lang.String str57 = student52.getEmail();
        student52.setPassword("");
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        team_001.Student student67 = new team_001.Student("", "", "hi!", strList65);
        team_001.Magazine magazine70 = new team_001.Magazine("", "hi!");
        student67.returnItem((team_001.Item) magazine70);
        java.lang.String str72 = student67.getEmail();
        student67.setPassword("");
        team_001.VirtualBook virtualBook77 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook77.ID = '4';
        int int80 = student67.checkOverdue((team_001.Item) virtualBook77);
        java.lang.String str81 = virtualBook77.getTitle();
        int int82 = libraryFacade44.checkOverdue((team_001.Client) student52, (team_001.Item) virtualBook77);
        team_001.Magazine magazine85 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean86 = student52.borrowItem((team_001.Item) magazine85);
        team_001.Newsletter newsletter89 = new team_001.Newsletter("hi!", "");
        student52.unsubscribe(newsletter89);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap91 = student52.borrowed;
        team_001.BorrowedIterator borrowedIterator92 = new team_001.BorrowedIterator(itemMap91);
        team_001.BorrowedIterator borrowedIterator93 = new team_001.BorrowedIterator(itemMap91);
        java.util.ArrayList<team_001.Item> itemList94 = client41.checkItemsOverdue(borrowedIterator93);
        java.util.ArrayList<team_001.Item> itemList95 = student11.checkItemsOverdue(borrowedIterator93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "hi!" + "'", str34.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "" + "'", str57.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str72 + "' != '" + "" + "'", str72.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str81 + "' != '" + "hi!" + "'", str81.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList95);
    }

    @Test
    public void test631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test631");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        team_001.Magazine magazine43 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean44 = student10.borrowItem((team_001.Item) magazine43);
        team_001.Newsletter newsletter47 = new team_001.Newsletter("hi!", "");
        student10.unsubscribe(newsletter47);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap49 = student10.borrowed;
        team_001.BorrowedIterator borrowedIterator50 = new team_001.BorrowedIterator(itemMap49);
        team_001.BorrowedIterator borrowedIterator51 = new team_001.BorrowedIterator(itemMap49);
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator51.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap49);
    }

    @Test
    public void test632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test632");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        libraryFacade2.bookKeeping("", strList27);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap31 = libraryFacade2.getInventory();
        team_001.Faculty faculty35 = new team_001.Faculty("hi!", "", "");
        team_001.PhysicalBook physicalBook38 = new team_001.PhysicalBook("", "");
        java.lang.String str39 = physicalBook38.getAuthor();
        libraryFacade2.returnItem((team_001.Client) faculty35, (team_001.Item) physicalBook38);
        team_001.Faculty faculty48 = new team_001.Faculty("", "hi!", "hi!");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        team_001.Student student56 = new team_001.Student("", "", "hi!", strList54);
        team_001.VirtualBook virtualBook59 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int60 = student56.checkOverdue((team_001.Item) virtualBook59);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        team_001.Student student68 = new team_001.Student("", "", "hi!", strList66);
        team_001.VirtualBook virtualBook71 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int72 = student68.checkOverdue((team_001.Item) virtualBook71);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap73 = student68.borrowed;
        team_001.BorrowedIterator borrowedIterator74 = new team_001.BorrowedIterator(itemMap73);
        student56.borrowed = itemMap73;
        faculty48.borrowed = itemMap73;
        java.util.ArrayList<java.lang.String> strList77 = faculty48.getCourses();
        team_001.Student student78 = new team_001.Student("", "hi!", "hi!", strList77);
        libraryFacade2.bookKeeping("", strList77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "" + "'", str39.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList77);
    }

    @Test
    public void test633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test633");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        userBuilder15.password = "";
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        userBuilder15.lib = library39;
        team_001.Client client41 = userBuilder15.buildNonFacultyStaff();
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder43 = userBuilder15.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client41);
    }

    @Test
    public void test634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test634");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Newsletter newsletter10 = new team_001.Newsletter("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) newsletter10);
        java.lang.String str12 = student7.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
    }

    @Test
    public void test635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test635");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        team_001.VirtualBook virtualBook14 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int15 = student11.checkOverdue((team_001.Item) virtualBook14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        team_001.Student student23 = new team_001.Student("", "", "hi!", strList21);
        team_001.VirtualBook virtualBook26 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int27 = student23.checkOverdue((team_001.Item) virtualBook26);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap28 = student23.borrowed;
        team_001.BorrowedIterator borrowedIterator29 = new team_001.BorrowedIterator(itemMap28);
        student11.borrowed = itemMap28;
        faculty3.borrowed = itemMap28;
        java.util.ArrayList<java.lang.String> strList32 = faculty3.getCourses();
        faculty3.setPassword("hi!");
        faculty3.setId(0);
        faculty3.setEmail("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList32);
    }

    @Test
    public void test636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test636");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        team_001.Magazine magazine12 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean13 = student7.isBorrowed((team_001.Item) magazine12);
        int int14 = student7.getId();
        team_001.LibraryFacade libraryFacade17 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        libraryFacade17.bookKeeping("hi!", strList21);
        team_001.visitor visitor27 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine30 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean31 = libraryFacade17.borrowItem((team_001.Client) visitor27, (team_001.Item) magazine30);
        team_001.VirtualBook virtualBook34 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook34.ID = '4';
        virtualBook34.ID = (short) 100;
        boolean boolean39 = visitor27.borrowItem((team_001.Item) virtualBook34);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        team_001.Student student47 = new team_001.Student("", "", "hi!", strList45);
        student47.setEmail("hi!");
        student47.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap52 = student47.borrowed;
        student47.setUsername("");
        team_001.Newsletter newsletter57 = new team_001.Newsletter("hi!", "hi!");
        student47.unsubscribe(newsletter57);
        java.lang.Object obj59 = newsletter57.clone();
        visitor27.returnItem((team_001.Item) newsletter57);
        newsletter57.ID = 6847;
        student7.unsubscribe(newsletter57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13.equals(false));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1940 + "'", int14 == 1940);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj59);
    }

    @Test
    public void test637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test637");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        team_001.LibraryFacade libraryFacade18 = new team_001.LibraryFacade("hi!", "");
        team_001.Library library19 = libraryFacade18.getLibrary();
        userBuilder15.lib = library19;
        team_001.UserBuilder userBuilder22 = userBuilder15.setUsername("hi!");
        java.lang.String str23 = userBuilder22.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "hi!" + "'", str23.equals("hi!"));
    }

    @Test
    public void test638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test638");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap10 = libraryFacade2.getInventory();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        java.lang.String str19 = student18.getEmail();
        student18.setUsername("hi!");
        student18.setPassword("");
        team_001.VirtualBook virtualBook26 = new team_001.VirtualBook("hi!", "");
        int int27 = libraryFacade2.checkOverdue((team_001.Client) student18, (team_001.Item) virtualBook26);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        team_001.Student student35 = new team_001.Student("", "", "hi!", strList33);
        team_001.VirtualBook virtualBook38 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int39 = student35.checkOverdue((team_001.Item) virtualBook38);
        int int40 = student35.getId();
        student35.setUsername("");
        team_001.LibraryFacade libraryFacade45 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        team_001.Magazine magazine56 = new team_001.Magazine("", "hi!");
        student53.returnItem((team_001.Item) magazine56);
        java.lang.String str58 = student53.getEmail();
        team_001.CD cD61 = new team_001.CD("", "");
        boolean boolean62 = libraryFacade45.borrowItem((team_001.Client) student53, (team_001.Item) cD61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        team_001.Student student70 = new team_001.Student("", "", "hi!", strList68);
        student70.setEmail("hi!");
        team_001.Magazine magazine75 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean76 = student70.isBorrowed((team_001.Item) magazine75);
        boolean boolean77 = student53.borrowItem((team_001.Item) magazine75);
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        team_001.Student student85 = new team_001.Student("", "", "hi!", strList83);
        team_001.VirtualBook virtualBook88 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int89 = student85.checkOverdue((team_001.Item) virtualBook88);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap90 = student85.borrowed;
        team_001.BorrowedIterator borrowedIterator91 = new team_001.BorrowedIterator(itemMap90);
        student53.borrowed = itemMap90;
        student35.borrowed = itemMap90;
        student18.setBorrowed(itemMap90);
        student18.setId((int) (short) 100);
        java.lang.String str97 = student18.getUsername();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "" + "'", str19.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1947 + "'", int40 == 1947);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "" + "'", str58.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str97 + "' != '" + "hi!" + "'", str97.equals("hi!"));
    }

    @Test
    public void test639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test639");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.UserBuilder userBuilder20 = new team_001.UserBuilder();
        team_001.Client client21 = userBuilder20.buildVisitor();
        java.lang.String str22 = userBuilder20.password;
        userBuilder20.password = "hi!";
        team_001.Client client25 = userBuilder20.buildVisitor();
        team_001.Client client26 = userBuilder20.buildFaculty();
        team_001.LibraryFacade libraryFacade29 = new team_001.LibraryFacade("", "");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        team_001.Student student38 = new team_001.Student("", "", "hi!", strList36);
        libraryFacade29.bookKeeping("hi!", strList36);
        team_001.Faculty faculty43 = new team_001.Faculty("hi!", "hi!", "hi!");
        java.util.ArrayList<java.lang.String> strList44 = faculty43.getCourses();
        java.util.ArrayList<java.lang.String> strList45 = faculty43.getCourses();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        team_001.Magazine magazine56 = new team_001.Magazine("", "hi!");
        student53.returnItem((team_001.Item) magazine56);
        java.lang.String str58 = student53.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap59 = null;
        student53.borrowed = itemMap59;
        java.lang.String str61 = student53.getPassword();
        team_001.visitor visitor65 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter68 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str69 = newsletter68.getTitle();
        visitor65.subscribe(newsletter68);
        student53.subscribe(newsletter68);
        int int72 = libraryFacade29.checkOverdue((team_001.Client) faculty43, (team_001.Item) newsletter68);
        int int73 = libraryFacade2.checkOverdue(client26, (team_001.Item) newsletter68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "" + "'", str58.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "hi!" + "'", str61.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "" + "'", str69.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test640");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        userBuilder17.email = "hi!";
        team_001.Library library20 = userBuilder17.lib;
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Library library41 = libraryFacade23.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder17.setLibrary(library41);
        userBuilder0.lib = library41;
        team_001.Client client44 = userBuilder0.buildFaculty();
        team_001.UserBuilder userBuilder46 = userBuilder0.setUsername("hi!");
        team_001.Client client47 = userBuilder46.buildFaculty();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client47);
    }

    @Test
    public void test641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test641");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        java.util.ArrayList<java.lang.String> strList4 = faculty3.getCourses();
        java.util.ArrayList<java.lang.String> strList5 = faculty3.getCourses();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test642");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.Library library25 = userBuilder23.lib;
        java.lang.String str26 = userBuilder23.email;
        team_001.UserBuilder userBuilder27 = new team_001.UserBuilder();
        team_001.Client client28 = userBuilder27.buildVisitor();
        team_001.UserBuilder userBuilder30 = userBuilder27.setPassword("hi!");
        userBuilder27.password = "hi!";
        java.lang.String str33 = userBuilder27.password;
        team_001.Client client34 = userBuilder27.buildNonFacultyStaff();
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "");
        team_001.Library library38 = libraryFacade37.getLibrary();
        userBuilder27.lib = library38;
        team_001.UserBuilder userBuilder40 = userBuilder23.setLibrary(library38);
        team_001.UserBuilder userBuilder41 = new team_001.UserBuilder();
        team_001.Client client42 = userBuilder41.buildVisitor();
        java.lang.String str43 = userBuilder41.password;
        team_001.LibraryFacade libraryFacade46 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        libraryFacade46.bookKeeping("hi!", strList50);
        team_001.LibraryFacade libraryFacade56 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        libraryFacade56.bookKeeping("hi!", strList60);
        libraryFacade46.bookKeeping("", strList60);
        team_001.Library library64 = libraryFacade46.getLibrary();
        team_001.UserBuilder userBuilder65 = userBuilder41.setLibrary(library64);
        team_001.Client client66 = userBuilder65.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder68 = userBuilder65.setUsername("");
        team_001.Library library69 = userBuilder65.lib;
        userBuilder40.lib = library69;
        team_001.UserBuilder userBuilder72 = userBuilder40.setUsername("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "hi!" + "'", str33.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder72);
    }

    @Test
    public void test643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test643");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter6 = new team_001.Newsletter("hi!", "");
        faculty3.subscribe(newsletter6);
        java.util.ArrayList<java.lang.String> strList8 = faculty3.getCourses();
        faculty3.setUsername("hi!");
        faculty3.setUsername("");
        faculty3.setUsername("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test644");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        team_001.Student student28 = new team_001.Student("", "", "hi!", strList26);
        team_001.Newsletter newsletter31 = new team_001.Newsletter("hi!", "hi!");
        int int32 = student28.checkOverdue((team_001.Item) newsletter31);
        team_001.Magazine magazine35 = team_001.ItemFactory.createMagazine("", "");
        magazine35.ID = 1961;
        boolean boolean38 = libraryFacade2.borrowItem((team_001.Client) student28, (team_001.Item) magazine35);
        team_001.Faculty faculty43 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter46 = new team_001.Newsletter("hi!", "");
        faculty43.subscribe(newsletter46);
        java.util.ArrayList<java.lang.String> strList48 = faculty43.getCourses();
        libraryFacade2.bookKeeping("hi!", strList48);
        team_001.Client client50 = null;
        team_001.LibraryFacade libraryFacade53 = new team_001.LibraryFacade("", "");
        team_001.Library library54 = libraryFacade53.getLibrary();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        team_001.Student student62 = new team_001.Student("", "", "hi!", strList60);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap63 = student62.getSubcribed();
        team_001.CD cD66 = team_001.ItemFactory.createCD("hi!", "");
        student62.returnItem((team_001.Item) cD66);
        student62.setEmail("hi!");
        team_001.Faculty faculty73 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter76 = new team_001.Newsletter("hi!", "");
        faculty73.subscribe(newsletter76);
        team_001.PhysicalBook physicalBook80 = new team_001.PhysicalBook("", "");
        faculty73.returnItem((team_001.Item) physicalBook80);
        libraryFacade53.returnItem((team_001.Client) student62, (team_001.Item) physicalBook80);
        student62.setPassword("hi!");
        java.lang.String str85 = student62.getEmail();
        team_001.PhysicalBook physicalBook88 = team_001.ItemFactory.createPhysicalBook("hi!", "");
        boolean boolean89 = student62.borrowItem((team_001.Item) physicalBook88);
        boolean boolean90 = libraryFacade2.borrowItem(client50, (team_001.Item) physicalBook88);
        team_001.Library library91 = libraryFacade2.getLibrary();
        team_001.Faculty faculty96 = new team_001.Faculty("hi!", "hi!", "");
        java.util.ArrayList<java.lang.String> strList97 = faculty96.getCourses();
        libraryFacade2.bookKeeping("", strList97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str85 + "' != '" + "hi!" + "'", str85.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList97);
    }

    @Test
    public void test645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test645");
        team_001.Faculty faculty12 = new team_001.Faculty("hi!", "hi!", "");
        java.util.ArrayList<java.lang.String> strList13 = faculty12.getCourses();
        team_001.Student student14 = new team_001.Student("hi!", "", "hi!", strList13);
        team_001.Student student15 = new team_001.Student("hi!", "hi!", "", strList13);
        team_001.Student student16 = new team_001.Student("hi!", "hi!", "", strList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test646");
        team_001.VirtualBook virtualBook2 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        java.lang.Object obj3 = virtualBook2.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj3);
    }

    @Test
    public void test647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test647");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        java.lang.String str6 = userBuilder0.password;
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        team_001.Client client8 = userBuilder7.buildVisitor();
        java.lang.String str9 = userBuilder7.password;
        userBuilder7.password = "hi!";
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        team_001.Library library21 = libraryFacade14.getLibrary();
        team_001.UserBuilder userBuilder22 = userBuilder7.setLibrary(library21);
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library21);
        userBuilder0.password = "hi!";
        team_001.UserBuilder userBuilder26 = new team_001.UserBuilder();
        userBuilder26.email = "hi!";
        team_001.Library library29 = userBuilder26.lib;
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        libraryFacade42.bookKeeping("hi!", strList46);
        libraryFacade32.bookKeeping("", strList46);
        team_001.Library library50 = libraryFacade32.getLibrary();
        team_001.UserBuilder userBuilder51 = userBuilder26.setLibrary(library50);
        team_001.UserBuilder userBuilder52 = new team_001.UserBuilder();
        userBuilder52.email = "hi!";
        team_001.Library library55 = userBuilder52.lib;
        team_001.LibraryFacade libraryFacade58 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        libraryFacade58.bookKeeping("hi!", strList62);
        team_001.LibraryFacade libraryFacade68 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        libraryFacade68.bookKeeping("hi!", strList72);
        libraryFacade58.bookKeeping("", strList72);
        team_001.Library library76 = libraryFacade58.getLibrary();
        team_001.UserBuilder userBuilder77 = userBuilder52.setLibrary(library76);
        team_001.UserBuilder userBuilder78 = userBuilder51.setLibrary(library76);
        team_001.UserBuilder userBuilder79 = new team_001.UserBuilder();
        userBuilder79.email = "hi!";
        team_001.LibraryFacade libraryFacade84 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.Library library85 = libraryFacade84.getLibrary();
        team_001.UserBuilder userBuilder86 = userBuilder79.setLibrary(library85);
        userBuilder51.lib = library85;
        team_001.UserBuilder userBuilder88 = userBuilder0.setLibrary(library85);
        java.lang.String str89 = userBuilder0.password;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder91 = userBuilder0.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str89 + "' != '" + "hi!" + "'", str89.equals("hi!"));
    }

    @Test
    public void test648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test648");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        java.lang.String str6 = userBuilder0.password;
        team_001.Client client7 = userBuilder0.buildNonFacultyStaff();
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder9 = userBuilder0.setPassword("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid password format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client7);
    }

    @Test
    public void test649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test649");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        java.lang.String str48 = userBuilder47.password;
        java.lang.String str49 = userBuilder47.password;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder51 = userBuilder47.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test650");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        team_001.Client client3 = userBuilder0.buildVisitor();
        java.lang.String str4 = userBuilder0.email;
        team_001.UserBuilder userBuilder6 = userBuilder0.setUsername("hi!");
        team_001.UserBuilder userBuilder8 = userBuilder6.setUsername("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder8);
    }

    @Test
    public void test651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test651");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildStudent();
        team_001.Client client25 = userBuilder23.buildStudent();
        team_001.UserBuilder userBuilder26 = new team_001.UserBuilder();
        userBuilder26.email = "hi!";
        team_001.Library library29 = userBuilder26.lib;
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        libraryFacade42.bookKeeping("hi!", strList46);
        libraryFacade32.bookKeeping("", strList46);
        team_001.Library library50 = libraryFacade32.getLibrary();
        team_001.UserBuilder userBuilder51 = userBuilder26.setLibrary(library50);
        java.lang.String str52 = userBuilder26.password;
        team_001.Library library53 = userBuilder26.lib;
        team_001.UserBuilder userBuilder54 = userBuilder23.setLibrary(library53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder54);
    }

    @Test
    public void test652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test652");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        team_001.Student student29 = new team_001.Student("", "", "hi!", strList27);
        student29.setEmail("hi!");
        student29.setEmail("hi!");
        team_001.PhysicalBook physicalBook36 = new team_001.PhysicalBook("", "hi!");
        boolean boolean37 = libraryFacade2.borrowItem((team_001.Client) student29, (team_001.Item) physicalBook36);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap38 = libraryFacade2.getInventory();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap39 = libraryFacade2.getInventory();
        team_001.Library library40 = libraryFacade2.getLibrary();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library40);
    }

    @Test
    public void test653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test653");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildFaculty();
        team_001.LibraryFacade libraryFacade28 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        team_001.Student student36 = new team_001.Student("", "", "hi!", strList34);
        student36.setEmail("hi!");
        team_001.Magazine magazine41 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean42 = student36.isBorrowed((team_001.Item) magazine41);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        team_001.Student student50 = new team_001.Student("", "", "hi!", strList48);
        team_001.VirtualBook virtualBook53 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int54 = student50.checkOverdue((team_001.Item) virtualBook53);
        java.lang.Boolean boolean55 = student36.isBorrowed((team_001.Item) virtualBook53);
        student36.setPassword("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap58 = student36.borrowed;
        team_001.Item item59 = null;
        int int60 = libraryFacade28.checkOverdue((team_001.Client) student36, item59);
        team_001.UserBuilder userBuilder61 = new team_001.UserBuilder();
        team_001.Client client62 = userBuilder61.buildVisitor();
        team_001.LibraryFacade libraryFacade65 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        libraryFacade65.bookKeeping("hi!", strList69);
        team_001.LibraryFacade libraryFacade75 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray78 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        libraryFacade75.bookKeeping("hi!", strList79);
        libraryFacade65.bookKeeping("", strList79);
        team_001.Library library83 = libraryFacade65.getLibrary();
        team_001.UserBuilder userBuilder84 = userBuilder61.setLibrary(library83);
        team_001.Client client85 = userBuilder84.buildStudent();
        team_001.visitor visitor89 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter92 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str93 = newsletter92.getTitle();
        visitor89.subscribe(newsletter92);
        int int95 = libraryFacade28.checkOverdue(client85, (team_001.Item) newsletter92);
        int int96 = client25.checkOverdue((team_001.Item) newsletter92);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap97 = client25.borrowed;
        java.lang.Class<?> wildcardClass98 = client25.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str93 + "' != '" + "" + "'", str93.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test654");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        team_001.UserBuilder userBuilder5 = userBuilder3.setUsername("");
        team_001.Client client6 = userBuilder5.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        userBuilder7.email = "hi!";
        team_001.Library library10 = userBuilder7.lib;
        team_001.Client client11 = userBuilder7.buildVisitor();
        team_001.Client client12 = userBuilder7.buildFaculty();
        java.lang.String str13 = userBuilder7.password;
        team_001.UserBuilder userBuilder14 = new team_001.UserBuilder();
        team_001.Client client15 = userBuilder14.buildVisitor();
        java.lang.String str16 = userBuilder14.password;
        userBuilder14.password = "hi!";
        team_001.LibraryFacade libraryFacade21 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        libraryFacade21.bookKeeping("hi!", strList25);
        team_001.Library library28 = libraryFacade21.getLibrary();
        team_001.UserBuilder userBuilder29 = userBuilder14.setLibrary(library28);
        team_001.UserBuilder userBuilder30 = userBuilder7.setLibrary(library28);
        team_001.Library library31 = userBuilder30.lib;
        team_001.UserBuilder userBuilder32 = userBuilder5.setLibrary(library31);
        java.lang.String str33 = userBuilder5.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "hi!" + "'", str33.equals("hi!"));
    }

    @Test
    public void test655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test655");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap14 = student9.borrowed;
        team_001.BorrowedIterator borrowedIterator15 = new team_001.BorrowedIterator(itemMap14);
        java.util.ArrayList<team_001.Item> itemList16 = client1.checkItemsOverdue(borrowedIterator15);
        boolean boolean17 = borrowedIterator15.hasNext();
        boolean boolean18 = borrowedIterator15.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item19 = borrowedIterator15.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test656");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        team_001.VirtualBook virtualBook14 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int15 = student11.checkOverdue((team_001.Item) virtualBook14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        team_001.Student student23 = new team_001.Student("", "", "hi!", strList21);
        team_001.VirtualBook virtualBook26 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int27 = student23.checkOverdue((team_001.Item) virtualBook26);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap28 = student23.borrowed;
        team_001.BorrowedIterator borrowedIterator29 = new team_001.BorrowedIterator(itemMap28);
        student11.borrowed = itemMap28;
        faculty3.borrowed = itemMap28;
        java.lang.String str32 = faculty3.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "hi!" + "'", str32.equals("hi!"));
    }

    @Test
    public void test657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test657");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        team_001.Client client3 = userBuilder0.buildVisitor();
        java.lang.String str4 = userBuilder0.email;
        team_001.Client client5 = userBuilder0.buildFaculty();
        team_001.UserBuilder userBuilder6 = new team_001.UserBuilder();
        team_001.Client client7 = userBuilder6.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap8 = client7.getSubcribed();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        team_001.Student student16 = new team_001.Student("", "", "hi!", strList14);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap17 = student16.getSubcribed();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        student25.setEmail("hi!");
        team_001.Magazine magazine30 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean31 = student25.isBorrowed((team_001.Item) magazine30);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        team_001.VirtualBook virtualBook42 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int43 = student39.checkOverdue((team_001.Item) virtualBook42);
        java.lang.Boolean boolean44 = student25.isBorrowed((team_001.Item) virtualBook42);
        java.lang.String str45 = virtualBook42.getTitle();
        student16.returnItem((team_001.Item) virtualBook42);
        virtualBook42.ID = 10;
        java.lang.Boolean boolean49 = client7.isBorrowed((team_001.Item) virtualBook42);
        int int50 = client5.checkOverdue((team_001.Item) virtualBook42);
        int int51 = virtualBook42.ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "hi!" + "'", str45.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
    }

    @Test
    public void test658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test658");
        team_001.Magazine magazine2 = new team_001.Magazine("", "hi!");
        magazine2.ID = 6821;
        magazine2.ID = 14852;
    }

    @Test
    public void test659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test659");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        team_001.Student student29 = new team_001.Student("", "", "hi!", strList27);
        student29.setEmail("hi!");
        student29.setEmail("hi!");
        team_001.PhysicalBook physicalBook36 = new team_001.PhysicalBook("", "hi!");
        boolean boolean37 = libraryFacade2.borrowItem((team_001.Client) student29, (team_001.Item) physicalBook36);
        team_001.Library library38 = libraryFacade2.getLibrary();
        team_001.UserManagement userManagement40 = new team_001.UserManagement("");
        boolean boolean43 = userManagement40.readUsers("hi!", "hi!");
        team_001.Client client48 = userManagement40.writeUser("hi!", "hi!", "hi!", "hi!");
        team_001.VirtualBook virtualBook51 = team_001.ItemFactory.createVirtualBook("hi!", "");
        java.lang.String str52 = virtualBook51.getAuthor();
        int int53 = virtualBook51.ID;
        java.lang.Object obj54 = virtualBook51.clone();
        boolean boolean55 = libraryFacade2.borrowItem(client48, (team_001.Item) virtualBook51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "" + "'", str52.equals(""));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 19253 + "'", int53 == 19253);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test660");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        userBuilder15.password = "";
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        userBuilder15.lib = library39;
        team_001.LibraryFacade libraryFacade43 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        libraryFacade43.bookKeeping("hi!", strList47);
        team_001.LibraryFacade libraryFacade53 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        libraryFacade53.bookKeeping("hi!", strList57);
        libraryFacade43.bookKeeping("", strList57);
        team_001.Library library61 = libraryFacade43.getLibrary();
        team_001.Library library62 = libraryFacade43.getLibrary();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        team_001.Student student70 = new team_001.Student("", "", "hi!", strList68);
        student70.setEmail("hi!");
        student70.setEmail("hi!");
        team_001.PhysicalBook physicalBook77 = new team_001.PhysicalBook("", "hi!");
        boolean boolean78 = libraryFacade43.borrowItem((team_001.Client) student70, (team_001.Item) physicalBook77);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap79 = libraryFacade43.getInventory();
        team_001.Library library80 = libraryFacade43.getLibrary();
        userBuilder15.lib = library80;
        team_001.UserBuilder userBuilder83 = userBuilder15.setUsername("");
        team_001.Client client84 = userBuilder83.buildVisitor();
        team_001.Item item85 = null;
        int int86 = client84.checkOverdue(item85);
        client84.setId(10487);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test661");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        java.lang.String str26 = userBuilder0.password;
        team_001.Client client27 = userBuilder0.buildStudent();
        team_001.Client client28 = userBuilder0.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder29 = new team_001.UserBuilder();
        team_001.Client client30 = userBuilder29.buildVisitor();
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        team_001.LibraryFacade libraryFacade43 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        libraryFacade43.bookKeeping("hi!", strList47);
        libraryFacade33.bookKeeping("", strList47);
        team_001.Library library51 = libraryFacade33.getLibrary();
        team_001.UserBuilder userBuilder52 = userBuilder29.setLibrary(library51);
        team_001.Client client53 = userBuilder52.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder55 = userBuilder52.setPassword("hi!");
        team_001.Library library56 = userBuilder52.lib;
        team_001.Client client57 = userBuilder52.buildStudent();
        team_001.Newsletter newsletter60 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str61 = newsletter60.getTitle();
        java.lang.String str62 = newsletter60.getAuthor();
        client57.unsubscribe(newsletter60);
        client28.unsubscribe(newsletter60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "" + "'", str61.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "hi!" + "'", str62.equals("hi!"));
    }

    @Test
    public void test662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test662");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap8 = student7.getSubcribed();
        team_001.CD cD11 = team_001.ItemFactory.createCD("hi!", "");
        student7.returnItem((team_001.Item) cD11);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = student7.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap13);
    }

    @Test
    public void test663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test663");
        team_001.NonFacultyStaff nonFacultyStaff3 = new team_001.NonFacultyStaff("hi!", "", "hi!");
        nonFacultyStaff3.setPassword("hi!");
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap6 = nonFacultyStaff3.getSubcribed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap6);
    }

    @Test
    public void test664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test664");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        int int12 = student7.getId();
        student7.setEmail("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2065 + "'", int12 == 2065);
    }

    @Test
    public void test665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test665");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.LibraryFacade libraryFacade6 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        libraryFacade6.bookKeeping("hi!", strList10);
        team_001.LibraryFacade libraryFacade16 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        libraryFacade16.bookKeeping("hi!", strList20);
        libraryFacade6.bookKeeping("", strList20);
        team_001.Library library24 = libraryFacade6.getLibrary();
        team_001.UserBuilder userBuilder25 = userBuilder0.setLibrary(library24);
        team_001.UserBuilder userBuilder26 = new team_001.UserBuilder();
        userBuilder26.email = "hi!";
        team_001.Library library29 = userBuilder26.lib;
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        libraryFacade42.bookKeeping("hi!", strList46);
        libraryFacade32.bookKeeping("", strList46);
        team_001.Library library50 = libraryFacade32.getLibrary();
        team_001.UserBuilder userBuilder51 = userBuilder26.setLibrary(library50);
        team_001.UserBuilder userBuilder52 = userBuilder25.setLibrary(library50);
        team_001.UserBuilder userBuilder54 = userBuilder25.setUsername("");
        team_001.Client client55 = userBuilder25.buildNonFacultyStaff();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client55);
    }

    @Test
    public void test666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test666");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        student19.setEmail("hi!");
        student19.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap24 = student19.borrowed;
        student19.setUsername("");
        team_001.Newsletter newsletter29 = new team_001.Newsletter("hi!", "hi!");
        student19.unsubscribe(newsletter29);
        java.lang.Object obj31 = newsletter29.clone();
        student7.subscribe(newsletter29);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap33 = student7.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap33);
    }

    @Test
    public void test667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test667");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildNonFacultyStaff();
        team_001.CD cD9 = new team_001.CD("", "");
        java.lang.Boolean boolean10 = client6.isBorrowed((team_001.Item) cD9);
        java.lang.String str11 = client6.getUsername();
        int int12 = client6.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2070 + "'", int12 == 2070);
    }

    @Test
    public void test668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test668");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        team_001.Client client6 = userManagement1.writeUser("", "hi!", "hi!", "hi!");
        boolean boolean9 = userManagement1.readUsers("hi!", "hi!");
        java.lang.String str11 = userManagement1.getType("");
        team_001.Client client16 = userManagement1.writeUser("", "hi!", "hi!", "hi!");
        boolean boolean19 = userManagement1.readUsers("", "hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test669");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        team_001.Client client3 = userBuilder0.buildVisitor();
        team_001.Client client4 = userBuilder0.buildStudent();
        team_001.UserBuilder userBuilder6 = userBuilder0.setUsername("hi!");
        team_001.Client client7 = userBuilder0.buildVisitor();
        java.lang.String str8 = client7.getUsername();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
    }

    @Test
    public void test670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test670");
        team_001.Newsletter newsletter2 = team_001.ItemFactory.createNewsLetter("hi!", "hi!");
        int int3 = newsletter2.ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter2);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 19447 + "'", int3 == 19447);
    }

    @Test
    public void test671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test671");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder24.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder27 = userBuilder24.setUsername("");
        userBuilder27.password = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder27);
    }

    @Test
    public void test672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test672");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        team_001.VirtualBook virtualBook14 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int15 = student11.checkOverdue((team_001.Item) virtualBook14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        team_001.Student student23 = new team_001.Student("", "", "hi!", strList21);
        team_001.VirtualBook virtualBook26 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int27 = student23.checkOverdue((team_001.Item) virtualBook26);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap28 = student23.borrowed;
        team_001.BorrowedIterator borrowedIterator29 = new team_001.BorrowedIterator(itemMap28);
        student11.borrowed = itemMap28;
        faculty3.borrowed = itemMap28;
        java.util.ArrayList<java.lang.String> strList32 = faculty3.getCourses();
        team_001.LibraryFacade libraryFacade35 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        libraryFacade35.bookKeeping("hi!", strList39);
        team_001.LibraryFacade libraryFacade45 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        libraryFacade45.bookKeeping("hi!", strList49);
        libraryFacade35.bookKeeping("", strList49);
        team_001.Library library53 = libraryFacade35.getLibrary();
        team_001.Library library54 = libraryFacade35.getLibrary();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        team_001.Student student62 = new team_001.Student("", "", "hi!", strList60);
        student62.setEmail("hi!");
        student62.setEmail("hi!");
        team_001.PhysicalBook physicalBook69 = new team_001.PhysicalBook("", "hi!");
        boolean boolean70 = libraryFacade35.borrowItem((team_001.Client) student62, (team_001.Item) physicalBook69);
        java.lang.Object obj71 = physicalBook69.clone();
        boolean boolean72 = faculty3.borrowItem((team_001.Item) physicalBook69);
        faculty3.setEmail("");
        java.util.ArrayList<java.lang.String> strList75 = faculty3.getCourses();
        java.lang.String str76 = faculty3.getUsername();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "" + "'", str76.equals(""));
    }

    @Test
    public void test673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test673");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        libraryFacade2.bookKeeping("", strList27);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap31 = libraryFacade2.getInventory();
        team_001.Faculty faculty35 = new team_001.Faculty("hi!", "", "");
        team_001.PhysicalBook physicalBook38 = new team_001.PhysicalBook("", "");
        java.lang.String str39 = physicalBook38.getAuthor();
        libraryFacade2.returnItem((team_001.Client) faculty35, (team_001.Item) physicalBook38);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap41 = libraryFacade2.getInventory();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap42 = libraryFacade2.getInventory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "" + "'", str39.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap42);
    }

    @Test
    public void test674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test674");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap14 = student9.borrowed;
        team_001.BorrowedIterator borrowedIterator15 = new team_001.BorrowedIterator(itemMap14);
        java.util.ArrayList<team_001.Item> itemList16 = client1.checkItemsOverdue(borrowedIterator15);
        team_001.Magazine magazine19 = new team_001.Magazine("hi!", "");
        int int20 = client1.checkOverdue((team_001.Item) magazine19);
        team_001.CD cD23 = team_001.ItemFactory.createCD("", "hi!");
        boolean boolean24 = client1.borrowItem((team_001.Item) cD23);
        client1.setUsername("");
        client1.setEmail("");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap29 = client1.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap29);
    }

    @Test
    public void test675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test675");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        userBuilder0.password = "";
        team_001.UserBuilder userBuilder8 = userBuilder0.setPassword("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder8);
    }

    @Test
    public void test676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test676");
        team_001.NonFacultyStaff nonFacultyStaff3 = new team_001.NonFacultyStaff("hi!", "", "");
        java.lang.String str4 = nonFacultyStaff3.getUsername();
        nonFacultyStaff3.setUsername("");
        team_001.Newsletter newsletter9 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.Boolean boolean10 = nonFacultyStaff3.isBorrowed((team_001.Item) newsletter9);
        nonFacultyStaff3.setId(52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10.equals(false));
    }

    @Test
    public void test677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test677");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Student student11 = new team_001.Student("", "hi!", "", strList8);
        team_001.PhysicalBook physicalBook14 = team_001.ItemFactory.createPhysicalBook("hi!", "hi!");
        student11.returnItem((team_001.Item) physicalBook14);
        java.lang.String str16 = student11.getPassword();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int28 = student24.checkOverdue((team_001.Item) virtualBook27);
        int int29 = student24.getId();
        student24.setUsername("");
        team_001.LibraryFacade libraryFacade34 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        team_001.Student student42 = new team_001.Student("", "", "hi!", strList40);
        team_001.Magazine magazine45 = new team_001.Magazine("", "hi!");
        student42.returnItem((team_001.Item) magazine45);
        java.lang.String str47 = student42.getEmail();
        team_001.CD cD50 = new team_001.CD("", "");
        boolean boolean51 = libraryFacade34.borrowItem((team_001.Client) student42, (team_001.Item) cD50);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        team_001.Student student59 = new team_001.Student("", "", "hi!", strList57);
        student59.setEmail("hi!");
        team_001.Magazine magazine64 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean65 = student59.isBorrowed((team_001.Item) magazine64);
        boolean boolean66 = student42.borrowItem((team_001.Item) magazine64);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        team_001.Student student74 = new team_001.Student("", "", "hi!", strList72);
        team_001.VirtualBook virtualBook77 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int78 = student74.checkOverdue((team_001.Item) virtualBook77);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap79 = student74.borrowed;
        team_001.BorrowedIterator borrowedIterator80 = new team_001.BorrowedIterator(itemMap79);
        student42.borrowed = itemMap79;
        student24.borrowed = itemMap79;
        student11.borrowed = itemMap79;
        int int84 = student11.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2095 + "'", int29 == 2095);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "" + "'", str47.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap79);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2094 + "'", int84 == 2094);
    }

    @Test
    public void test678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test678");
        team_001.visitor visitor3 = new team_001.visitor("", "hi!", "");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        team_001.VirtualBook virtualBook14 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int15 = student11.checkOverdue((team_001.Item) virtualBook14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        team_001.Student student23 = new team_001.Student("", "", "hi!", strList21);
        team_001.VirtualBook virtualBook26 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int27 = student23.checkOverdue((team_001.Item) virtualBook26);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap28 = student23.borrowed;
        team_001.BorrowedIterator borrowedIterator29 = new team_001.BorrowedIterator(itemMap28);
        student11.borrowed = itemMap28;
        visitor3.setBorrowed(itemMap28);
        team_001.LibraryFacade libraryFacade34 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        libraryFacade34.bookKeeping("hi!", strList38);
        team_001.LibraryFacade libraryFacade44 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        libraryFacade44.bookKeeping("hi!", strList48);
        libraryFacade34.bookKeeping("", strList48);
        team_001.Library library52 = libraryFacade34.getLibrary();
        team_001.Library library53 = libraryFacade34.getLibrary();
        team_001.Faculty faculty57 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook60 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean61 = libraryFacade34.borrowItem((team_001.Client) faculty57, (team_001.Item) virtualBook60);
        java.util.ArrayList<java.lang.String> strList62 = faculty57.getCourses();
        team_001.LibraryFacade libraryFacade65 = new team_001.LibraryFacade("hi!", "");
        team_001.Faculty faculty69 = new team_001.Faculty("", "", "hi!");
        team_001.visitor visitor73 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter76 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str77 = newsletter76.getTitle();
        visitor73.subscribe(newsletter76);
        boolean boolean79 = libraryFacade65.borrowItem((team_001.Client) faculty69, (team_001.Item) newsletter76);
        int int80 = faculty57.checkOverdue((team_001.Item) newsletter76);
        java.lang.Boolean boolean81 = visitor3.isBorrowed((team_001.Item) newsletter76);
        java.lang.Object obj82 = newsletter76.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str77 + "' != '" + "" + "'", str77.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj82);
    }

    @Test
    public void test679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test679");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Student student11 = new team_001.Student("", "hi!", "", strList8);
        team_001.PhysicalBook physicalBook14 = team_001.ItemFactory.createPhysicalBook("hi!", "hi!");
        student11.returnItem((team_001.Item) physicalBook14);
        int int16 = physicalBook14.ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19617 + "'", int16 == 19617);
    }

    @Test
    public void test680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test680");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.UserBuilder userBuilder30 = userBuilder23.setUsername("");
        team_001.Client client31 = userBuilder30.buildFaculty();
        java.lang.String str32 = client31.getEmail();
        java.lang.String str33 = client31.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test681");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        java.lang.String str29 = userBuilder23.password;
        java.lang.String str30 = userBuilder23.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "hi!" + "'", str29.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "hi!" + "'", str30.equals("hi!"));
    }

    @Test
    public void test682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test682");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildFaculty();
        team_001.Client client26 = userBuilder0.buildNonFacultyStaff();
        java.lang.String str27 = client26.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test683");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        team_001.Student student29 = new team_001.Student("", "", "hi!", strList27);
        student29.setEmail("hi!");
        student29.setEmail("hi!");
        team_001.PhysicalBook physicalBook36 = new team_001.PhysicalBook("", "hi!");
        boolean boolean37 = libraryFacade2.borrowItem((team_001.Client) student29, (team_001.Item) physicalBook36);
        team_001.LibraryFacade libraryFacade44 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        libraryFacade44.bookKeeping("hi!", strList48);
        team_001.LibraryFacade libraryFacade54 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        libraryFacade54.bookKeeping("hi!", strList58);
        libraryFacade44.bookKeeping("", strList58);
        team_001.Library library62 = libraryFacade44.getLibrary();
        team_001.Library library63 = libraryFacade44.getLibrary();
        team_001.Faculty faculty67 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean71 = libraryFacade44.borrowItem((team_001.Client) faculty67, (team_001.Item) virtualBook70);
        java.util.ArrayList<java.lang.String> strList72 = faculty67.getCourses();
        java.util.ArrayList<java.lang.String> strList73 = faculty67.getCourses();
        java.util.ArrayList<java.lang.String> strList74 = faculty67.getCourses();
        team_001.Student student75 = new team_001.Student("", "hi!", "hi!", strList74);
        libraryFacade2.bookKeeping("", strList74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList74);
    }

    @Test
    public void test684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test684");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        student10.setId(553);
        student10.setPassword("hi!");
        team_001.UserManagement userManagement25 = new team_001.UserManagement("");
        team_001.Client client30 = userManagement25.writeUser("hi!", "hi!", "hi!", "");
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        team_001.Student student41 = new team_001.Student("", "", "hi!", strList39);
        team_001.Magazine magazine44 = new team_001.Magazine("", "hi!");
        student41.returnItem((team_001.Item) magazine44);
        java.lang.String str46 = student41.getEmail();
        student41.setPassword("");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        team_001.Student student56 = new team_001.Student("", "", "hi!", strList54);
        team_001.Magazine magazine59 = new team_001.Magazine("", "hi!");
        student56.returnItem((team_001.Item) magazine59);
        java.lang.String str61 = student56.getEmail();
        student56.setPassword("");
        team_001.VirtualBook virtualBook66 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook66.ID = '4';
        int int69 = student56.checkOverdue((team_001.Item) virtualBook66);
        java.lang.String str70 = virtualBook66.getTitle();
        int int71 = libraryFacade33.checkOverdue((team_001.Client) student41, (team_001.Item) virtualBook66);
        team_001.Magazine magazine74 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean75 = student41.borrowItem((team_001.Item) magazine74);
        team_001.Newsletter newsletter78 = new team_001.Newsletter("hi!", "");
        student41.unsubscribe(newsletter78);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap80 = student41.borrowed;
        team_001.BorrowedIterator borrowedIterator81 = new team_001.BorrowedIterator(itemMap80);
        team_001.BorrowedIterator borrowedIterator82 = new team_001.BorrowedIterator(itemMap80);
        java.util.ArrayList<team_001.Item> itemList83 = client30.checkItemsOverdue(borrowedIterator82);
        boolean boolean84 = borrowedIterator82.hasNext();
        java.util.ArrayList<team_001.Item> itemList85 = student10.checkItemsOverdue(borrowedIterator82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "" + "'", str46.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "" + "'", str61.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "hi!" + "'", str70.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList85);
    }

    @Test
    public void test685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test685");
        team_001.visitor visitor3 = new team_001.visitor("", "hi!", "");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        team_001.VirtualBook virtualBook14 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int15 = student11.checkOverdue((team_001.Item) virtualBook14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        team_001.Student student23 = new team_001.Student("", "", "hi!", strList21);
        team_001.VirtualBook virtualBook26 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int27 = student23.checkOverdue((team_001.Item) virtualBook26);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap28 = student23.borrowed;
        team_001.BorrowedIterator borrowedIterator29 = new team_001.BorrowedIterator(itemMap28);
        student11.borrowed = itemMap28;
        visitor3.setBorrowed(itemMap28);
        team_001.LibraryFacade libraryFacade34 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        libraryFacade34.bookKeeping("hi!", strList38);
        team_001.LibraryFacade libraryFacade44 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        libraryFacade44.bookKeeping("hi!", strList48);
        libraryFacade34.bookKeeping("", strList48);
        team_001.Library library52 = libraryFacade34.getLibrary();
        team_001.Library library53 = libraryFacade34.getLibrary();
        team_001.Faculty faculty57 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook60 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean61 = libraryFacade34.borrowItem((team_001.Client) faculty57, (team_001.Item) virtualBook60);
        java.util.ArrayList<java.lang.String> strList62 = faculty57.getCourses();
        team_001.LibraryFacade libraryFacade65 = new team_001.LibraryFacade("hi!", "");
        team_001.Faculty faculty69 = new team_001.Faculty("", "", "hi!");
        team_001.visitor visitor73 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter76 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str77 = newsletter76.getTitle();
        visitor73.subscribe(newsletter76);
        boolean boolean79 = libraryFacade65.borrowItem((team_001.Client) faculty69, (team_001.Item) newsletter76);
        int int80 = faculty57.checkOverdue((team_001.Item) newsletter76);
        java.lang.Boolean boolean81 = visitor3.isBorrowed((team_001.Item) newsletter76);
        java.lang.String str82 = newsletter76.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str77 + "' != '" + "" + "'", str77.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str82 + "' != '" + "hi!" + "'", str82.equals("hi!"));
    }

    @Test
    public void test686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test686");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        userBuilder0.email = "";
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder6 = userBuilder0.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test687");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.LibraryFacade libraryFacade6 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        libraryFacade6.bookKeeping("hi!", strList10);
        team_001.LibraryFacade libraryFacade16 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        libraryFacade16.bookKeeping("hi!", strList20);
        libraryFacade6.bookKeeping("", strList20);
        team_001.Library library24 = libraryFacade6.getLibrary();
        team_001.UserBuilder userBuilder25 = userBuilder0.setLibrary(library24);
        team_001.UserBuilder userBuilder26 = new team_001.UserBuilder();
        team_001.Client client27 = userBuilder26.buildVisitor();
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        team_001.LibraryFacade libraryFacade40 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        libraryFacade40.bookKeeping("hi!", strList44);
        libraryFacade30.bookKeeping("", strList44);
        team_001.Library library48 = libraryFacade30.getLibrary();
        team_001.UserBuilder userBuilder49 = userBuilder26.setLibrary(library48);
        team_001.Client client50 = userBuilder49.buildNonFacultyStaff();
        team_001.Library library51 = userBuilder49.lib;
        java.lang.String str52 = userBuilder49.email;
        team_001.UserBuilder userBuilder53 = new team_001.UserBuilder();
        team_001.Client client54 = userBuilder53.buildVisitor();
        team_001.UserBuilder userBuilder56 = userBuilder53.setPassword("hi!");
        userBuilder53.password = "hi!";
        java.lang.String str59 = userBuilder53.password;
        team_001.Client client60 = userBuilder53.buildNonFacultyStaff();
        team_001.LibraryFacade libraryFacade63 = new team_001.LibraryFacade("", "");
        team_001.Library library64 = libraryFacade63.getLibrary();
        userBuilder53.lib = library64;
        team_001.UserBuilder userBuilder66 = userBuilder49.setLibrary(library64);
        team_001.UserBuilder userBuilder68 = userBuilder49.setUsername("hi!");
        team_001.Library library69 = userBuilder49.lib;
        userBuilder0.lib = library69;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "hi!" + "'", str59.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library69);
    }

    @Test
    public void test688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test688");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        java.lang.String str6 = userManagement1.getType("");
        team_001.Client client11 = userManagement1.writeUser("", "", "hi!", "");
        boolean boolean14 = userManagement1.readUsers("hi!", "hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test689");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Student student11 = new team_001.Student("", "hi!", "", strList8);
        team_001.PhysicalBook physicalBook14 = team_001.ItemFactory.createPhysicalBook("hi!", "hi!");
        student11.returnItem((team_001.Item) physicalBook14);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap16 = student11.getSubcribed();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap17 = student11.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap17);
    }

    @Test
    public void test690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test690");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        java.lang.String str6 = userBuilder0.password;
        java.lang.String str7 = userBuilder0.password;
        userBuilder0.password = "hi!";
        java.lang.String str10 = userBuilder0.password;
        team_001.Client client11 = userBuilder0.buildFaculty();
        team_001.BorrowedIterator borrowedIterator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<team_001.Item> itemList13 = client11.checkItemsOverdue(borrowedIterator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"team_001.BorrowedIterator.hasNext()\" because \"iterator\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client11);
    }

    @Test
    public void test691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test691");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildVisitor();
        client6.setUsername("hi!");
        team_001.UserBuilder userBuilder9 = new team_001.UserBuilder();
        team_001.Client client10 = userBuilder9.buildVisitor();
        java.lang.String str11 = userBuilder9.password;
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        team_001.LibraryFacade libraryFacade24 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        libraryFacade24.bookKeeping("hi!", strList28);
        libraryFacade14.bookKeeping("", strList28);
        team_001.Library library32 = libraryFacade14.getLibrary();
        team_001.UserBuilder userBuilder33 = userBuilder9.setLibrary(library32);
        team_001.Client client34 = userBuilder9.buildVisitor();
        java.lang.String str35 = userBuilder9.password;
        team_001.Client client36 = userBuilder9.buildVisitor();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap37 = client36.borrowed;
        client6.setBorrowed(itemMap37);
        team_001.VirtualBook virtualBook41 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook41.ID = '4';
        virtualBook41.ID = (short) 100;
        virtualBook41.ID = 36;
        boolean boolean48 = client6.borrowItem((team_001.Item) virtualBook41);
        java.lang.String str49 = virtualBook41.getTitle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "hi!" + "'", str49.equals("hi!"));
    }

    @Test
    public void test692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test692");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        team_001.Client client3 = userBuilder0.buildVisitor();
        java.lang.String str4 = userBuilder0.email;
        team_001.Client client5 = userBuilder0.buildFaculty();
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder7 = userBuilder0.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
    }

    @Test
    public void test693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test693");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.UserBuilder userBuilder30 = userBuilder23.setUsername("");
        team_001.UserBuilder userBuilder31 = new team_001.UserBuilder();
        team_001.Client client32 = userBuilder31.buildVisitor();
        team_001.UserBuilder userBuilder34 = userBuilder31.setPassword("hi!");
        userBuilder31.password = "hi!";
        team_001.LibraryFacade libraryFacade39 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        libraryFacade39.bookKeeping("hi!", strList43);
        team_001.Library library46 = libraryFacade39.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder31.setLibrary(library46);
        team_001.UserBuilder userBuilder48 = userBuilder30.setLibrary(library46);
        team_001.Client client49 = userBuilder30.buildStudent();
        java.lang.String str50 = client49.getUsername();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "" + "'", str50.equals(""));
    }

    @Test
    public void test694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test694");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        java.lang.String str6 = userManagement1.getType("");
        team_001.Client client11 = userManagement1.writeUser("", "", "hi!", "");
        team_001.Client client16 = userManagement1.writeUser("hi!", "hi!", "hi!", "hi!");
        boolean boolean19 = userManagement1.readUsers("hi!", "hi!");
        team_001.Client client24 = userManagement1.writeUser("", "", "", "");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
    }

    @Test
    public void test695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test695");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        team_001.Student student29 = new team_001.Student("", "", "hi!", strList27);
        student29.setEmail("hi!");
        student29.setEmail("hi!");
        team_001.PhysicalBook physicalBook36 = new team_001.PhysicalBook("", "hi!");
        boolean boolean37 = libraryFacade2.borrowItem((team_001.Client) student29, (team_001.Item) physicalBook36);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap38 = libraryFacade2.getInventory();
        team_001.Library library39 = libraryFacade2.getLibrary();
        team_001.Library library40 = libraryFacade2.getLibrary();
        team_001.Library library41 = libraryFacade2.getLibrary();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
    }

    @Test
    public void test696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test696");
        team_001.Client.current_id = 5581;
    }

    @Test
    public void test697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test697");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Library library2 = null;
        team_001.UserBuilder userBuilder3 = userBuilder0.setLibrary(library2);
        java.lang.String str4 = userBuilder0.email;
        team_001.Client client5 = userBuilder0.buildFaculty();
        int int6 = client5.getId();
        team_001.LibraryFacade libraryFacade9 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        libraryFacade9.bookKeeping("hi!", strList13);
        team_001.LibraryFacade libraryFacade19 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        libraryFacade19.bookKeeping("hi!", strList23);
        libraryFacade9.bookKeeping("", strList23);
        team_001.Library library27 = libraryFacade9.getLibrary();
        team_001.Library library28 = libraryFacade9.getLibrary();
        team_001.Faculty faculty32 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean36 = libraryFacade9.borrowItem((team_001.Client) faculty32, (team_001.Item) virtualBook35);
        faculty32.setId((int) (byte) -1);
        java.lang.String str39 = faculty32.getPassword();
        team_001.Newsletter newsletter42 = new team_001.Newsletter("hi!", "hi!");
        faculty32.unsubscribe(newsletter42);
        client5.unsubscribe(newsletter42);
        int int45 = newsletter42.ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5583 + "'", int6 == 5583);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "" + "'", str39.equals(""));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 19983 + "'", int45 == 19983);
    }

    @Test
    public void test698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test698");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap10 = libraryFacade2.getInventory();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        java.lang.String str19 = student18.getEmail();
        student18.setUsername("hi!");
        student18.setPassword("");
        team_001.VirtualBook virtualBook26 = new team_001.VirtualBook("hi!", "");
        int int27 = libraryFacade2.checkOverdue((team_001.Client) student18, (team_001.Item) virtualBook26);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap28 = libraryFacade2.getInventory();
        team_001.Faculty faculty33 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter36 = new team_001.Newsletter("hi!", "");
        faculty33.subscribe(newsletter36);
        java.util.ArrayList<java.lang.String> strList38 = faculty33.getCourses();
        java.util.ArrayList<java.lang.String> strList39 = faculty33.getCourses();
        libraryFacade2.bookKeeping("hi!", strList39);
        team_001.Library library41 = libraryFacade2.getLibrary();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "" + "'", str19.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
    }

    @Test
    public void test699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test699");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        student7.setPassword("");
        team_001.UserManagement userManagement15 = new team_001.UserManagement("");
        team_001.Client client20 = userManagement15.writeUser("hi!", "hi!", "hi!", "");
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        team_001.Student student31 = new team_001.Student("", "", "hi!", strList29);
        team_001.Magazine magazine34 = new team_001.Magazine("", "hi!");
        student31.returnItem((team_001.Item) magazine34);
        java.lang.String str36 = student31.getEmail();
        student31.setPassword("");
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        team_001.Student student46 = new team_001.Student("", "", "hi!", strList44);
        team_001.Magazine magazine49 = new team_001.Magazine("", "hi!");
        student46.returnItem((team_001.Item) magazine49);
        java.lang.String str51 = student46.getEmail();
        student46.setPassword("");
        team_001.VirtualBook virtualBook56 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook56.ID = '4';
        int int59 = student46.checkOverdue((team_001.Item) virtualBook56);
        java.lang.String str60 = virtualBook56.getTitle();
        int int61 = libraryFacade23.checkOverdue((team_001.Client) student31, (team_001.Item) virtualBook56);
        team_001.Magazine magazine64 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean65 = student31.borrowItem((team_001.Item) magazine64);
        team_001.Newsletter newsletter68 = new team_001.Newsletter("hi!", "");
        student31.unsubscribe(newsletter68);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap70 = student31.borrowed;
        team_001.BorrowedIterator borrowedIterator71 = new team_001.BorrowedIterator(itemMap70);
        team_001.BorrowedIterator borrowedIterator72 = new team_001.BorrowedIterator(itemMap70);
        java.util.ArrayList<team_001.Item> itemList73 = client20.checkItemsOverdue(borrowedIterator72);
        java.util.ArrayList<team_001.Item> itemList74 = student7.checkItemsOverdue(borrowedIterator72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "" + "'", str36.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "" + "'", str51.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str60 + "' != '" + "hi!" + "'", str60.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList74);
    }

    @Test
    public void test700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test700");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        team_001.Student student17 = new team_001.Student("", "hi!", "hi!", strList15);
        libraryFacade2.bookKeeping("", strList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test701");
        team_001.Magazine magazine2 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        magazine2.ID = 15154;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine2);
    }

    @Test
    public void test702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test702");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        java.lang.String str48 = userBuilder47.password;
        team_001.UserBuilder userBuilder50 = userBuilder47.setPassword("hi!");
        team_001.Client client51 = userBuilder47.buildFaculty();
        java.lang.String str52 = userBuilder47.password;
        team_001.UserBuilder userBuilder53 = new team_001.UserBuilder();
        team_001.Client client54 = userBuilder53.buildVisitor();
        java.lang.String str55 = userBuilder53.password;
        team_001.LibraryFacade libraryFacade58 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        libraryFacade58.bookKeeping("hi!", strList62);
        team_001.LibraryFacade libraryFacade68 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        libraryFacade68.bookKeeping("hi!", strList72);
        libraryFacade58.bookKeeping("", strList72);
        team_001.Library library76 = libraryFacade58.getLibrary();
        team_001.UserBuilder userBuilder77 = userBuilder53.setLibrary(library76);
        team_001.Client client78 = userBuilder77.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder80 = userBuilder77.setUsername("");
        team_001.Library library81 = userBuilder77.lib;
        team_001.UserBuilder userBuilder82 = userBuilder47.setLibrary(library81);
        team_001.Library library83 = userBuilder47.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "hi!" + "'", str52.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library83);
    }

    @Test
    public void test703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test703");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        java.lang.String str48 = userBuilder47.password;
        team_001.UserBuilder userBuilder50 = userBuilder47.setPassword("hi!");
        team_001.Client client51 = userBuilder50.buildStudent();
        client51.setEmail("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client51);
    }

    @Test
    public void test704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test704");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Client client27 = userBuilder26.buildStudent();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        team_001.Student student35 = new team_001.Student("", "", "hi!", strList33);
        team_001.Magazine magazine38 = new team_001.Magazine("", "hi!");
        student35.returnItem((team_001.Item) magazine38);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        team_001.Student student47 = new team_001.Student("", "", "hi!", strList45);
        team_001.Magazine magazine50 = new team_001.Magazine("", "hi!");
        student47.returnItem((team_001.Item) magazine50);
        java.lang.String str52 = student47.getEmail();
        student47.setPassword("");
        team_001.VirtualBook virtualBook57 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook57.ID = '4';
        int int60 = student47.checkOverdue((team_001.Item) virtualBook57);
        java.lang.String str61 = virtualBook57.getTitle();
        boolean boolean62 = student35.borrowItem((team_001.Item) virtualBook57);
        team_001.Newsletter newsletter65 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean66 = student35.borrowItem((team_001.Item) newsletter65);
        client27.unsubscribe(newsletter65);
        java.lang.Object obj68 = newsletter65.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "" + "'", str52.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "hi!" + "'", str61.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj68);
    }

    @Test
    public void test705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test705");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = null;
        student7.borrowed = itemMap13;
        java.lang.String str15 = student7.getPassword();
        java.lang.String str16 = student7.getEmail();
        student7.setEmail("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
    }

    @Test
    public void test706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test706");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        team_001.Library library4 = userBuilder0.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library4);
    }

    @Test
    public void test707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test707");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setUsername("hi!");
        team_001.UserBuilder userBuilder28 = userBuilder26.setUsername("");
        team_001.LibraryFacade libraryFacade31 = new team_001.LibraryFacade("", "");
        team_001.Library library32 = libraryFacade31.getLibrary();
        team_001.UserBuilder userBuilder33 = userBuilder26.setLibrary(library32);
        team_001.Library library34 = userBuilder26.lib;
        team_001.UserBuilder userBuilder36 = userBuilder26.setUsername("hi!");
        team_001.Library library37 = userBuilder36.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library37);
    }

    @Test
    public void test708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test708");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.Library library25 = userBuilder23.lib;
        java.lang.String str26 = userBuilder23.email;
        team_001.UserBuilder userBuilder27 = new team_001.UserBuilder();
        team_001.Client client28 = userBuilder27.buildVisitor();
        team_001.UserBuilder userBuilder30 = userBuilder27.setPassword("hi!");
        userBuilder27.password = "hi!";
        java.lang.String str33 = userBuilder27.password;
        team_001.Client client34 = userBuilder27.buildNonFacultyStaff();
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "");
        team_001.Library library38 = libraryFacade37.getLibrary();
        userBuilder27.lib = library38;
        team_001.UserBuilder userBuilder40 = userBuilder23.setLibrary(library38);
        team_001.UserBuilder userBuilder42 = userBuilder23.setUsername("hi!");
        team_001.Library library43 = userBuilder42.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "hi!" + "'", str33.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library43);
    }

    @Test
    public void test709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test709");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        team_001.Student student16 = new team_001.Student("", "", "hi!", strList14);
        student16.setEmail("hi!");
        student16.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap21 = student16.borrowed;
        student16.setUsername("");
        team_001.VirtualBook virtualBook26 = new team_001.VirtualBook("hi!", "hi!");
        int int27 = libraryFacade2.checkOverdue((team_001.Client) student16, (team_001.Item) virtualBook26);
        java.lang.Class<?> wildcardClass28 = libraryFacade2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test710");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        java.lang.String str26 = userBuilder0.password;
        java.lang.String str27 = userBuilder0.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test711");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.lang.String str8 = student7.getEmail();
        student7.setUsername("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap11 = student7.borrowed;
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        team_001.Student student22 = new team_001.Student("", "", "hi!", strList20);
        team_001.Magazine magazine25 = new team_001.Magazine("", "hi!");
        student22.returnItem((team_001.Item) magazine25);
        java.lang.String str27 = student22.getEmail();
        team_001.CD cD30 = new team_001.CD("", "");
        boolean boolean31 = libraryFacade14.borrowItem((team_001.Client) student22, (team_001.Item) cD30);
        team_001.Library library32 = libraryFacade14.getLibrary();
        team_001.Library library33 = libraryFacade14.getLibrary();
        team_001.UserBuilder userBuilder34 = new team_001.UserBuilder();
        team_001.Client client35 = userBuilder34.buildVisitor();
        team_001.LibraryFacade libraryFacade38 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        libraryFacade38.bookKeeping("hi!", strList42);
        team_001.LibraryFacade libraryFacade48 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        libraryFacade48.bookKeeping("hi!", strList52);
        libraryFacade38.bookKeeping("", strList52);
        team_001.Library library56 = libraryFacade38.getLibrary();
        team_001.UserBuilder userBuilder57 = userBuilder34.setLibrary(library56);
        team_001.Client client58 = userBuilder34.buildVisitor();
        int int59 = client58.getId();
        team_001.CD cD62 = new team_001.CD("hi!", "");
        java.lang.String str63 = cD62.getAuthor();
        java.lang.Object obj64 = cD62.clone();
        boolean boolean65 = libraryFacade14.borrowItem(client58, (team_001.Item) cD62);
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        team_001.Student student73 = new team_001.Student("", "", "hi!", strList71);
        team_001.VirtualBook virtualBook76 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int77 = student73.checkOverdue((team_001.Item) virtualBook76);
        int int78 = student73.getId();
        java.lang.String str79 = student73.getUsername();
        java.lang.String str80 = student73.getUsername();
        java.lang.String[] strArray85 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        team_001.Student student88 = new team_001.Student("", "", "hi!", strList86);
        team_001.VirtualBook virtualBook91 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int92 = student88.checkOverdue((team_001.Item) virtualBook91);
        virtualBook91.ID = 10;
        int int95 = virtualBook91.ID;
        libraryFacade14.returnItem((team_001.Client) student73, (team_001.Item) virtualBook91);
        int int97 = student7.checkOverdue((team_001.Item) virtualBook91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client58);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5629 + "'", int59 == 5629);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "" + "'", str63.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 5630 + "'", int78 == 5630);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str79 + "' != '" + "" + "'", str79.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "" + "'", str80.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 10 + "'", int95 == 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test712");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        team_001.Client client3 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade6 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        libraryFacade6.bookKeeping("hi!", strList10);
        team_001.visitor visitor16 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine19 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean20 = libraryFacade6.borrowItem((team_001.Client) visitor16, (team_001.Item) magazine19);
        visitor16.setPassword("hi!");
        java.lang.String str23 = visitor16.getEmail();
        team_001.CD cD26 = new team_001.CD("hi!", "");
        java.lang.Boolean boolean27 = visitor16.isBorrowed((team_001.Item) cD26);
        int int28 = cD26.getID();
        java.lang.Boolean boolean29 = client3.isBorrowed((team_001.Item) cD26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "hi!" + "'", str23.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27.equals(false));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20272 + "'", int28 == 20272);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29.equals(false));
    }

    @Test
    public void test713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test713");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        userBuilder23.email = "";
        team_001.UserBuilder userBuilder27 = userBuilder23.setUsername("hi!");
        userBuilder27.email = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder27);
    }

    @Test
    public void test714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test714");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        java.lang.String str6 = userManagement1.getType("");
        team_001.Client client11 = userManagement1.writeUser("", "", "hi!", "");
        team_001.Client client16 = userManagement1.writeUser("hi!", "hi!", "hi!", "hi!");
        java.lang.String str18 = userManagement1.getType("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test715");
        team_001.Newsletter newsletter2 = team_001.ItemFactory.createNewsLetter("", "");
        newsletter2.ID = 29;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter2);
    }

    @Test
    public void test716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test716");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        java.lang.String str6 = userBuilder0.password;
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        userBuilder7.email = "hi!";
        team_001.Library library10 = userBuilder7.lib;
        team_001.Client client11 = userBuilder7.buildVisitor();
        team_001.Client client12 = userBuilder7.buildFaculty();
        java.lang.String str13 = userBuilder7.password;
        team_001.UserBuilder userBuilder14 = new team_001.UserBuilder();
        team_001.Client client15 = userBuilder14.buildVisitor();
        java.lang.String str16 = userBuilder14.password;
        userBuilder14.password = "hi!";
        team_001.LibraryFacade libraryFacade21 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        libraryFacade21.bookKeeping("hi!", strList25);
        team_001.Library library28 = libraryFacade21.getLibrary();
        team_001.UserBuilder userBuilder29 = userBuilder14.setLibrary(library28);
        team_001.UserBuilder userBuilder30 = userBuilder7.setLibrary(library28);
        userBuilder0.lib = library28;
        userBuilder0.password = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
    }

    @Test
    public void test717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test717");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.UserBuilder userBuilder49 = userBuilder24.setPassword("hi!");
        team_001.Library library50 = null;
        userBuilder49.lib = library50;
        team_001.Client client52 = userBuilder49.buildFaculty();
        client52.setId(9283);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client52);
    }

    @Test
    public void test718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test718");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        userBuilder15.password = "";
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        userBuilder15.lib = library39;
        team_001.LibraryFacade libraryFacade43 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        libraryFacade43.bookKeeping("hi!", strList47);
        team_001.LibraryFacade libraryFacade53 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        libraryFacade53.bookKeeping("hi!", strList57);
        libraryFacade43.bookKeeping("", strList57);
        team_001.Library library61 = libraryFacade43.getLibrary();
        team_001.Library library62 = libraryFacade43.getLibrary();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        team_001.Student student70 = new team_001.Student("", "", "hi!", strList68);
        student70.setEmail("hi!");
        student70.setEmail("hi!");
        team_001.PhysicalBook physicalBook77 = new team_001.PhysicalBook("", "hi!");
        boolean boolean78 = libraryFacade43.borrowItem((team_001.Client) student70, (team_001.Item) physicalBook77);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap79 = libraryFacade43.getInventory();
        team_001.Library library80 = libraryFacade43.getLibrary();
        userBuilder15.lib = library80;
        team_001.UserBuilder userBuilder83 = userBuilder15.setUsername("");
        team_001.Client client84 = userBuilder83.buildVisitor();
        team_001.Client client85 = userBuilder83.buildVisitor();
        java.lang.String str86 = userBuilder83.email;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test719");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        java.lang.String str6 = userBuilder0.password;
        java.lang.String str7 = userBuilder0.password;
        java.lang.String str8 = userBuilder0.email;
        team_001.Client client9 = userBuilder0.buildFaculty();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap10 = client9.borrowed;
        java.lang.String str11 = client9.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test720");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildStudent();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap7 = client6.borrowed;
        client6.setId(7655);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        team_001.UserBuilder userBuilder13 = new team_001.UserBuilder();
        team_001.Client client14 = userBuilder13.buildVisitor();
        team_001.Library library15 = null;
        team_001.UserBuilder userBuilder16 = userBuilder13.setLibrary(library15);
        java.lang.String str17 = userBuilder13.email;
        team_001.Client client18 = userBuilder13.buildFaculty();
        team_001.Client client19 = userBuilder13.buildVisitor();
        team_001.LibraryFacade libraryFacade22 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        libraryFacade22.bookKeeping("hi!", strList26);
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        libraryFacade22.bookKeeping("", strList36);
        team_001.Library library40 = libraryFacade22.getLibrary();
        team_001.Library library41 = libraryFacade22.getLibrary();
        team_001.Faculty faculty45 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook48 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean49 = libraryFacade22.borrowItem((team_001.Client) faculty45, (team_001.Item) virtualBook48);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        team_001.Student student57 = new team_001.Student("", "", "hi!", strList55);
        student57.setEmail("hi!");
        student57.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap62 = student57.borrowed;
        student57.setUsername("");
        team_001.Newsletter newsletter67 = new team_001.Newsletter("hi!", "hi!");
        student57.unsubscribe(newsletter67);
        java.lang.Object obj69 = newsletter67.clone();
        faculty45.unsubscribe(newsletter67);
        boolean boolean71 = client19.borrowItem((team_001.Item) newsletter67);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        team_001.Student student79 = new team_001.Student("", "", "hi!", strList77);
        team_001.VirtualBook virtualBook82 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int83 = student79.checkOverdue((team_001.Item) virtualBook82);
        virtualBook82.ID = 10;
        virtualBook82.ID = 884;
        int int88 = virtualBook82.getID();
        boolean boolean89 = libraryFacade12.borrowItem(client19, (team_001.Item) virtualBook82);
        java.lang.Boolean boolean90 = client6.isBorrowed((team_001.Item) virtualBook82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 884 + "'", int88 == 884);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90.equals(false));
    }

    @Test
    public void test721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test721");
        team_001.PhysicalBook physicalBook2 = new team_001.PhysicalBook("hi!", "hi!");
        java.lang.String str3 = physicalBook2.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!" + "'", str3.equals("hi!"));
    }

    @Test
    public void test722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test722");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder24.buildStudent();
        java.lang.String str26 = userBuilder24.email;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test723");
        team_001.Client.current_id = 1402;
    }

    @Test
    public void test724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test724");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.UserBuilder userBuilder22 = new team_001.UserBuilder();
        team_001.Client client23 = userBuilder22.buildVisitor();
        team_001.LibraryFacade libraryFacade26 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        libraryFacade26.bookKeeping("hi!", strList30);
        team_001.LibraryFacade libraryFacade36 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        libraryFacade36.bookKeeping("hi!", strList40);
        libraryFacade26.bookKeeping("", strList40);
        team_001.Library library44 = libraryFacade26.getLibrary();
        team_001.UserBuilder userBuilder45 = userBuilder22.setLibrary(library44);
        team_001.Client client46 = userBuilder22.buildVisitor();
        int int47 = client46.getId();
        team_001.CD cD50 = new team_001.CD("hi!", "");
        java.lang.String str51 = cD50.getAuthor();
        java.lang.Object obj52 = cD50.clone();
        boolean boolean53 = libraryFacade2.borrowItem(client46, (team_001.Item) cD50);
        team_001.visitor visitor57 = new team_001.visitor("hi!", "", "");
        team_001.Magazine magazine60 = new team_001.Magazine("hi!", "hi!");
        java.lang.String str61 = magazine60.getTitle();
        libraryFacade2.returnItem((team_001.Client) visitor57, (team_001.Item) magazine60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1405 + "'", int47 == 1405);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "" + "'", str51.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "hi!" + "'", str61.equals("hi!"));
    }

    @Test
    public void test725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test725");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        java.util.ArrayList<java.lang.String> strList30 = faculty25.getCourses();
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("hi!", "");
        team_001.Faculty faculty37 = new team_001.Faculty("", "", "hi!");
        team_001.visitor visitor41 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter44 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str45 = newsletter44.getTitle();
        visitor41.subscribe(newsletter44);
        boolean boolean47 = libraryFacade33.borrowItem((team_001.Client) faculty37, (team_001.Item) newsletter44);
        int int48 = faculty25.checkOverdue((team_001.Item) newsletter44);
        faculty25.setId(7775);
        faculty25.setUsername("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "" + "'", str45.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test726");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Library library2 = null;
        team_001.UserBuilder userBuilder3 = userBuilder0.setLibrary(library2);
        java.lang.String str4 = userBuilder0.email;
        team_001.Client client5 = userBuilder0.buildFaculty();
        team_001.Client client6 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade9 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        libraryFacade9.bookKeeping("hi!", strList13);
        team_001.LibraryFacade libraryFacade19 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        libraryFacade19.bookKeeping("hi!", strList23);
        libraryFacade9.bookKeeping("", strList23);
        team_001.Library library27 = libraryFacade9.getLibrary();
        team_001.Library library28 = libraryFacade9.getLibrary();
        team_001.Faculty faculty32 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean36 = libraryFacade9.borrowItem((team_001.Client) faculty32, (team_001.Item) virtualBook35);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        team_001.Student student44 = new team_001.Student("", "", "hi!", strList42);
        student44.setEmail("hi!");
        student44.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap49 = student44.borrowed;
        student44.setUsername("");
        team_001.Newsletter newsletter54 = new team_001.Newsletter("hi!", "hi!");
        student44.unsubscribe(newsletter54);
        java.lang.Object obj56 = newsletter54.clone();
        faculty32.unsubscribe(newsletter54);
        boolean boolean58 = client6.borrowItem((team_001.Item) newsletter54);
        java.lang.Object obj59 = newsletter54.clone();
        int int60 = newsletter54.ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj59);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 20494 + "'", int60 == 20494);
    }

    @Test
    public void test727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test727");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        java.lang.String str6 = userBuilder0.password;
        java.lang.String str7 = userBuilder0.password;
        java.lang.String str8 = userBuilder0.email;
        team_001.UserBuilder userBuilder9 = new team_001.UserBuilder();
        userBuilder9.email = "hi!";
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.Library library15 = libraryFacade14.getLibrary();
        team_001.UserBuilder userBuilder16 = userBuilder9.setLibrary(library15);
        team_001.Library library17 = userBuilder16.lib;
        userBuilder0.lib = library17;
        team_001.UserBuilder userBuilder20 = userBuilder0.setPassword("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder20);
    }

    @Test
    public void test728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test728");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.email;
        team_001.UserBuilder userBuilder4 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder4);
    }

    @Test
    public void test729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test729");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter6 = new team_001.Newsletter("hi!", "");
        faculty3.subscribe(newsletter6);
        java.util.ArrayList<java.lang.String> strList8 = faculty3.getCourses();
        faculty3.setUsername("hi!");
        java.util.ArrayList<java.lang.String> strList11 = faculty3.getCourses();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = faculty3.borrowed;
        java.util.ArrayList<java.lang.String> strList13 = faculty3.getCourses();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test730");
        team_001.Magazine magazine2 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        magazine2.ID = 1769;
        magazine2.ID = 292;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine2);
    }

    @Test
    public void test731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test731");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        team_001.Client client6 = userManagement1.writeUser("", "hi!", "hi!", "hi!");
        boolean boolean9 = userManagement1.readUsers("hi!", "hi!");
        java.lang.String str11 = userManagement1.getType("");
        boolean boolean14 = userManagement1.readUsers("", "hi!");
        java.lang.String str16 = userManagement1.getType("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test732");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        java.lang.String str6 = userBuilder0.password;
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        userBuilder7.email = "hi!";
        team_001.Library library10 = userBuilder7.lib;
        team_001.Client client11 = userBuilder7.buildVisitor();
        team_001.Client client12 = userBuilder7.buildFaculty();
        java.lang.String str13 = userBuilder7.password;
        team_001.UserBuilder userBuilder14 = new team_001.UserBuilder();
        team_001.Client client15 = userBuilder14.buildVisitor();
        java.lang.String str16 = userBuilder14.password;
        userBuilder14.password = "hi!";
        team_001.LibraryFacade libraryFacade21 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        libraryFacade21.bookKeeping("hi!", strList25);
        team_001.Library library28 = libraryFacade21.getLibrary();
        team_001.UserBuilder userBuilder29 = userBuilder14.setLibrary(library28);
        team_001.UserBuilder userBuilder30 = userBuilder7.setLibrary(library28);
        userBuilder0.lib = library28;
        team_001.LibraryFacade libraryFacade34 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        team_001.Student student42 = new team_001.Student("", "", "hi!", strList40);
        team_001.Magazine magazine45 = new team_001.Magazine("", "hi!");
        student42.returnItem((team_001.Item) magazine45);
        java.lang.String str47 = student42.getEmail();
        student42.setPassword("");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        team_001.Student student57 = new team_001.Student("", "", "hi!", strList55);
        team_001.Magazine magazine60 = new team_001.Magazine("", "hi!");
        student57.returnItem((team_001.Item) magazine60);
        java.lang.String str62 = student57.getEmail();
        student57.setPassword("");
        team_001.VirtualBook virtualBook67 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook67.ID = '4';
        int int70 = student57.checkOverdue((team_001.Item) virtualBook67);
        java.lang.String str71 = virtualBook67.getTitle();
        int int72 = libraryFacade34.checkOverdue((team_001.Client) student42, (team_001.Item) virtualBook67);
        team_001.Faculty faculty77 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter80 = new team_001.Newsletter("hi!", "");
        faculty77.subscribe(newsletter80);
        java.util.ArrayList<java.lang.String> strList82 = faculty77.getCourses();
        libraryFacade34.bookKeeping("", strList82);
        team_001.Library library84 = libraryFacade34.getLibrary();
        team_001.UserBuilder userBuilder85 = userBuilder0.setLibrary(library84);
        team_001.UserBuilder userBuilder87 = userBuilder85.setUsername("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "" + "'", str47.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "" + "'", str62.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str71 + "' != '" + "hi!" + "'", str71.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder87);
    }

    @Test
    public void test733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test733");
        team_001.LibraryFacade libraryFacade8 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        libraryFacade8.bookKeeping("hi!", strList12);
        team_001.LibraryFacade libraryFacade18 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        libraryFacade18.bookKeeping("hi!", strList22);
        libraryFacade8.bookKeeping("", strList22);
        team_001.Student student26 = new team_001.Student("hi!", "", "hi!", strList22);
        team_001.Student student27 = new team_001.Student("", "hi!", "hi!", strList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test734");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        student10.setEmail("hi!");
        team_001.Magazine magazine15 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean16 = student10.isBorrowed((team_001.Item) magazine15);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int28 = student24.checkOverdue((team_001.Item) virtualBook27);
        java.lang.Boolean boolean29 = student10.isBorrowed((team_001.Item) virtualBook27);
        student10.setPassword("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap32 = student10.borrowed;
        team_001.Item item33 = null;
        int int34 = libraryFacade2.checkOverdue((team_001.Client) student10, item33);
        team_001.Faculty faculty45 = new team_001.Faculty("hi!", "hi!", "hi!");
        java.util.ArrayList<java.lang.String> strList46 = faculty45.getCourses();
        team_001.Student student47 = new team_001.Student("", "", "hi!", strList46);
        team_001.Student student48 = new team_001.Student("", "", "", strList46);
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("hi!", strList46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList46);
    }

    @Test
    public void test735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test735");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.LibraryFacade libraryFacade17 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        libraryFacade17.bookKeeping("hi!", strList21);
        libraryFacade7.bookKeeping("", strList21);
        team_001.Library library25 = libraryFacade7.getLibrary();
        team_001.Library library26 = libraryFacade7.getLibrary();
        team_001.Faculty faculty30 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook33 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean34 = libraryFacade7.borrowItem((team_001.Client) faculty30, (team_001.Item) virtualBook33);
        int int35 = virtualBook33.getID();
        int int36 = virtualBook33.getID();
        java.lang.Object obj37 = virtualBook33.clone();
        int int38 = client4.checkOverdue((team_001.Item) virtualBook33);
        java.lang.Class<?> wildcardClass39 = client4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20608 + "'", int35 == 20608);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20608 + "'", int36 == 20608);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test736");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter6 = new team_001.Newsletter("hi!", "");
        faculty3.subscribe(newsletter6);
        team_001.PhysicalBook physicalBook10 = new team_001.PhysicalBook("", "");
        faculty3.returnItem((team_001.Item) physicalBook10);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = null;
        faculty3.setBorrowed(itemMap12);
        java.util.ArrayList<java.lang.String> strList14 = faculty3.getCourses();
        int int15 = faculty3.getId();
        team_001.VirtualBook virtualBook18 = team_001.ItemFactory.createVirtualBook("hi!", "");
        java.lang.String str19 = virtualBook18.getAuthor();
        int int20 = virtualBook18.ID;
        virtualBook18.ID = 5689;
        virtualBook18.ID = 553;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean25 = faculty3.isBorrowed((team_001.Item) virtualBook18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.HashMap.containsKey(Object)\" because \"this.borrowed\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1436 + "'", int15 == 1436);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "" + "'", str19.equals(""));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20616 + "'", int20 == 20616);
    }

    @Test
    public void test737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test737");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Client client27 = userBuilder26.buildStudent();
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        team_001.LibraryFacade libraryFacade40 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        libraryFacade40.bookKeeping("hi!", strList44);
        libraryFacade30.bookKeeping("", strList44);
        team_001.Library library48 = libraryFacade30.getLibrary();
        team_001.Library library49 = libraryFacade30.getLibrary();
        team_001.Faculty faculty53 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook56 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean57 = libraryFacade30.borrowItem((team_001.Client) faculty53, (team_001.Item) virtualBook56);
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        team_001.Student student65 = new team_001.Student("", "", "hi!", strList63);
        student65.setEmail("hi!");
        student65.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap70 = student65.borrowed;
        student65.setUsername("");
        team_001.Newsletter newsletter75 = new team_001.Newsletter("hi!", "hi!");
        student65.unsubscribe(newsletter75);
        java.lang.Object obj77 = newsletter75.clone();
        faculty53.unsubscribe(newsletter75);
        java.lang.Boolean boolean79 = client27.isBorrowed((team_001.Item) newsletter75);
        client27.setId(47);
        team_001.VirtualBook virtualBook84 = new team_001.VirtualBook("", "hi!");
        java.lang.Boolean boolean85 = client27.isBorrowed((team_001.Item) virtualBook84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85.equals(false));
    }

    @Test
    public void test738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test738");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap17 = libraryFacade2.getInventory();
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        team_001.Student student47 = new team_001.Student("", "", "hi!", strList45);
        student47.setEmail("hi!");
        student47.setEmail("hi!");
        team_001.PhysicalBook physicalBook54 = new team_001.PhysicalBook("", "hi!");
        boolean boolean55 = libraryFacade20.borrowItem((team_001.Client) student47, (team_001.Item) physicalBook54);
        java.lang.String str56 = student47.getEmail();
        team_001.Magazine magazine59 = new team_001.Magazine("", "hi!");
        int int60 = magazine59.getID();
        boolean boolean61 = libraryFacade2.borrowItem((team_001.Client) student47, (team_001.Item) magazine59);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap62 = libraryFacade2.getInventory();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        team_001.Student student70 = new team_001.Student("", "", "hi!", strList68);
        student70.setEmail("hi!");
        team_001.Magazine magazine75 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean76 = student70.isBorrowed((team_001.Item) magazine75);
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        team_001.Student student84 = new team_001.Student("", "", "hi!", strList82);
        team_001.VirtualBook virtualBook87 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int88 = student84.checkOverdue((team_001.Item) virtualBook87);
        java.lang.Boolean boolean89 = student70.isBorrowed((team_001.Item) virtualBook87);
        student70.setPassword("hi!");
        team_001.Magazine magazine94 = new team_001.Magazine("hi!", "");
        magazine94.ID = 833;
        int int97 = magazine94.ID;
        libraryFacade2.returnItem((team_001.Client) student70, (team_001.Item) magazine94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "hi!" + "'", str56.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 20657 + "'", int60 == 20657);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 833 + "'", int97 == 833);
    }

    @Test
    public void test739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test739");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        team_001.Client client9 = userManagement1.writeUser("hi!", "", "hi!", "");
        java.lang.String str11 = userManagement1.getType("hi!");
        team_001.Client client16 = userManagement1.writeUser("hi!", "hi!", "hi!", "");
        team_001.Client client21 = userManagement1.writeUser("hi!", "hi!", "", "");
        java.lang.String str23 = userManagement1.getType("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test740");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        java.lang.String str4 = userBuilder0.email;
        team_001.UserBuilder userBuilder6 = userBuilder0.setPassword("hi!");
        java.lang.String str7 = userBuilder0.password;
        team_001.UserBuilder userBuilder9 = userBuilder0.setUsername("hi!");
        team_001.Client client10 = userBuilder9.buildVisitor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client10);
    }

    @Test
    public void test741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test741");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        team_001.Faculty faculty13 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter16 = new team_001.Newsletter("hi!", "");
        faculty13.subscribe(newsletter16);
        team_001.PhysicalBook physicalBook20 = new team_001.PhysicalBook("", "");
        faculty13.returnItem((team_001.Item) physicalBook20);
        java.util.ArrayList<java.lang.String> strList22 = faculty13.getCourses();
        java.util.ArrayList<java.lang.String> strList23 = faculty13.getCourses();
        team_001.LibraryFacade libraryFacade26 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        team_001.Student student34 = new team_001.Student("", "", "hi!", strList32);
        team_001.Magazine magazine37 = new team_001.Magazine("", "hi!");
        student34.returnItem((team_001.Item) magazine37);
        java.lang.String str39 = student34.getEmail();
        student34.setPassword("");
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        team_001.Student student49 = new team_001.Student("", "", "hi!", strList47);
        team_001.Magazine magazine52 = new team_001.Magazine("", "hi!");
        student49.returnItem((team_001.Item) magazine52);
        java.lang.String str54 = student49.getEmail();
        student49.setPassword("");
        team_001.VirtualBook virtualBook59 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook59.ID = '4';
        int int62 = student49.checkOverdue((team_001.Item) virtualBook59);
        java.lang.String str63 = virtualBook59.getTitle();
        int int64 = libraryFacade26.checkOverdue((team_001.Client) student34, (team_001.Item) virtualBook59);
        int int65 = virtualBook59.getID();
        boolean boolean66 = libraryFacade2.borrowItem((team_001.Client) faculty13, (team_001.Item) virtualBook59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "" + "'", str39.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "" + "'", str54.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "hi!" + "'", str63.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test742");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        team_001.Magazine magazine51 = new team_001.Magazine("", "hi!");
        student48.returnItem((team_001.Item) magazine51);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "", "hi!", strList58);
        team_001.Magazine magazine63 = new team_001.Magazine("", "hi!");
        student60.returnItem((team_001.Item) magazine63);
        java.lang.String str65 = student60.getEmail();
        student60.setPassword("");
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook70.ID = '4';
        int int73 = student60.checkOverdue((team_001.Item) virtualBook70);
        java.lang.String str74 = virtualBook70.getTitle();
        boolean boolean75 = student48.borrowItem((team_001.Item) virtualBook70);
        student10.returnItem((team_001.Item) virtualBook70);
        team_001.Newsletter newsletter79 = team_001.ItemFactory.createNewsLetter("", "hi!");
        student10.subscribe(newsletter79);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap81 = student10.borrowed;
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap82 = student10.getSubcribed();
        team_001.CD cD85 = new team_001.CD("", "");
        cD85.ID = 47;
        java.lang.String str88 = cD85.getAuthor();
        boolean boolean89 = student10.borrowItem((team_001.Item) cD85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "hi!" + "'", str74.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str88 + "' != '" + "" + "'", str88.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test743");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder26 = userBuilder23.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
    }

    @Test
    public void test744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test744");
        team_001.NonFacultyStaff nonFacultyStaff3 = new team_001.NonFacultyStaff("", "", "hi!");
        java.lang.String str4 = nonFacultyStaff3.getUsername();
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.LibraryFacade libraryFacade10 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        team_001.Magazine magazine21 = new team_001.Magazine("", "hi!");
        student18.returnItem((team_001.Item) magazine21);
        java.lang.String str23 = student18.getEmail();
        team_001.CD cD26 = new team_001.CD("", "");
        boolean boolean27 = libraryFacade10.borrowItem((team_001.Client) student18, (team_001.Item) cD26);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        team_001.Student student35 = new team_001.Student("", "", "hi!", strList33);
        student35.setEmail("hi!");
        team_001.Magazine magazine40 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean41 = student35.isBorrowed((team_001.Item) magazine40);
        boolean boolean42 = student18.borrowItem((team_001.Item) magazine40);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        team_001.Student student50 = new team_001.Student("", "", "hi!", strList48);
        team_001.Magazine magazine53 = new team_001.Magazine("", "hi!");
        student50.returnItem((team_001.Item) magazine53);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        team_001.Student student62 = new team_001.Student("", "", "hi!", strList60);
        team_001.Magazine magazine65 = new team_001.Magazine("", "hi!");
        student62.returnItem((team_001.Item) magazine65);
        java.lang.String str67 = student62.getEmail();
        student62.setPassword("");
        team_001.VirtualBook virtualBook72 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook72.ID = '4';
        int int75 = student62.checkOverdue((team_001.Item) virtualBook72);
        java.lang.String str76 = virtualBook72.getTitle();
        boolean boolean77 = student50.borrowItem((team_001.Item) virtualBook72);
        team_001.Newsletter newsletter80 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean81 = student50.borrowItem((team_001.Item) newsletter80);
        int int82 = newsletter80.ID;
        int int83 = libraryFacade7.checkOverdue((team_001.Client) student18, (team_001.Item) newsletter80);
        boolean boolean84 = nonFacultyStaff3.borrowItem((team_001.Item) newsletter80);
        int int85 = newsletter80.getID();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "" + "'", str4.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "" + "'", str23.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "" + "'", str67.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "hi!" + "'", str76.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 20780 + "'", int82 == 20780);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 20780 + "'", int85 == 20780);
    }

    @Test
    public void test745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test745");
        team_001.CD cD2 = new team_001.CD("hi!", "");
        int int3 = cD2.getID();
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20781 + "'", int3 == 20781);
    }

    @Test
    public void test746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test746");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter6 = new team_001.Newsletter("hi!", "");
        faculty3.subscribe(newsletter6);
        team_001.PhysicalBook physicalBook10 = new team_001.PhysicalBook("", "");
        faculty3.returnItem((team_001.Item) physicalBook10);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = null;
        faculty3.setBorrowed(itemMap12);
        java.util.ArrayList<java.lang.String> strList14 = faculty3.getCourses();
        int int15 = faculty3.getId();
        java.util.ArrayList<java.lang.String> strList16 = faculty3.getCourses();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1469 + "'", int15 == 1469);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test747");
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        team_001.LibraryFacade libraryFacade24 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        libraryFacade24.bookKeeping("hi!", strList28);
        libraryFacade14.bookKeeping("", strList28);
        team_001.Student student32 = new team_001.Student("hi!", "", "hi!", strList28);
        team_001.Student student33 = new team_001.Student("hi!", "", "hi!", strList28);
        team_001.Student student34 = new team_001.Student("", "hi!", "hi!", strList28);
        team_001.Student student35 = new team_001.Student("hi!", "hi!", "hi!", strList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test748");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        team_001.Client client9 = userManagement1.writeUser("hi!", "", "", "hi!");
        java.lang.String str11 = userManagement1.getType("hi!");
        team_001.Client client16 = userManagement1.writeUser("", "", "", "");
        boolean boolean19 = userManagement1.readUsers("hi!", "");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test749");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        team_001.Magazine magazine22 = new team_001.Magazine("", "hi!");
        student19.returnItem((team_001.Item) magazine22);
        java.lang.String str24 = student19.getEmail();
        student19.setPassword("");
        team_001.VirtualBook virtualBook29 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook29.ID = '4';
        int int32 = student19.checkOverdue((team_001.Item) virtualBook29);
        java.lang.String str33 = virtualBook29.getTitle();
        boolean boolean34 = student7.borrowItem((team_001.Item) virtualBook29);
        team_001.Newsletter newsletter37 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean38 = student7.borrowItem((team_001.Item) newsletter37);
        java.lang.Class<?> wildcardClass39 = student7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "hi!" + "'", str33.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test750");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.lang.String str8 = student7.getEmail();
        student7.setUsername("hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        team_001.VirtualBook virtualBook21 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int22 = student18.checkOverdue((team_001.Item) virtualBook21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        team_001.Student student30 = new team_001.Student("", "", "hi!", strList28);
        student30.setEmail("hi!");
        student30.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap35 = student30.borrowed;
        student30.setUsername("");
        team_001.Newsletter newsletter40 = new team_001.Newsletter("hi!", "hi!");
        student30.unsubscribe(newsletter40);
        java.lang.Object obj42 = newsletter40.clone();
        student18.subscribe(newsletter40);
        java.lang.String str44 = newsletter40.getAuthor();
        student7.subscribe(newsletter40);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        student53.setEmail("hi!");
        student53.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap58 = student53.borrowed;
        team_001.BorrowedIterator borrowedIterator59 = new team_001.BorrowedIterator(itemMap58);
        student7.setBorrowed(itemMap58);
        team_001.BorrowedIterator borrowedIterator61 = new team_001.BorrowedIterator(itemMap58);
        team_001.BorrowedIterator borrowedIterator62 = new team_001.BorrowedIterator(itemMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "hi!" + "'", str44.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap58);
    }

    @Test
    public void test751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test751");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        team_001.Client client9 = userManagement1.writeUser("", "", "hi!", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            team_001.Client client14 = userManagement1.writeUser("", "hi!", "", "");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(client9);
    }

    @Test
    public void test752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test752");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        int int12 = student7.getId();
        student7.setUsername("");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap15 = student7.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1485 + "'", int12 == 1485);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap15);
    }

    @Test
    public void test753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test753");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildVisitor();
        java.lang.String str26 = userBuilder0.password;
        team_001.Client client27 = userBuilder0.buildStudent();
        team_001.UserBuilder userBuilder28 = new team_001.UserBuilder();
        team_001.Client client29 = userBuilder28.buildStudent();
        team_001.UserBuilder userBuilder30 = new team_001.UserBuilder();
        team_001.Client client31 = userBuilder30.buildVisitor();
        team_001.UserBuilder userBuilder33 = userBuilder30.setPassword("hi!");
        userBuilder30.password = "hi!";
        team_001.Client client36 = userBuilder30.buildStudent();
        team_001.Library library37 = userBuilder30.lib;
        team_001.UserBuilder userBuilder38 = new team_001.UserBuilder();
        userBuilder38.email = "hi!";
        team_001.Library library41 = userBuilder38.lib;
        team_001.LibraryFacade libraryFacade44 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        libraryFacade44.bookKeeping("hi!", strList48);
        team_001.LibraryFacade libraryFacade54 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        libraryFacade54.bookKeeping("hi!", strList58);
        libraryFacade44.bookKeeping("", strList58);
        team_001.Library library62 = libraryFacade44.getLibrary();
        team_001.UserBuilder userBuilder63 = userBuilder38.setLibrary(library62);
        userBuilder30.lib = library62;
        userBuilder28.lib = library62;
        team_001.UserBuilder userBuilder66 = userBuilder0.setLibrary(library62);
        java.lang.String str67 = userBuilder66.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test754");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        faculty25.setId((int) (byte) -1);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        team_001.Magazine magazine42 = new team_001.Magazine("", "hi!");
        student39.returnItem((team_001.Item) magazine42);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        team_001.Student student51 = new team_001.Student("", "", "hi!", strList49);
        team_001.Magazine magazine54 = new team_001.Magazine("", "hi!");
        student51.returnItem((team_001.Item) magazine54);
        java.lang.String str56 = student51.getEmail();
        student51.setPassword("");
        team_001.VirtualBook virtualBook61 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook61.ID = '4';
        int int64 = student51.checkOverdue((team_001.Item) virtualBook61);
        java.lang.String str65 = virtualBook61.getTitle();
        boolean boolean66 = student39.borrowItem((team_001.Item) virtualBook61);
        team_001.Newsletter newsletter69 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean70 = student39.borrowItem((team_001.Item) newsletter69);
        int int71 = faculty25.checkOverdue((team_001.Item) newsletter69);
        team_001.UserBuilder userBuilder72 = new team_001.UserBuilder();
        team_001.Client client73 = userBuilder72.buildVisitor();
        team_001.UserBuilder userBuilder75 = userBuilder72.setPassword("hi!");
        userBuilder72.password = "hi!";
        team_001.Client client78 = userBuilder72.buildNonFacultyStaff();
        team_001.CD cD81 = new team_001.CD("", "");
        java.lang.Boolean boolean82 = client78.isBorrowed((team_001.Item) cD81);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap83 = client78.borrowed;
        team_001.BorrowedIterator borrowedIterator84 = new team_001.BorrowedIterator(itemMap83);
        team_001.BorrowedIterator borrowedIterator85 = new team_001.BorrowedIterator(itemMap83);
        faculty25.setBorrowed(itemMap83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "" + "'", str56.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "hi!" + "'", str65.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap83);
    }

    @Test
    public void test755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test755");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap2 = client1.getSubcribed();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap11 = student10.getSubcribed();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        student19.setEmail("hi!");
        team_001.Magazine magazine24 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean25 = student19.isBorrowed((team_001.Item) magazine24);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        team_001.Student student33 = new team_001.Student("", "", "hi!", strList31);
        team_001.VirtualBook virtualBook36 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int37 = student33.checkOverdue((team_001.Item) virtualBook36);
        java.lang.Boolean boolean38 = student19.isBorrowed((team_001.Item) virtualBook36);
        java.lang.String str39 = virtualBook36.getTitle();
        student10.returnItem((team_001.Item) virtualBook36);
        virtualBook36.ID = 10;
        java.lang.Boolean boolean43 = client1.isBorrowed((team_001.Item) virtualBook36);
        team_001.UserBuilder userBuilder44 = new team_001.UserBuilder();
        team_001.Client client45 = userBuilder44.buildVisitor();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        team_001.VirtualBook virtualBook56 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int57 = student53.checkOverdue((team_001.Item) virtualBook56);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap58 = student53.borrowed;
        team_001.BorrowedIterator borrowedIterator59 = new team_001.BorrowedIterator(itemMap58);
        java.util.ArrayList<team_001.Item> itemList60 = client45.checkItemsOverdue(borrowedIterator59);
        java.util.ArrayList<team_001.Item> itemList61 = client1.checkItemsOverdue(borrowedIterator59);
        boolean boolean62 = borrowedIterator59.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item63 = borrowedIterator59.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test756");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = null;
        student7.borrowed = itemMap13;
        java.lang.String str15 = student7.getPassword();
        java.lang.String str16 = student7.getUsername();
        team_001.UserManagement userManagement18 = new team_001.UserManagement("");
        team_001.Client client23 = userManagement18.writeUser("hi!", "hi!", "hi!", "");
        team_001.LibraryFacade libraryFacade26 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        team_001.Student student34 = new team_001.Student("", "", "hi!", strList32);
        team_001.Magazine magazine37 = new team_001.Magazine("", "hi!");
        student34.returnItem((team_001.Item) magazine37);
        java.lang.String str39 = student34.getEmail();
        student34.setPassword("");
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        team_001.Student student49 = new team_001.Student("", "", "hi!", strList47);
        team_001.Magazine magazine52 = new team_001.Magazine("", "hi!");
        student49.returnItem((team_001.Item) magazine52);
        java.lang.String str54 = student49.getEmail();
        student49.setPassword("");
        team_001.VirtualBook virtualBook59 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook59.ID = '4';
        int int62 = student49.checkOverdue((team_001.Item) virtualBook59);
        java.lang.String str63 = virtualBook59.getTitle();
        int int64 = libraryFacade26.checkOverdue((team_001.Client) student34, (team_001.Item) virtualBook59);
        team_001.Magazine magazine67 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean68 = student34.borrowItem((team_001.Item) magazine67);
        team_001.Newsletter newsletter71 = new team_001.Newsletter("hi!", "");
        student34.unsubscribe(newsletter71);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap73 = student34.borrowed;
        team_001.BorrowedIterator borrowedIterator74 = new team_001.BorrowedIterator(itemMap73);
        team_001.BorrowedIterator borrowedIterator75 = new team_001.BorrowedIterator(itemMap73);
        java.util.ArrayList<team_001.Item> itemList76 = client23.checkItemsOverdue(borrowedIterator75);
        boolean boolean77 = borrowedIterator75.hasNext();
        java.util.ArrayList<team_001.Item> itemList78 = student7.checkItemsOverdue(borrowedIterator75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "" + "'", str39.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "" + "'", str54.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "hi!" + "'", str63.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList78);
    }

    @Test
    public void test757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test757");
        team_001.CD cD2 = new team_001.CD("", "");
        cD2.ID = 47;
        java.lang.String str5 = cD2.getAuthor();
        java.lang.String str6 = cD2.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "" + "'", str5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
    }

    @Test
    public void test758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test758");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        userBuilder15.password = "";
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        userBuilder15.lib = library39;
        team_001.LibraryFacade libraryFacade43 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        libraryFacade43.bookKeeping("hi!", strList47);
        team_001.LibraryFacade libraryFacade53 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        libraryFacade53.bookKeeping("hi!", strList57);
        libraryFacade43.bookKeeping("", strList57);
        team_001.Library library61 = libraryFacade43.getLibrary();
        team_001.Library library62 = libraryFacade43.getLibrary();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        team_001.Student student70 = new team_001.Student("", "", "hi!", strList68);
        student70.setEmail("hi!");
        student70.setEmail("hi!");
        team_001.PhysicalBook physicalBook77 = new team_001.PhysicalBook("", "hi!");
        boolean boolean78 = libraryFacade43.borrowItem((team_001.Client) student70, (team_001.Item) physicalBook77);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap79 = libraryFacade43.getInventory();
        team_001.Library library80 = libraryFacade43.getLibrary();
        userBuilder15.lib = library80;
        team_001.Library library82 = userBuilder15.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library82);
    }

    @Test
    public void test759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test759");
        team_001.PhysicalBook physicalBook2 = new team_001.PhysicalBook("hi!", "hi!");
        java.lang.Class<?> wildcardClass3 = physicalBook2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test760");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setUsername("hi!");
        team_001.UserBuilder userBuilder28 = userBuilder26.setUsername("");
        team_001.LibraryFacade libraryFacade31 = new team_001.LibraryFacade("", "");
        team_001.Library library32 = libraryFacade31.getLibrary();
        team_001.UserBuilder userBuilder33 = userBuilder26.setLibrary(library32);
        java.lang.String str34 = userBuilder33.email;
        java.lang.String str35 = userBuilder33.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test761");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        java.lang.String str6 = userBuilder0.password;
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        team_001.Client client8 = userBuilder7.buildVisitor();
        java.lang.String str9 = userBuilder7.password;
        userBuilder7.password = "hi!";
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        team_001.Library library21 = libraryFacade14.getLibrary();
        team_001.UserBuilder userBuilder22 = userBuilder7.setLibrary(library21);
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library21);
        userBuilder0.password = "hi!";
        team_001.Library library26 = userBuilder0.lib;
        team_001.Client client27 = userBuilder0.buildFaculty();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
    }

    @Test
    public void test762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test762");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        team_001.Client client9 = userManagement1.writeUser("hi!", "", "hi!", "");
        java.lang.String str11 = userManagement1.getType("hi!");
        team_001.Client client16 = userManagement1.writeUser("", "hi!", "", "hi!");
        boolean boolean19 = userManagement1.readUsers("", "hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test763");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap10 = libraryFacade2.getInventory();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        java.lang.String str19 = student18.getEmail();
        student18.setUsername("hi!");
        student18.setPassword("");
        team_001.VirtualBook virtualBook26 = new team_001.VirtualBook("hi!", "");
        int int27 = libraryFacade2.checkOverdue((team_001.Client) student18, (team_001.Item) virtualBook26);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        team_001.visitor visitor40 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine43 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean44 = libraryFacade30.borrowItem((team_001.Client) visitor40, (team_001.Item) magazine43);
        visitor40.setPassword("hi!");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        team_001.Student student54 = new team_001.Student("", "", "hi!", strList52);
        team_001.VirtualBook virtualBook57 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int58 = student54.checkOverdue((team_001.Item) virtualBook57);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap59 = student54.borrowed;
        team_001.BorrowedIterator borrowedIterator60 = new team_001.BorrowedIterator(itemMap59);
        team_001.BorrowedIterator borrowedIterator61 = new team_001.BorrowedIterator(itemMap59);
        java.util.ArrayList<team_001.Item> itemList62 = visitor40.checkItemsOverdue(borrowedIterator61);
        boolean boolean63 = borrowedIterator61.hasNext();
        java.util.ArrayList<team_001.Item> itemList64 = student18.checkItemsOverdue(borrowedIterator61);
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item65 = borrowedIterator61.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "" + "'", str19.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList64);
    }

    @Test
    public void test764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test764");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = null;
        student7.borrowed = itemMap13;
        java.lang.String str15 = student7.getPassword();
        java.lang.String str16 = student7.getEmail();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap25 = student24.getSubcribed();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        team_001.Student student33 = new team_001.Student("", "", "hi!", strList31);
        student33.setEmail("hi!");
        team_001.Magazine magazine38 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean39 = student33.isBorrowed((team_001.Item) magazine38);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        team_001.Student student47 = new team_001.Student("", "", "hi!", strList45);
        team_001.VirtualBook virtualBook50 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int51 = student47.checkOverdue((team_001.Item) virtualBook50);
        java.lang.Boolean boolean52 = student33.isBorrowed((team_001.Item) virtualBook50);
        java.lang.String str53 = virtualBook50.getTitle();
        student24.returnItem((team_001.Item) virtualBook50);
        int int55 = virtualBook50.ID;
        boolean boolean56 = student7.borrowItem((team_001.Item) virtualBook50);
        java.lang.String str57 = virtualBook50.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "hi!" + "'", str53.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 21123 + "'", int55 == 21123);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "hi!" + "'", str57.equals("hi!"));
    }

    @Test
    public void test765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test765");
        team_001.LibraryFacade libraryFacade8 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        libraryFacade8.bookKeeping("hi!", strList12);
        team_001.LibraryFacade libraryFacade18 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        libraryFacade18.bookKeeping("hi!", strList22);
        libraryFacade8.bookKeeping("", strList22);
        team_001.Student student26 = new team_001.Student("hi!", "", "", strList22);
        team_001.Student student27 = new team_001.Student("hi!", "hi!", "hi!", strList22);
        team_001.UserBuilder userBuilder28 = new team_001.UserBuilder();
        team_001.Client client29 = userBuilder28.buildVisitor();
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        libraryFacade42.bookKeeping("hi!", strList46);
        libraryFacade32.bookKeeping("", strList46);
        team_001.Library library50 = libraryFacade32.getLibrary();
        team_001.UserBuilder userBuilder51 = userBuilder28.setLibrary(library50);
        team_001.Client client52 = userBuilder51.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder54 = userBuilder51.setPassword("hi!");
        team_001.Client client55 = userBuilder54.buildStudent();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        team_001.Student student63 = new team_001.Student("", "", "hi!", strList61);
        team_001.Magazine magazine66 = new team_001.Magazine("", "hi!");
        student63.returnItem((team_001.Item) magazine66);
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        team_001.Student student75 = new team_001.Student("", "", "hi!", strList73);
        team_001.Magazine magazine78 = new team_001.Magazine("", "hi!");
        student75.returnItem((team_001.Item) magazine78);
        java.lang.String str80 = student75.getEmail();
        student75.setPassword("");
        team_001.VirtualBook virtualBook85 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook85.ID = '4';
        int int88 = student75.checkOverdue((team_001.Item) virtualBook85);
        java.lang.String str89 = virtualBook85.getTitle();
        boolean boolean90 = student63.borrowItem((team_001.Item) virtualBook85);
        team_001.Newsletter newsletter93 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean94 = student63.borrowItem((team_001.Item) newsletter93);
        client55.unsubscribe(newsletter93);
        java.lang.String str96 = newsletter93.getAuthor();
        student27.returnItem((team_001.Item) newsletter93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "" + "'", str80.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str89 + "' != '" + "hi!" + "'", str89.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str96 + "' != '" + "hi!" + "'", str96.equals("hi!"));
    }

    @Test
    public void test766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test766");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        team_001.Student student29 = new team_001.Student("", "", "hi!", strList27);
        student29.setEmail("hi!");
        student29.setEmail("hi!");
        team_001.PhysicalBook physicalBook36 = new team_001.PhysicalBook("", "hi!");
        boolean boolean37 = libraryFacade2.borrowItem((team_001.Client) student29, (team_001.Item) physicalBook36);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        team_001.Student student45 = new team_001.Student("", "", "hi!", strList43);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap46 = student45.getSubcribed();
        team_001.CD cD49 = team_001.ItemFactory.createCD("hi!", "");
        student45.returnItem((team_001.Item) cD49);
        int int51 = student29.checkOverdue((team_001.Item) cD49);
        java.lang.String str52 = student29.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "hi!" + "'", str52.equals("hi!"));
    }

    @Test
    public void test767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test767");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = null;
        student7.borrowed = itemMap13;
        java.lang.String str15 = student7.getPassword();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        team_001.Student student23 = new team_001.Student("", "", "hi!", strList21);
        team_001.VirtualBook virtualBook26 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int27 = student23.checkOverdue((team_001.Item) virtualBook26);
        int int28 = student23.getId();
        student23.setUsername("");
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        team_001.Student student41 = new team_001.Student("", "", "hi!", strList39);
        team_001.Magazine magazine44 = new team_001.Magazine("", "hi!");
        student41.returnItem((team_001.Item) magazine44);
        java.lang.String str46 = student41.getEmail();
        team_001.CD cD49 = new team_001.CD("", "");
        boolean boolean50 = libraryFacade33.borrowItem((team_001.Client) student41, (team_001.Item) cD49);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        team_001.Student student58 = new team_001.Student("", "", "hi!", strList56);
        student58.setEmail("hi!");
        team_001.Magazine magazine63 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean64 = student58.isBorrowed((team_001.Item) magazine63);
        boolean boolean65 = student41.borrowItem((team_001.Item) magazine63);
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        team_001.Student student73 = new team_001.Student("", "", "hi!", strList71);
        team_001.VirtualBook virtualBook76 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int77 = student73.checkOverdue((team_001.Item) virtualBook76);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap78 = student73.borrowed;
        team_001.BorrowedIterator borrowedIterator79 = new team_001.BorrowedIterator(itemMap78);
        student41.borrowed = itemMap78;
        student23.borrowed = itemMap78;
        team_001.BorrowedIterator borrowedIterator82 = new team_001.BorrowedIterator(itemMap78);
        student7.borrowed = itemMap78;
        team_001.BorrowedIterator borrowedIterator84 = new team_001.BorrowedIterator(itemMap78);
        team_001.BorrowedIterator borrowedIterator85 = new team_001.BorrowedIterator(itemMap78);
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator85.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1535 + "'", int28 == 1535);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "" + "'", str46.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap78);
    }

    @Test
    public void test768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test768");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setPassword("");
        int int10 = student7.getId();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap11 = student7.borrowed;
        team_001.BorrowedIterator borrowedIterator12 = new team_001.BorrowedIterator(itemMap11);
        team_001.BorrowedIterator borrowedIterator13 = new team_001.BorrowedIterator(itemMap11);
        team_001.BorrowedIterator borrowedIterator14 = new team_001.BorrowedIterator(itemMap11);
        // The following exception was thrown during execution in test generation
        try {
            team_001.Item item15 = borrowedIterator14.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1539 + "'", int10 == 1539);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap11);
    }

    @Test
    public void test769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test769");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        java.lang.String str4 = userBuilder0.email;
        java.lang.String str5 = userBuilder0.email;
        team_001.UserBuilder userBuilder7 = userBuilder0.setUsername("");
        team_001.Client client8 = userBuilder0.buildFaculty();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
    }

    @Test
    public void test770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test770");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        student7.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = student7.borrowed;
        team_001.UserBuilder userBuilder13 = new team_001.UserBuilder();
        team_001.Client client14 = userBuilder13.buildVisitor();
        java.lang.String str15 = userBuilder13.password;
        team_001.LibraryFacade libraryFacade18 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        libraryFacade18.bookKeeping("hi!", strList22);
        team_001.LibraryFacade libraryFacade28 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        libraryFacade28.bookKeeping("hi!", strList32);
        libraryFacade18.bookKeeping("", strList32);
        team_001.Library library36 = libraryFacade18.getLibrary();
        team_001.UserBuilder userBuilder37 = userBuilder13.setLibrary(library36);
        team_001.Client client38 = userBuilder13.buildVisitor();
        team_001.LibraryFacade libraryFacade41 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        team_001.Student student49 = new team_001.Student("", "", "hi!", strList47);
        team_001.Magazine magazine52 = new team_001.Magazine("", "hi!");
        student49.returnItem((team_001.Item) magazine52);
        java.lang.String str54 = student49.getEmail();
        team_001.CD cD57 = new team_001.CD("", "");
        boolean boolean58 = libraryFacade41.borrowItem((team_001.Client) student49, (team_001.Item) cD57);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        team_001.Student student66 = new team_001.Student("", "", "hi!", strList64);
        student66.setEmail("hi!");
        team_001.Magazine magazine71 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean72 = student66.isBorrowed((team_001.Item) magazine71);
        boolean boolean73 = student49.borrowItem((team_001.Item) magazine71);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        team_001.Student student81 = new team_001.Student("", "", "hi!", strList79);
        team_001.VirtualBook virtualBook84 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int85 = student81.checkOverdue((team_001.Item) virtualBook84);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap86 = student81.borrowed;
        team_001.BorrowedIterator borrowedIterator87 = new team_001.BorrowedIterator(itemMap86);
        student49.borrowed = itemMap86;
        client38.borrowed = itemMap86;
        student7.setBorrowed(itemMap86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "" + "'", str54.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap86);
    }

    @Test
    public void test771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test771");
        team_001.CD cD2 = new team_001.CD("", "");
        cD2.ID = 47;
        java.lang.String str5 = cD2.getAuthor();
        java.lang.Object obj6 = cD2.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "" + "'", str5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj6);
    }

    @Test
    public void test772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test772");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.LibraryFacade libraryFacade50 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        libraryFacade50.bookKeeping("hi!", strList54);
        team_001.Library library57 = libraryFacade50.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap58 = libraryFacade50.getInventory();
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        team_001.Student student66 = new team_001.Student("", "", "hi!", strList64);
        java.lang.String str67 = student66.getEmail();
        student66.setUsername("hi!");
        student66.setPassword("");
        team_001.VirtualBook virtualBook74 = new team_001.VirtualBook("hi!", "");
        int int75 = libraryFacade50.checkOverdue((team_001.Client) student66, (team_001.Item) virtualBook74);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap76 = libraryFacade50.getInventory();
        team_001.Faculty faculty81 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter84 = new team_001.Newsletter("hi!", "");
        faculty81.subscribe(newsletter84);
        java.util.ArrayList<java.lang.String> strList86 = faculty81.getCourses();
        java.util.ArrayList<java.lang.String> strList87 = faculty81.getCourses();
        libraryFacade50.bookKeeping("hi!", strList87);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap89 = libraryFacade50.getInventory();
        team_001.Library library90 = libraryFacade50.getLibrary();
        team_001.UserBuilder userBuilder91 = userBuilder24.setLibrary(library90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "" + "'", str67.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder91);
    }

    @Test
    public void test773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test773");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        team_001.Client client6 = userManagement1.writeUser("", "hi!", "hi!", "hi!");
        boolean boolean9 = userManagement1.readUsers("hi!", "hi!");
        boolean boolean12 = userManagement1.readUsers("hi!", "");
        team_001.Client client17 = userManagement1.writeUser("hi!", "", "", "");
        team_001.Client client22 = userManagement1.writeUser("", "hi!", "", "hi!");
        boolean boolean25 = userManagement1.readUsers("", "");
        java.lang.String str27 = userManagement1.getType("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test774");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.lang.String str8 = student7.getEmail();
        student7.setUsername("hi!");
        student7.setPassword("");
        int int13 = student7.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1556 + "'", int13 == 1556);
    }

    @Test
    public void test775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test775");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.UserBuilder userBuilder49 = userBuilder24.setUsername("hi!");
        team_001.Client client50 = userBuilder24.buildFaculty();
        team_001.UserBuilder userBuilder51 = new team_001.UserBuilder();
        team_001.Client client52 = userBuilder51.buildVisitor();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "", "hi!", strList58);
        team_001.VirtualBook virtualBook63 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int64 = student60.checkOverdue((team_001.Item) virtualBook63);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap65 = student60.borrowed;
        team_001.BorrowedIterator borrowedIterator66 = new team_001.BorrowedIterator(itemMap65);
        java.util.ArrayList<team_001.Item> itemList67 = client52.checkItemsOverdue(borrowedIterator66);
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        team_001.Student student75 = new team_001.Student("", "", "hi!", strList73);
        team_001.VirtualBook virtualBook78 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int79 = student75.checkOverdue((team_001.Item) virtualBook78);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap80 = student75.borrowed;
        team_001.BorrowedIterator borrowedIterator81 = new team_001.BorrowedIterator(itemMap80);
        client52.setBorrowed(itemMap80);
        client50.setBorrowed(itemMap80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap80);
    }

    @Test
    public void test776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test776");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildNonFacultyStaff();
        team_001.CD cD9 = new team_001.CD("", "");
        java.lang.Boolean boolean10 = client6.isBorrowed((team_001.Item) cD9);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap11 = client6.borrowed;
        team_001.BorrowedIterator borrowedIterator12 = new team_001.BorrowedIterator(itemMap11);
        team_001.BorrowedIterator borrowedIterator13 = new team_001.BorrowedIterator(itemMap11);
        team_001.BorrowedIterator borrowedIterator14 = new team_001.BorrowedIterator(itemMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap11);
    }

    @Test
    public void test777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test777");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter6 = new team_001.Newsletter("hi!", "");
        faculty3.subscribe(newsletter6);
        java.util.ArrayList<java.lang.String> strList8 = faculty3.getCourses();
        faculty3.setUsername("hi!");
        faculty3.setUsername("");
        java.util.ArrayList<java.lang.String> strList13 = faculty3.getCourses();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test778");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder24.buildStudent();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap26 = client25.getSubcribed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap26);
    }

    @Test
    public void test779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test779");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "");
        team_001.Faculty faculty6 = new team_001.Faculty("", "", "hi!");
        team_001.visitor visitor10 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter13 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str14 = newsletter13.getTitle();
        visitor10.subscribe(newsletter13);
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) faculty6, (team_001.Item) newsletter13);
        team_001.visitor visitor20 = new team_001.visitor("", "hi!", "hi!");
        team_001.VirtualBook virtualBook23 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook23.ID = '4';
        java.lang.Boolean boolean26 = visitor20.isBorrowed((team_001.Item) virtualBook23);
        int int27 = faculty6.checkOverdue((team_001.Item) virtualBook23);
        java.lang.String str28 = virtualBook23.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
    }

    @Test
    public void test780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test780");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        java.lang.String str6 = userBuilder0.password;
        java.lang.String str7 = userBuilder0.password;
        team_001.Client client8 = userBuilder0.buildNonFacultyStaff();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap9 = client8.getSubcribed();
        team_001.NonFacultyStaff nonFacultyStaff13 = new team_001.NonFacultyStaff("hi!", "", "");
        java.lang.String str14 = nonFacultyStaff13.getUsername();
        nonFacultyStaff13.setUsername("");
        team_001.Newsletter newsletter19 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.Boolean boolean20 = nonFacultyStaff13.isBorrowed((team_001.Item) newsletter19);
        int int21 = client8.checkOverdue((team_001.Item) newsletter19);
        java.lang.String str22 = newsletter19.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!" + "'", str14.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "hi!" + "'", str22.equals("hi!"));
    }

    @Test
    public void test781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test781");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        java.lang.String str6 = userBuilder0.password;
        team_001.Library library7 = null;
        team_001.UserBuilder userBuilder8 = userBuilder0.setLibrary(library7);
        team_001.Client client9 = userBuilder0.buildStudent();
        userBuilder0.email = "hi!";
        team_001.Client client12 = userBuilder0.buildStudent();
        team_001.UserBuilder userBuilder13 = new team_001.UserBuilder();
        team_001.Client client14 = userBuilder13.buildVisitor();
        java.lang.String str15 = userBuilder13.password;
        userBuilder13.password = "hi!";
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.Library library27 = libraryFacade20.getLibrary();
        team_001.UserBuilder userBuilder28 = userBuilder13.setLibrary(library27);
        userBuilder0.lib = library27;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder28);
    }

    @Test
    public void test782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test782");
        team_001.CD cD2 = new team_001.CD("", "hi!");
        java.lang.Object obj3 = cD2.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj3);
    }

    @Test
    public void test783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test783");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "");
        team_001.Library library3 = libraryFacade2.getLibrary();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap12 = student11.getSubcribed();
        team_001.CD cD15 = team_001.ItemFactory.createCD("hi!", "");
        student11.returnItem((team_001.Item) cD15);
        student11.setEmail("hi!");
        team_001.Faculty faculty22 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter25 = new team_001.Newsletter("hi!", "");
        faculty22.subscribe(newsletter25);
        team_001.PhysicalBook physicalBook29 = new team_001.PhysicalBook("", "");
        faculty22.returnItem((team_001.Item) physicalBook29);
        libraryFacade2.returnItem((team_001.Client) student11, (team_001.Item) physicalBook29);
        team_001.LibraryFacade libraryFacade35 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        libraryFacade35.bookKeeping("hi!", strList39);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        team_001.Student student49 = new team_001.Student("", "", "hi!", strList47);
        student49.setEmail("hi!");
        student49.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap54 = student49.borrowed;
        student49.setUsername("");
        team_001.VirtualBook virtualBook59 = new team_001.VirtualBook("hi!", "hi!");
        int int60 = libraryFacade35.checkOverdue((team_001.Client) student49, (team_001.Item) virtualBook59);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        libraryFacade35.bookKeeping("", strList64);
        libraryFacade2.bookKeeping("hi!", strList64);
        team_001.UserBuilder userBuilder68 = new team_001.UserBuilder();
        team_001.Client client69 = userBuilder68.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap70 = client69.getSubcribed();
        int int71 = client69.getId();
        team_001.UserBuilder userBuilder72 = new team_001.UserBuilder();
        team_001.Client client73 = userBuilder72.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap74 = client73.getSubcribed();
        team_001.UserBuilder userBuilder75 = new team_001.UserBuilder();
        team_001.Client client76 = userBuilder75.buildVisitor();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        team_001.Student student84 = new team_001.Student("", "", "hi!", strList82);
        team_001.VirtualBook virtualBook87 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int88 = student84.checkOverdue((team_001.Item) virtualBook87);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap89 = student84.borrowed;
        team_001.BorrowedIterator borrowedIterator90 = new team_001.BorrowedIterator(itemMap89);
        java.util.ArrayList<team_001.Item> itemList91 = client76.checkItemsOverdue(borrowedIterator90);
        team_001.Newsletter newsletter94 = new team_001.Newsletter("hi!", "");
        client76.subscribe(newsletter94);
        client73.returnItem((team_001.Item) newsletter94);
        int int97 = libraryFacade2.checkOverdue(client69, (team_001.Item) newsletter94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap70);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1580 + "'", int71 == 1580);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test784");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        team_001.Student student29 = new team_001.Student("", "", "hi!", strList27);
        student29.setEmail("hi!");
        student29.setEmail("hi!");
        team_001.PhysicalBook physicalBook36 = new team_001.PhysicalBook("", "hi!");
        boolean boolean37 = libraryFacade2.borrowItem((team_001.Client) student29, (team_001.Item) physicalBook36);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap38 = libraryFacade2.getInventory();
        team_001.Library library39 = libraryFacade2.getLibrary();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        team_001.Student student47 = new team_001.Student("", "", "hi!", strList45);
        team_001.Newsletter newsletter50 = new team_001.Newsletter("hi!", "hi!");
        student47.unsubscribe(newsletter50);
        int int52 = student47.getId();
        team_001.VirtualBook virtualBook55 = team_001.ItemFactory.createVirtualBook("hi!", "");
        java.lang.String str56 = virtualBook55.getAuthor();
        int int57 = virtualBook55.ID;
        virtualBook55.ID = 5689;
        virtualBook55.ID = 553;
        libraryFacade2.returnItem((team_001.Client) student47, (team_001.Item) virtualBook55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1585 + "'", int52 == 1585);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "" + "'", str56.equals(""));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 21467 + "'", int57 == 21467);
    }

    @Test
    public void test785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test785");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setUsername("hi!");
        team_001.UserBuilder userBuilder28 = userBuilder26.setUsername("");
        java.lang.String str29 = userBuilder26.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test786");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        team_001.Client client9 = userManagement1.writeUser("hi!", "", "hi!", "");
        java.lang.String str11 = userManagement1.getType("hi!");
        team_001.Client client16 = userManagement1.writeUser("hi!", "hi!", "hi!", "");
        team_001.Client client21 = userManagement1.writeUser("hi!", "hi!", "", "");
        boolean boolean24 = userManagement1.readUsers("hi!", "hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test787");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        team_001.Client client6 = userManagement1.writeUser("hi!", "hi!", "hi!", "");
        java.lang.String str7 = client6.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
    }

    @Test
    public void test788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test788");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        boolean boolean4 = userManagement1.readUsers("hi!", "");
        team_001.Client client9 = userManagement1.writeUser("", "", "hi!", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = userManagement1.readUsers("hi!", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(client9);
    }

    @Test
    public void test789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test789");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        team_001.Client client3 = userBuilder0.buildVisitor();
        userBuilder0.email = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
    }

    @Test
    public void test790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test790");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Student student11 = new team_001.Student("", "hi!", "", strList8);
        team_001.PhysicalBook physicalBook14 = team_001.ItemFactory.createPhysicalBook("hi!", "hi!");
        student11.returnItem((team_001.Item) physicalBook14);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap16 = student11.getSubcribed();
        student11.setPassword("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap16);
    }

    @Test
    public void test791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test791");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "");
        team_001.Faculty faculty6 = new team_001.Faculty("", "", "hi!");
        team_001.visitor visitor10 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter13 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str14 = newsletter13.getTitle();
        visitor10.subscribe(newsletter13);
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) faculty6, (team_001.Item) newsletter13);
        team_001.Library library17 = libraryFacade2.getLibrary();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library17);
    }

    @Test
    public void test792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test792");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        java.lang.String str6 = userManagement1.getType("");
        boolean boolean9 = userManagement1.readUsers("hi!", "");
        java.lang.String str11 = userManagement1.getType("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test793");
        team_001.Client.current_id = 15716;
    }

    @Test
    public void test794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test794");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("hi!");
        team_001.Client client6 = userManagement1.writeUser("", "hi!", "hi!", "");
        boolean boolean9 = userManagement1.readUsers("hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = userManagement1.getType("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test795");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setPassword("");
        int int10 = student7.getId();
        java.lang.String str11 = student7.getPassword();
        student7.setId(0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15717 + "'", int10 == 15717);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
    }

    @Test
    public void test796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test796");
        team_001.VirtualBook virtualBook2 = new team_001.VirtualBook("", "");
        java.lang.Object obj3 = virtualBook2.clone();
        java.lang.Object obj4 = virtualBook2.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj4);
    }

    @Test
    public void test797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test797");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        team_001.VirtualBook virtualBook19 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook19.ID = '4';
        virtualBook19.ID = (short) 100;
        boolean boolean24 = visitor12.borrowItem((team_001.Item) virtualBook19);
        java.lang.String str25 = virtualBook19.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "hi!" + "'", str25.equals("hi!"));
    }

    @Test
    public void test798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test798");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap8 = student7.getSubcribed();
        student7.setPassword("hi!");
        team_001.LibraryFacade libraryFacade13 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        libraryFacade13.bookKeeping("hi!", strList17);
        team_001.Library library20 = libraryFacade13.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap21 = libraryFacade13.getInventory();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        team_001.Student student29 = new team_001.Student("", "", "hi!", strList27);
        java.lang.String str30 = student29.getEmail();
        student29.setUsername("hi!");
        student29.setPassword("");
        team_001.VirtualBook virtualBook37 = new team_001.VirtualBook("hi!", "");
        int int38 = libraryFacade13.checkOverdue((team_001.Client) student29, (team_001.Item) virtualBook37);
        team_001.LibraryFacade libraryFacade41 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        libraryFacade41.bookKeeping("hi!", strList45);
        team_001.visitor visitor51 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine54 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean55 = libraryFacade41.borrowItem((team_001.Client) visitor51, (team_001.Item) magazine54);
        visitor51.setPassword("hi!");
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        team_001.Student student65 = new team_001.Student("", "", "hi!", strList63);
        team_001.VirtualBook virtualBook68 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int69 = student65.checkOverdue((team_001.Item) virtualBook68);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap70 = student65.borrowed;
        team_001.BorrowedIterator borrowedIterator71 = new team_001.BorrowedIterator(itemMap70);
        team_001.BorrowedIterator borrowedIterator72 = new team_001.BorrowedIterator(itemMap70);
        java.util.ArrayList<team_001.Item> itemList73 = visitor51.checkItemsOverdue(borrowedIterator72);
        boolean boolean74 = borrowedIterator72.hasNext();
        java.util.ArrayList<team_001.Item> itemList75 = student29.checkItemsOverdue(borrowedIterator72);
        team_001.UserBuilder userBuilder76 = new team_001.UserBuilder();
        team_001.Client client77 = userBuilder76.buildVisitor();
        team_001.UserBuilder userBuilder79 = userBuilder76.setPassword("hi!");
        userBuilder76.password = "hi!";
        team_001.Client client82 = userBuilder76.buildNonFacultyStaff();
        team_001.CD cD85 = new team_001.CD("", "");
        java.lang.Boolean boolean86 = client82.isBorrowed((team_001.Item) cD85);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap87 = client82.borrowed;
        team_001.BorrowedIterator borrowedIterator88 = new team_001.BorrowedIterator(itemMap87);
        team_001.BorrowedIterator borrowedIterator89 = new team_001.BorrowedIterator(itemMap87);
        java.util.ArrayList<team_001.Item> itemList90 = student29.checkItemsOverdue(borrowedIterator89);
        java.util.ArrayList<team_001.Item> itemList91 = student7.checkItemsOverdue(borrowedIterator89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList91);
    }

    @Test
    public void test799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test799");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        team_001.Client client3 = userBuilder0.buildVisitor();
        team_001.Client client4 = userBuilder0.buildStudent();
        team_001.Client client5 = userBuilder0.buildStudent();
        userBuilder0.email = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
    }

    @Test
    public void test800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test800");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        student19.setEmail("hi!");
        student19.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap24 = student19.borrowed;
        student19.setUsername("");
        team_001.Newsletter newsletter29 = new team_001.Newsletter("hi!", "hi!");
        student19.unsubscribe(newsletter29);
        java.lang.Object obj31 = newsletter29.clone();
        student7.subscribe(newsletter29);
        newsletter29.ID = 1;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj31);
    }

    @Test
    public void test801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test801");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildVisitor();
        team_001.NonFacultyStaff nonFacultyStaff10 = new team_001.NonFacultyStaff("", "", "hi!");
        team_001.UserBuilder userBuilder11 = new team_001.UserBuilder();
        team_001.Client client12 = userBuilder11.buildVisitor();
        team_001.Client client13 = userBuilder11.buildNonFacultyStaff();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        team_001.Student student21 = new team_001.Student("", "", "hi!", strList19);
        team_001.Magazine magazine24 = new team_001.Magazine("", "hi!");
        student21.returnItem((team_001.Item) magazine24);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        team_001.Student student33 = new team_001.Student("", "", "hi!", strList31);
        team_001.Magazine magazine36 = new team_001.Magazine("", "hi!");
        student33.returnItem((team_001.Item) magazine36);
        java.lang.String str38 = student33.getEmail();
        student33.setPassword("");
        team_001.VirtualBook virtualBook43 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook43.ID = '4';
        int int46 = student33.checkOverdue((team_001.Item) virtualBook43);
        java.lang.String str47 = virtualBook43.getTitle();
        boolean boolean48 = student21.borrowItem((team_001.Item) virtualBook43);
        client13.returnItem((team_001.Item) virtualBook43);
        int int50 = virtualBook43.getID();
        nonFacultyStaff10.returnItem((team_001.Item) virtualBook43);
        team_001.LibraryFacade libraryFacade54 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        libraryFacade54.bookKeeping("hi!", strList58);
        team_001.visitor visitor64 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine67 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean68 = libraryFacade54.borrowItem((team_001.Client) visitor64, (team_001.Item) magazine67);
        visitor64.setPassword("hi!");
        java.lang.String str71 = visitor64.getEmail();
        team_001.CD cD74 = new team_001.CD("hi!", "");
        java.lang.Boolean boolean75 = visitor64.isBorrowed((team_001.Item) cD74);
        int int76 = nonFacultyStaff10.checkOverdue((team_001.Item) cD74);
        client6.returnItem((team_001.Item) cD74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "" + "'", str38.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "hi!" + "'", str47.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str71 + "' != '" + "hi!" + "'", str71.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test802");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        team_001.Client client9 = userManagement1.writeUser("hi!", "", "", "hi!");
        java.lang.String str11 = userManagement1.getType("hi!");
        boolean boolean14 = userManagement1.readUsers("hi!", "");
        boolean boolean17 = userManagement1.readUsers("hi!", "hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test803");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        student10.setPassword("");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        team_001.Student student29 = new team_001.Student("", "", "hi!", strList27);
        student29.setEmail("hi!");
        team_001.Magazine magazine34 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean35 = student29.isBorrowed((team_001.Item) magazine34);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        team_001.Student student43 = new team_001.Student("", "", "hi!", strList41);
        team_001.VirtualBook virtualBook46 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int47 = student43.checkOverdue((team_001.Item) virtualBook46);
        java.lang.Boolean boolean48 = student29.isBorrowed((team_001.Item) virtualBook46);
        student10.returnItem((team_001.Item) virtualBook46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48.equals(false));
    }

    @Test
    public void test804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test804");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        team_001.Client client4 = userBuilder3.buildStudent();
        java.lang.String str5 = userBuilder3.password;
        team_001.UserBuilder userBuilder7 = userBuilder3.setUsername("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder7);
    }

    @Test
    public void test805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test805");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Student student11 = new team_001.Student("", "hi!", "", strList8);
        team_001.PhysicalBook physicalBook14 = team_001.ItemFactory.createPhysicalBook("hi!", "hi!");
        student11.returnItem((team_001.Item) physicalBook14);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap16 = student11.borrowed;
        team_001.BorrowedIterator borrowedIterator17 = new team_001.BorrowedIterator(itemMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap16);
    }

    @Test
    public void test806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test806");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        userBuilder0.password = "";
        team_001.UserBuilder userBuilder20 = userBuilder0.setUsername("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder20);
    }

    @Test
    public void test807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test807");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Client client27 = userBuilder23.buildNonFacultyStaff();
        team_001.Client client28 = userBuilder23.buildNonFacultyStaff();
        userBuilder23.email = "";
        team_001.Client client31 = userBuilder23.buildFaculty();
        team_001.Client client32 = userBuilder23.buildNonFacultyStaff();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client32);
    }

    @Test
    public void test808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test808");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.Client client5 = userBuilder0.buildVisitor();
        team_001.Client client6 = userBuilder0.buildFaculty();
        team_001.LibraryFacade libraryFacade9 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        libraryFacade9.bookKeeping("hi!", strList13);
        team_001.LibraryFacade libraryFacade19 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        libraryFacade19.bookKeeping("hi!", strList23);
        libraryFacade9.bookKeeping("", strList23);
        team_001.Library library27 = libraryFacade9.getLibrary();
        team_001.Library library28 = libraryFacade9.getLibrary();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        team_001.Student student36 = new team_001.Student("", "", "hi!", strList34);
        student36.setEmail("hi!");
        student36.setEmail("hi!");
        team_001.PhysicalBook physicalBook43 = new team_001.PhysicalBook("", "hi!");
        boolean boolean44 = libraryFacade9.borrowItem((team_001.Client) student36, (team_001.Item) physicalBook43);
        team_001.Library library45 = libraryFacade9.getLibrary();
        team_001.UserBuilder userBuilder46 = userBuilder0.setLibrary(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder46);
    }

    @Test
    public void test809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test809");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter6 = new team_001.Newsletter("hi!", "");
        faculty3.subscribe(newsletter6);
        java.util.ArrayList<java.lang.String> strList8 = faculty3.getCourses();
        faculty3.setUsername("hi!");
        java.util.ArrayList<java.lang.String> strList11 = faculty3.getCourses();
        java.util.ArrayList<java.lang.String> strList12 = faculty3.getCourses();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = faculty3.borrowed;
        team_001.BorrowedIterator borrowedIterator14 = new team_001.BorrowedIterator(itemMap13);
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator14.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap13);
    }

    @Test
    public void test810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test810");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.Library library25 = userBuilder23.lib;
        java.lang.String str26 = userBuilder23.email;
        team_001.UserBuilder userBuilder27 = new team_001.UserBuilder();
        team_001.Client client28 = userBuilder27.buildVisitor();
        team_001.UserBuilder userBuilder30 = userBuilder27.setPassword("hi!");
        userBuilder27.password = "hi!";
        java.lang.String str33 = userBuilder27.password;
        team_001.Client client34 = userBuilder27.buildNonFacultyStaff();
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "");
        team_001.Library library38 = libraryFacade37.getLibrary();
        userBuilder27.lib = library38;
        team_001.UserBuilder userBuilder40 = userBuilder23.setLibrary(library38);
        team_001.UserBuilder userBuilder42 = userBuilder23.setUsername("hi!");
        team_001.Client client43 = userBuilder23.buildStudent();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "hi!" + "'", str33.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client43);
    }

    @Test
    public void test811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test811");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        userBuilder0.password = "";
        java.lang.String str5 = userBuilder0.password;
        team_001.Library library6 = userBuilder0.lib;
        java.lang.String str7 = userBuilder0.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "" + "'", str5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
    }

    @Test
    public void test812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test812");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        team_001.Magazine magazine12 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean13 = student7.isBorrowed((team_001.Item) magazine12);
        team_001.UserBuilder userBuilder14 = new team_001.UserBuilder();
        userBuilder14.email = "hi!";
        team_001.Library library17 = userBuilder14.lib;
        team_001.Client client18 = userBuilder14.buildVisitor();
        team_001.Client client19 = userBuilder14.buildFaculty();
        java.lang.String str20 = userBuilder14.password;
        team_001.UserBuilder userBuilder21 = new team_001.UserBuilder();
        team_001.Client client22 = userBuilder21.buildVisitor();
        java.lang.String str23 = userBuilder21.password;
        userBuilder21.password = "hi!";
        team_001.LibraryFacade libraryFacade28 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        libraryFacade28.bookKeeping("hi!", strList32);
        team_001.Library library35 = libraryFacade28.getLibrary();
        team_001.UserBuilder userBuilder36 = userBuilder21.setLibrary(library35);
        team_001.UserBuilder userBuilder37 = userBuilder14.setLibrary(library35);
        team_001.Client client38 = userBuilder14.buildFaculty();
        team_001.VirtualBook virtualBook41 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        java.lang.String str42 = virtualBook41.getAuthor();
        java.lang.Boolean boolean43 = client38.isBorrowed((team_001.Item) virtualBook41);
        int int44 = student7.checkOverdue((team_001.Item) virtualBook41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "hi!" + "'", str42.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test813");
        team_001.Faculty faculty3 = new team_001.Faculty("hi!", "hi!", "hi!");
        java.util.ArrayList<java.lang.String> strList4 = faculty3.getCourses();
        java.lang.String str5 = faculty3.getEmail();
        faculty3.setUsername("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
    }

    @Test
    public void test814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test814");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.Client client5 = userBuilder0.buildVisitor();
        team_001.Client client6 = userBuilder0.buildNonFacultyStaff();
        team_001.Client client7 = userBuilder0.buildStudent();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client7);
    }

    @Test
    public void test815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test815");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        team_001.Magazine magazine43 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean44 = student10.borrowItem((team_001.Item) magazine43);
        team_001.Newsletter newsletter47 = new team_001.Newsletter("hi!", "");
        student10.unsubscribe(newsletter47);
        team_001.LibraryFacade libraryFacade51 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        libraryFacade51.bookKeeping("hi!", strList55);
        team_001.LibraryFacade libraryFacade61 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        libraryFacade61.bookKeeping("hi!", strList65);
        libraryFacade51.bookKeeping("", strList65);
        team_001.Library library69 = libraryFacade51.getLibrary();
        team_001.Library library70 = libraryFacade51.getLibrary();
        team_001.Faculty faculty74 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook77 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean78 = libraryFacade51.borrowItem((team_001.Client) faculty74, (team_001.Item) virtualBook77);
        int int79 = virtualBook77.ID;
        student10.returnItem((team_001.Item) virtualBook77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 21888 + "'", int79 == 21888);
    }

    @Test
    public void test816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test816");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.LibraryFacade libraryFacade31 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        libraryFacade31.bookKeeping("hi!", strList35);
        team_001.visitor visitor41 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine44 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean45 = libraryFacade31.borrowItem((team_001.Client) visitor41, (team_001.Item) magazine44);
        java.lang.Boolean boolean46 = client28.isBorrowed((team_001.Item) magazine44);
        client28.setId(125);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap49 = client28.getSubcribed();
        team_001.Faculty faculty53 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter56 = new team_001.Newsletter("hi!", "");
        faculty53.subscribe(newsletter56);
        team_001.PhysicalBook physicalBook60 = new team_001.PhysicalBook("", "");
        faculty53.returnItem((team_001.Item) physicalBook60);
        java.util.ArrayList<java.lang.String> strList62 = faculty53.getCourses();
        java.util.ArrayList<java.lang.String> strList63 = faculty53.getCourses();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        team_001.Student student71 = new team_001.Student("", "", "hi!", strList69);
        team_001.Magazine magazine74 = new team_001.Magazine("", "hi!");
        student71.returnItem((team_001.Item) magazine74);
        java.lang.String str76 = student71.getEmail();
        student71.setPassword("");
        team_001.VirtualBook virtualBook81 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook81.ID = '4';
        int int84 = student71.checkOverdue((team_001.Item) virtualBook81);
        faculty53.returnItem((team_001.Item) virtualBook81);
        boolean boolean86 = client28.borrowItem((team_001.Item) virtualBook81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "" + "'", str76.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test817");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        java.lang.String str6 = userManagement1.getType("");
        team_001.Client client11 = userManagement1.writeUser("", "", "hi!", "");
        java.lang.String str13 = userManagement1.getType("");
        java.lang.String str15 = userManagement1.getType("hi!");
        boolean boolean18 = userManagement1.readUsers("", "");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test818");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        team_001.Magazine magazine51 = new team_001.Magazine("", "hi!");
        student48.returnItem((team_001.Item) magazine51);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "", "hi!", strList58);
        team_001.Magazine magazine63 = new team_001.Magazine("", "hi!");
        student60.returnItem((team_001.Item) magazine63);
        java.lang.String str65 = student60.getEmail();
        student60.setPassword("");
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook70.ID = '4';
        int int73 = student60.checkOverdue((team_001.Item) virtualBook70);
        java.lang.String str74 = virtualBook70.getTitle();
        boolean boolean75 = student48.borrowItem((team_001.Item) virtualBook70);
        student10.returnItem((team_001.Item) virtualBook70);
        team_001.Newsletter newsletter79 = team_001.ItemFactory.createNewsLetter("", "hi!");
        student10.subscribe(newsletter79);
        java.lang.String[] strArray85 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        team_001.Student student88 = new team_001.Student("", "", "hi!", strList86);
        student88.setEmail("hi!");
        student88.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap93 = student88.borrowed;
        team_001.BorrowedIterator borrowedIterator94 = new team_001.BorrowedIterator(itemMap93);
        boolean boolean95 = borrowedIterator94.hasNext();
        java.util.ArrayList<team_001.Item> itemList96 = student10.checkItemsOverdue(borrowedIterator94);
        java.lang.String str97 = student10.getUsername();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "hi!" + "'", str74.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str97 + "' != '" + "" + "'", str97.equals(""));
    }

    @Test
    public void test819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test819");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap10 = student7.borrowed;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap10);
    }

    @Test
    public void test820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test820");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        userBuilder15.password = "";
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        userBuilder15.lib = library39;
        team_001.LibraryFacade libraryFacade43 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        libraryFacade43.bookKeeping("hi!", strList47);
        team_001.LibraryFacade libraryFacade53 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        libraryFacade53.bookKeeping("hi!", strList57);
        libraryFacade43.bookKeeping("", strList57);
        team_001.Library library61 = libraryFacade43.getLibrary();
        team_001.Library library62 = libraryFacade43.getLibrary();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        team_001.Student student70 = new team_001.Student("", "", "hi!", strList68);
        student70.setEmail("hi!");
        student70.setEmail("hi!");
        team_001.PhysicalBook physicalBook77 = new team_001.PhysicalBook("", "hi!");
        boolean boolean78 = libraryFacade43.borrowItem((team_001.Client) student70, (team_001.Item) physicalBook77);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap79 = libraryFacade43.getInventory();
        team_001.Library library80 = libraryFacade43.getLibrary();
        userBuilder15.lib = library80;
        team_001.UserBuilder userBuilder83 = userBuilder15.setUsername("");
        team_001.Client client84 = userBuilder83.buildVisitor();
        team_001.Client client85 = userBuilder83.buildVisitor();
        team_001.Newsletter newsletter86 = null;
        client85.unsubscribe(newsletter86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client85);
    }

    @Test
    public void test821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test821");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.UserBuilder userBuilder29 = userBuilder23.setUsername("hi!");
        team_001.Client client30 = userBuilder23.buildVisitor();
        java.lang.String str31 = userBuilder23.password;
        team_001.Library library32 = userBuilder23.lib;
        userBuilder23.password = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "hi!" + "'", str31.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library32);
    }

    @Test
    public void test822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test822");
        team_001.CD cD2 = new team_001.CD("", "");
        int int3 = cD2.getID();
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22002 + "'", int3 == 22002);
    }

    @Test
    public void test823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test823");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Client client27 = userBuilder26.buildStudent();
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        team_001.LibraryFacade libraryFacade40 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        libraryFacade40.bookKeeping("hi!", strList44);
        libraryFacade30.bookKeeping("", strList44);
        team_001.Library library48 = libraryFacade30.getLibrary();
        team_001.Library library49 = libraryFacade30.getLibrary();
        team_001.Faculty faculty53 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook56 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean57 = libraryFacade30.borrowItem((team_001.Client) faculty53, (team_001.Item) virtualBook56);
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        team_001.Student student65 = new team_001.Student("", "", "hi!", strList63);
        student65.setEmail("hi!");
        student65.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap70 = student65.borrowed;
        student65.setUsername("");
        team_001.Newsletter newsletter75 = new team_001.Newsletter("hi!", "hi!");
        student65.unsubscribe(newsletter75);
        java.lang.Object obj77 = newsletter75.clone();
        faculty53.unsubscribe(newsletter75);
        java.lang.Boolean boolean79 = client27.isBorrowed((team_001.Item) newsletter75);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap80 = null;
        client27.borrowed = itemMap80;
        client27.setEmail("");
        java.lang.String str84 = client27.getPassword();
        java.lang.String str85 = client27.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str84 + "' != '" + "hi!" + "'", str84.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str85 + "' != '" + "hi!" + "'", str85.equals("hi!"));
    }

    @Test
    public void test824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test824");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Student student11 = new team_001.Student("", "hi!", "", strList8);
        team_001.PhysicalBook physicalBook14 = team_001.ItemFactory.createPhysicalBook("hi!", "hi!");
        student11.returnItem((team_001.Item) physicalBook14);
        int int16 = student11.getId();
        student11.setId((int) 'a');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15808 + "'", int16 == 15808);
    }

    @Test
    public void test825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test825");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        team_001.Client client3 = userBuilder0.buildVisitor();
        java.lang.String str4 = userBuilder0.email;
        team_001.UserBuilder userBuilder6 = userBuilder0.setUsername("hi!");
        team_001.UserBuilder userBuilder8 = userBuilder0.setPassword("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder8);
    }

    @Test
    public void test826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test826");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap10 = libraryFacade2.getInventory();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap11 = libraryFacade2.getInventory();
        team_001.NonFacultyStaff nonFacultyStaff15 = new team_001.NonFacultyStaff("", "hi!", "hi!");
        team_001.LibraryFacade libraryFacade18 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        libraryFacade18.bookKeeping("hi!", strList22);
        team_001.LibraryFacade libraryFacade28 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        libraryFacade28.bookKeeping("hi!", strList32);
        libraryFacade18.bookKeeping("", strList32);
        team_001.Library library36 = libraryFacade18.getLibrary();
        team_001.Library library37 = libraryFacade18.getLibrary();
        team_001.Faculty faculty41 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook44 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean45 = libraryFacade18.borrowItem((team_001.Client) faculty41, (team_001.Item) virtualBook44);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        student53.setEmail("hi!");
        student53.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap58 = student53.borrowed;
        student53.setUsername("");
        team_001.Newsletter newsletter63 = new team_001.Newsletter("hi!", "hi!");
        student53.unsubscribe(newsletter63);
        java.lang.Object obj65 = newsletter63.clone();
        faculty41.unsubscribe(newsletter63);
        libraryFacade2.returnItem((team_001.Client) nonFacultyStaff15, (team_001.Item) newsletter63);
        team_001.Faculty faculty72 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter75 = new team_001.Newsletter("hi!", "");
        faculty72.subscribe(newsletter75);
        java.util.ArrayList<java.lang.String> strList77 = faculty72.getCourses();
        java.util.ArrayList<java.lang.String> strList78 = faculty72.getCourses();
        java.util.ArrayList<java.lang.String> strList79 = faculty72.getCourses();
        // The following exception was thrown during execution in test generation
        try {
            libraryFacade2.populizer("", strList79);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList79);
    }

    @Test
    public void test827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test827");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Library library1 = userBuilder0.lib;
        team_001.UserBuilder userBuilder2 = new team_001.UserBuilder();
        team_001.Client client3 = userBuilder2.buildVisitor();
        team_001.Client client4 = userBuilder2.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder5 = new team_001.UserBuilder();
        team_001.Client client6 = userBuilder5.buildVisitor();
        java.lang.String str7 = userBuilder5.password;
        userBuilder5.password = "hi!";
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        team_001.Library library19 = libraryFacade12.getLibrary();
        team_001.UserBuilder userBuilder20 = userBuilder5.setLibrary(library19);
        java.lang.String str21 = userBuilder5.email;
        team_001.UserBuilder userBuilder22 = new team_001.UserBuilder();
        userBuilder22.email = "hi!";
        team_001.Library library25 = userBuilder22.lib;
        team_001.LibraryFacade libraryFacade28 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        libraryFacade28.bookKeeping("hi!", strList32);
        team_001.LibraryFacade libraryFacade38 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        libraryFacade38.bookKeeping("hi!", strList42);
        libraryFacade28.bookKeeping("", strList42);
        team_001.Library library46 = libraryFacade28.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder22.setLibrary(library46);
        userBuilder5.lib = library46;
        team_001.UserBuilder userBuilder49 = userBuilder2.setLibrary(library46);
        userBuilder0.lib = library46;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder52 = userBuilder0.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder49);
    }

    @Test
    public void test828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test828");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        java.lang.String str6 = userBuilder0.password;
        team_001.Library library7 = null;
        team_001.UserBuilder userBuilder8 = userBuilder0.setLibrary(library7);
        team_001.Library library9 = userBuilder0.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library9);
    }

    @Test
    public void test829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test829");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        team_001.Client client6 = userManagement1.writeUser("hi!", "hi!", "hi!", "");
        team_001.Client client11 = userManagement1.writeUser("hi!", "hi!", "hi!", "");
        team_001.Magazine magazine14 = new team_001.Magazine("", "hi!");
        int int15 = magazine14.getID();
        java.lang.String str16 = magazine14.getTitle();
        boolean boolean17 = client11.borrowItem((team_001.Item) magazine14);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        student25.setPassword("");
        int int28 = student25.getId();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap29 = student25.borrowed;
        team_001.BorrowedIterator borrowedIterator30 = new team_001.BorrowedIterator(itemMap29);
        team_001.BorrowedIterator borrowedIterator31 = new team_001.BorrowedIterator(itemMap29);
        java.util.ArrayList<team_001.Item> itemList32 = client11.checkItemsOverdue(borrowedIterator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client11);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22126 + "'", int15 == 22126);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 15825 + "'", int28 == 15825);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList32);
    }

    @Test
    public void test830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test830");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        team_001.Student student37 = new team_001.Student("", "", "hi!", strList35);
        student37.setEmail("hi!");
        student37.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap42 = student37.borrowed;
        student37.setUsername("");
        team_001.Newsletter newsletter47 = new team_001.Newsletter("hi!", "hi!");
        student37.unsubscribe(newsletter47);
        java.lang.Object obj49 = newsletter47.clone();
        faculty25.unsubscribe(newsletter47);
        java.lang.String str51 = faculty25.getPassword();
        faculty25.setId(133);
        java.util.ArrayList<java.lang.String> strList54 = faculty25.getCourses();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "" + "'", str51.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList54);
    }

    @Test
    public void test831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test831");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.UserBuilder userBuilder49 = userBuilder24.setUsername("hi!");
        team_001.UserBuilder userBuilder50 = new team_001.UserBuilder();
        team_001.Client client51 = userBuilder50.buildVisitor();
        java.lang.String str52 = userBuilder50.password;
        team_001.LibraryFacade libraryFacade55 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        libraryFacade55.bookKeeping("hi!", strList59);
        team_001.LibraryFacade libraryFacade65 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        libraryFacade65.bookKeeping("hi!", strList69);
        libraryFacade55.bookKeeping("", strList69);
        team_001.Library library73 = libraryFacade55.getLibrary();
        team_001.UserBuilder userBuilder74 = userBuilder50.setLibrary(library73);
        team_001.LibraryFacade libraryFacade77 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray80 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        libraryFacade77.bookKeeping("hi!", strList81);
        team_001.LibraryFacade libraryFacade87 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray90 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList91 = new java.util.ArrayList<java.lang.String>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList91, strArray90);
        libraryFacade87.bookKeeping("hi!", strList91);
        libraryFacade77.bookKeeping("", strList91);
        team_001.Library library95 = libraryFacade77.getLibrary();
        team_001.Library library96 = libraryFacade77.getLibrary();
        team_001.UserBuilder userBuilder97 = userBuilder74.setLibrary(library96);
        team_001.UserBuilder userBuilder98 = userBuilder24.setLibrary(library96);
        team_001.Client client99 = userBuilder24.buildVisitor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client99);
    }

    @Test
    public void test832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test832");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        libraryFacade2.bookKeeping("", strList27);
        team_001.UserManagement userManagement32 = new team_001.UserManagement("");
        team_001.Client client37 = userManagement32.writeUser("hi!", "hi!", "hi!", "");
        client37.setPassword("");
        team_001.PhysicalBook physicalBook42 = new team_001.PhysicalBook("hi!", "");
        int int43 = libraryFacade2.checkOverdue(client37, (team_001.Item) physicalBook42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test833");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Client client27 = userBuilder26.buildStudent();
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        team_001.LibraryFacade libraryFacade40 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        libraryFacade40.bookKeeping("hi!", strList44);
        libraryFacade30.bookKeeping("", strList44);
        team_001.Library library48 = libraryFacade30.getLibrary();
        team_001.Library library49 = libraryFacade30.getLibrary();
        team_001.Faculty faculty53 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook56 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean57 = libraryFacade30.borrowItem((team_001.Client) faculty53, (team_001.Item) virtualBook56);
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        team_001.Student student65 = new team_001.Student("", "", "hi!", strList63);
        student65.setEmail("hi!");
        student65.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap70 = student65.borrowed;
        student65.setUsername("");
        team_001.Newsletter newsletter75 = new team_001.Newsletter("hi!", "hi!");
        student65.unsubscribe(newsletter75);
        java.lang.Object obj77 = newsletter75.clone();
        faculty53.unsubscribe(newsletter75);
        java.lang.Boolean boolean79 = client27.isBorrowed((team_001.Item) newsletter75);
        java.lang.String str80 = newsletter75.getAuthor();
        int int81 = newsletter75.getID();
        newsletter75.ID = 0;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "hi!" + "'", str80.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 22203 + "'", int81 == 22203);
    }

    @Test
    public void test834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test834");
        team_001.Client.current_id = 1401;
    }

    @Test
    public void test835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test835");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildFaculty();
        team_001.Client client26 = userBuilder0.buildNonFacultyStaff();
        team_001.LibraryFacade libraryFacade29 = new team_001.LibraryFacade("", "");
        team_001.Library library30 = libraryFacade29.getLibrary();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        team_001.Student student38 = new team_001.Student("", "", "hi!", strList36);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap39 = student38.getSubcribed();
        team_001.CD cD42 = team_001.ItemFactory.createCD("hi!", "");
        student38.returnItem((team_001.Item) cD42);
        student38.setEmail("hi!");
        team_001.Faculty faculty49 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter52 = new team_001.Newsletter("hi!", "");
        faculty49.subscribe(newsletter52);
        team_001.PhysicalBook physicalBook56 = new team_001.PhysicalBook("", "");
        faculty49.returnItem((team_001.Item) physicalBook56);
        libraryFacade29.returnItem((team_001.Client) student38, (team_001.Item) physicalBook56);
        team_001.CD cD61 = team_001.ItemFactory.createCD("hi!", "");
        int int62 = cD61.getID();
        boolean boolean63 = student38.borrowItem((team_001.Item) cD61);
        int int64 = client26.checkOverdue((team_001.Item) cD61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD61);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 22232 + "'", int62 == 22232);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test836");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        team_001.Student student29 = new team_001.Student("", "", "hi!", strList27);
        student29.setEmail("hi!");
        student29.setEmail("hi!");
        team_001.PhysicalBook physicalBook36 = new team_001.PhysicalBook("", "hi!");
        boolean boolean37 = libraryFacade2.borrowItem((team_001.Client) student29, (team_001.Item) physicalBook36);
        java.lang.String str38 = physicalBook36.getTitle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "" + "'", str38.equals(""));
    }

    @Test
    public void test837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test837");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap10 = libraryFacade2.getInventory();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        java.lang.String str19 = student18.getEmail();
        student18.setUsername("hi!");
        student18.setPassword("");
        team_001.VirtualBook virtualBook26 = new team_001.VirtualBook("hi!", "");
        int int27 = libraryFacade2.checkOverdue((team_001.Client) student18, (team_001.Item) virtualBook26);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap28 = libraryFacade2.getInventory();
        team_001.Faculty faculty33 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter36 = new team_001.Newsletter("hi!", "");
        faculty33.subscribe(newsletter36);
        java.util.ArrayList<java.lang.String> strList38 = faculty33.getCourses();
        java.util.ArrayList<java.lang.String> strList39 = faculty33.getCourses();
        libraryFacade2.bookKeeping("hi!", strList39);
        team_001.Client client41 = null;
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        team_001.Student student49 = new team_001.Student("", "", "hi!", strList47);
        team_001.Magazine magazine52 = new team_001.Magazine("", "hi!");
        student49.returnItem((team_001.Item) magazine52);
        magazine52.ID = 120;
        // The following exception was thrown during execution in test generation
        try {
            int int56 = libraryFacade2.checkOverdue(client41, (team_001.Item) magazine52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"team_001.Client.checkOverdue(team_001.Item)\" because \"client\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "" + "'", str19.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test838");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildVisitor();
        team_001.Library library7 = userBuilder0.lib;
        team_001.Client client8 = userBuilder0.buildStudent();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
    }

    @Test
    public void test839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test839");
        team_001.PhysicalBook physicalBook2 = new team_001.PhysicalBook("", "");
        java.lang.String str3 = physicalBook2.getAuthor();
        int int4 = physicalBook2.ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22272 + "'", int4 == 22272);
    }

    @Test
    public void test840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test840");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        team_001.VirtualBook virtualBook19 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook19.ID = '4';
        virtualBook19.ID = (short) 100;
        boolean boolean24 = visitor12.borrowItem((team_001.Item) virtualBook19);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        team_001.Student student32 = new team_001.Student("", "", "hi!", strList30);
        student32.setEmail("hi!");
        student32.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap37 = student32.borrowed;
        student32.setUsername("");
        team_001.Newsletter newsletter42 = new team_001.Newsletter("hi!", "hi!");
        student32.unsubscribe(newsletter42);
        java.lang.Object obj44 = newsletter42.clone();
        visitor12.returnItem((team_001.Item) newsletter42);
        newsletter42.ID = 5689;
        java.lang.Object obj48 = newsletter42.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj48);
    }

    @Test
    public void test841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test841");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap14 = student9.borrowed;
        team_001.BorrowedIterator borrowedIterator15 = new team_001.BorrowedIterator(itemMap14);
        java.util.ArrayList<team_001.Item> itemList16 = client1.checkItemsOverdue(borrowedIterator15);
        team_001.Magazine magazine19 = new team_001.Magazine("hi!", "");
        int int20 = client1.checkOverdue((team_001.Item) magazine19);
        int int21 = client1.getId();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap22 = client1.getSubcribed();
        client1.setId(0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1416 + "'", int21 == 1416);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap22);
    }

    @Test
    public void test842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test842");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade9 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        team_001.Student student17 = new team_001.Student("", "", "hi!", strList15);
        team_001.Magazine magazine20 = new team_001.Magazine("", "hi!");
        student17.returnItem((team_001.Item) magazine20);
        java.lang.String str22 = student17.getEmail();
        student17.setPassword("");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        team_001.Student student32 = new team_001.Student("", "", "hi!", strList30);
        team_001.Magazine magazine35 = new team_001.Magazine("", "hi!");
        student32.returnItem((team_001.Item) magazine35);
        java.lang.String str37 = student32.getEmail();
        student32.setPassword("");
        team_001.VirtualBook virtualBook42 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook42.ID = '4';
        int int45 = student32.checkOverdue((team_001.Item) virtualBook42);
        java.lang.String str46 = virtualBook42.getTitle();
        int int47 = libraryFacade9.checkOverdue((team_001.Client) student17, (team_001.Item) virtualBook42);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        team_001.Student student55 = new team_001.Student("", "", "hi!", strList53);
        team_001.Magazine magazine58 = new team_001.Magazine("", "hi!");
        student55.returnItem((team_001.Item) magazine58);
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        team_001.Student student67 = new team_001.Student("", "", "hi!", strList65);
        team_001.Magazine magazine70 = new team_001.Magazine("", "hi!");
        student67.returnItem((team_001.Item) magazine70);
        java.lang.String str72 = student67.getEmail();
        student67.setPassword("");
        team_001.VirtualBook virtualBook77 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook77.ID = '4';
        int int80 = student67.checkOverdue((team_001.Item) virtualBook77);
        java.lang.String str81 = virtualBook77.getTitle();
        boolean boolean82 = student55.borrowItem((team_001.Item) virtualBook77);
        student17.returnItem((team_001.Item) virtualBook77);
        team_001.Newsletter newsletter86 = team_001.ItemFactory.createNewsLetter("", "hi!");
        student17.subscribe(newsletter86);
        client6.subscribe(newsletter86);
        newsletter86.ID = 2094;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "" + "'", str22.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "" + "'", str37.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "hi!" + "'", str46.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str72 + "' != '" + "" + "'", str72.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str81 + "' != '" + "hi!" + "'", str81.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter86);
    }

    @Test
    public void test843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test843");
        team_001.visitor visitor3 = new team_001.visitor("", "hi!", "");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        team_001.VirtualBook virtualBook14 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int15 = student11.checkOverdue((team_001.Item) virtualBook14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        team_001.Student student23 = new team_001.Student("", "", "hi!", strList21);
        team_001.VirtualBook virtualBook26 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int27 = student23.checkOverdue((team_001.Item) virtualBook26);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap28 = student23.borrowed;
        team_001.BorrowedIterator borrowedIterator29 = new team_001.BorrowedIterator(itemMap28);
        student11.borrowed = itemMap28;
        visitor3.setBorrowed(itemMap28);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        team_001.Student student39 = new team_001.Student("", "", "hi!", strList37);
        java.lang.String str40 = student39.getEmail();
        team_001.UserBuilder userBuilder41 = new team_001.UserBuilder();
        team_001.Client client42 = userBuilder41.buildVisitor();
        team_001.Client client43 = userBuilder41.buildNonFacultyStaff();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        team_001.Student student51 = new team_001.Student("", "", "hi!", strList49);
        team_001.Magazine magazine54 = new team_001.Magazine("", "hi!");
        student51.returnItem((team_001.Item) magazine54);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        team_001.Student student63 = new team_001.Student("", "", "hi!", strList61);
        team_001.Magazine magazine66 = new team_001.Magazine("", "hi!");
        student63.returnItem((team_001.Item) magazine66);
        java.lang.String str68 = student63.getEmail();
        student63.setPassword("");
        team_001.VirtualBook virtualBook73 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook73.ID = '4';
        int int76 = student63.checkOverdue((team_001.Item) virtualBook73);
        java.lang.String str77 = virtualBook73.getTitle();
        boolean boolean78 = student51.borrowItem((team_001.Item) virtualBook73);
        client43.returnItem((team_001.Item) virtualBook73);
        int int80 = virtualBook73.getID();
        int int81 = student39.checkOverdue((team_001.Item) virtualBook73);
        boolean boolean82 = visitor3.borrowItem((team_001.Item) virtualBook73);
        int int83 = visitor3.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "" + "'", str40.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "" + "'", str68.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str77 + "' != '" + "hi!" + "'", str77.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1424 + "'", int83 == 1424);
    }

    @Test
    public void test844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test844");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        java.lang.String str6 = userManagement1.getType("");
        boolean boolean9 = userManagement1.readUsers("hi!", "");
        team_001.Client client14 = userManagement1.writeUser("hi!", "", "hi!", "hi!");
        java.lang.String str15 = client14.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
    }

    @Test
    public void test845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test845");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.Library library25 = userBuilder23.lib;
        team_001.UserBuilder userBuilder27 = userBuilder23.setPassword("hi!");
        team_001.Client client28 = userBuilder23.buildFaculty();
        team_001.UserBuilder userBuilder30 = userBuilder23.setUsername("hi!");
        userBuilder30.password = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
    }

    @Test
    public void test846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test846");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "");
        team_001.Library library3 = libraryFacade2.getLibrary();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap12 = student11.getSubcribed();
        team_001.CD cD15 = team_001.ItemFactory.createCD("hi!", "");
        student11.returnItem((team_001.Item) cD15);
        student11.setEmail("hi!");
        team_001.Faculty faculty22 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter25 = new team_001.Newsletter("hi!", "");
        faculty22.subscribe(newsletter25);
        team_001.PhysicalBook physicalBook29 = new team_001.PhysicalBook("", "");
        faculty22.returnItem((team_001.Item) physicalBook29);
        libraryFacade2.returnItem((team_001.Client) student11, (team_001.Item) physicalBook29);
        student11.setPassword("hi!");
        java.lang.String str34 = student11.getEmail();
        team_001.PhysicalBook physicalBook37 = team_001.ItemFactory.createPhysicalBook("hi!", "");
        boolean boolean38 = student11.borrowItem((team_001.Item) physicalBook37);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap39 = student11.borrowed;
        team_001.UserManagement userManagement41 = new team_001.UserManagement("");
        team_001.Client client46 = userManagement41.writeUser("", "hi!", "hi!", "hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap47 = client46.borrowed;
        student11.setBorrowed(itemMap47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "hi!" + "'", str34.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap47);
    }

    @Test
    public void test847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test847");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap22 = libraryFacade2.getInventory();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap23 = libraryFacade2.getInventory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap23);
    }

    @Test
    public void test848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test848");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        java.lang.String str6 = userBuilder0.password;
        team_001.Client client7 = userBuilder0.buildNonFacultyStaff();
        team_001.LibraryFacade libraryFacade10 = new team_001.LibraryFacade("", "");
        team_001.Library library11 = libraryFacade10.getLibrary();
        userBuilder0.lib = library11;
        java.lang.String str13 = userBuilder0.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!" + "'", str13.equals("hi!"));
    }

    @Test
    public void test849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test849");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.UserBuilder userBuilder30 = userBuilder23.setUsername("");
        team_001.UserBuilder userBuilder31 = new team_001.UserBuilder();
        team_001.Client client32 = userBuilder31.buildVisitor();
        team_001.UserBuilder userBuilder34 = userBuilder31.setPassword("hi!");
        userBuilder31.password = "hi!";
        team_001.LibraryFacade libraryFacade39 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        libraryFacade39.bookKeeping("hi!", strList43);
        team_001.Library library46 = libraryFacade39.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder31.setLibrary(library46);
        team_001.UserBuilder userBuilder48 = userBuilder30.setLibrary(library46);
        java.lang.String str49 = userBuilder48.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "hi!" + "'", str49.equals("hi!"));
    }

    @Test
    public void test850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test850");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        userBuilder0.email = "";
        userBuilder0.password = "hi!";
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder29 = userBuilder0.setPassword("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid password format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
    }

    @Test
    public void test851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test851");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        team_001.Client client9 = userManagement1.writeUser("hi!", "hi!", "hi!", "hi!");
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        team_001.Student student20 = new team_001.Student("", "", "hi!", strList18);
        team_001.Magazine magazine23 = new team_001.Magazine("", "hi!");
        student20.returnItem((team_001.Item) magazine23);
        java.lang.String str25 = student20.getEmail();
        team_001.CD cD28 = new team_001.CD("", "");
        boolean boolean29 = libraryFacade12.borrowItem((team_001.Client) student20, (team_001.Item) cD28);
        team_001.Library library30 = libraryFacade12.getLibrary();
        team_001.Library library31 = libraryFacade12.getLibrary();
        team_001.UserBuilder userBuilder32 = new team_001.UserBuilder();
        team_001.Client client33 = userBuilder32.buildVisitor();
        team_001.LibraryFacade libraryFacade36 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        libraryFacade36.bookKeeping("hi!", strList40);
        team_001.LibraryFacade libraryFacade46 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        libraryFacade46.bookKeeping("hi!", strList50);
        libraryFacade36.bookKeeping("", strList50);
        team_001.Library library54 = libraryFacade36.getLibrary();
        team_001.UserBuilder userBuilder55 = userBuilder32.setLibrary(library54);
        team_001.Client client56 = userBuilder32.buildVisitor();
        int int57 = client56.getId();
        team_001.CD cD60 = new team_001.CD("hi!", "");
        java.lang.String str61 = cD60.getAuthor();
        java.lang.Object obj62 = cD60.clone();
        boolean boolean63 = libraryFacade12.borrowItem(client56, (team_001.Item) cD60);
        int int64 = client9.checkOverdue((team_001.Item) cD60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "" + "'", str25.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client56);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1455 + "'", int57 == 1455);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "" + "'", str61.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test852");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setUsername("hi!");
        userBuilder23.email = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
    }

    @Test
    public void test853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test853");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        student7.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap12 = student7.borrowed;
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap13 = student7.borrowed;
        team_001.LibraryFacade libraryFacade16 = new team_001.LibraryFacade("hi!", "");
        team_001.Faculty faculty20 = new team_001.Faculty("", "", "hi!");
        team_001.visitor visitor24 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter27 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str28 = newsletter27.getTitle();
        visitor24.subscribe(newsletter27);
        boolean boolean30 = libraryFacade16.borrowItem((team_001.Client) faculty20, (team_001.Item) newsletter27);
        boolean boolean31 = student7.borrowItem((team_001.Item) newsletter27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "" + "'", str28.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test854");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        team_001.UserBuilder userBuilder5 = userBuilder3.setUsername("");
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder7 = userBuilder5.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder5);
    }

    @Test
    public void test855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test855");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        team_001.Magazine magazine43 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean44 = student10.borrowItem((team_001.Item) magazine43);
        java.lang.Object obj45 = magazine43.clone();
        java.lang.String str46 = magazine43.getTitle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "hi!" + "'", str46.equals("hi!"));
    }

    @Test
    public void test856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test856");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.UserBuilder userBuilder30 = userBuilder23.setUsername("");
        team_001.UserBuilder userBuilder31 = new team_001.UserBuilder();
        team_001.Client client32 = userBuilder31.buildVisitor();
        team_001.UserBuilder userBuilder34 = userBuilder31.setPassword("hi!");
        userBuilder31.password = "hi!";
        team_001.LibraryFacade libraryFacade39 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        libraryFacade39.bookKeeping("hi!", strList43);
        team_001.Library library46 = libraryFacade39.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder31.setLibrary(library46);
        team_001.UserBuilder userBuilder48 = userBuilder30.setLibrary(library46);
        team_001.Client client49 = userBuilder48.buildStudent();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client49);
    }

    @Test
    public void test857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test857");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        team_001.Client client3 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade6 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        team_001.Student student14 = new team_001.Student("", "", "hi!", strList12);
        team_001.Magazine magazine17 = new team_001.Magazine("", "hi!");
        student14.returnItem((team_001.Item) magazine17);
        java.lang.String str19 = student14.getEmail();
        team_001.CD cD22 = new team_001.CD("", "");
        boolean boolean23 = libraryFacade6.borrowItem((team_001.Client) student14, (team_001.Item) cD22);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        team_001.Student student31 = new team_001.Student("", "", "hi!", strList29);
        student31.setEmail("hi!");
        team_001.Magazine magazine36 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean37 = student31.isBorrowed((team_001.Item) magazine36);
        boolean boolean38 = student14.borrowItem((team_001.Item) magazine36);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        team_001.Student student46 = new team_001.Student("", "", "hi!", strList44);
        team_001.VirtualBook virtualBook49 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int50 = student46.checkOverdue((team_001.Item) virtualBook49);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap51 = student46.borrowed;
        team_001.BorrowedIterator borrowedIterator52 = new team_001.BorrowedIterator(itemMap51);
        student14.borrowed = itemMap51;
        team_001.BorrowedIterator borrowedIterator54 = new team_001.BorrowedIterator(itemMap51);
        client3.setBorrowed(itemMap51);
        team_001.BorrowedIterator borrowedIterator56 = new team_001.BorrowedIterator(itemMap51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "" + "'", str19.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap51);
    }

    @Test
    public void test858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test858");
        team_001.Client.current_id = 19617;
    }

    @Test
    public void test859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test859");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        visitor12.setPassword("hi!");
        java.lang.String str19 = visitor12.getUsername();
        team_001.LibraryFacade libraryFacade25 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        libraryFacade25.bookKeeping("hi!", strList29);
        team_001.Library library32 = libraryFacade25.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap33 = libraryFacade25.getInventory();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        team_001.Student student41 = new team_001.Student("", "", "hi!", strList39);
        java.lang.String str42 = student41.getEmail();
        student41.setUsername("hi!");
        student41.setPassword("");
        team_001.VirtualBook virtualBook49 = new team_001.VirtualBook("hi!", "");
        int int50 = libraryFacade25.checkOverdue((team_001.Client) student41, (team_001.Item) virtualBook49);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap51 = libraryFacade25.getInventory();
        team_001.Faculty faculty56 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter59 = new team_001.Newsletter("hi!", "");
        faculty56.subscribe(newsletter59);
        java.util.ArrayList<java.lang.String> strList61 = faculty56.getCourses();
        java.util.ArrayList<java.lang.String> strList62 = faculty56.getCourses();
        libraryFacade25.bookKeeping("hi!", strList62);
        team_001.Student student64 = new team_001.Student("hi!", "", "hi!", strList62);
        team_001.Newsletter newsletter67 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str68 = newsletter67.getTitle();
        java.lang.String str69 = newsletter67.getAuthor();
        student64.unsubscribe(newsletter67);
        visitor12.returnItem((team_001.Item) newsletter67);
        team_001.CD cD74 = new team_001.CD("", "");
        java.lang.Boolean boolean75 = visitor12.isBorrowed((team_001.Item) cD74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "hi!" + "'", str19.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "" + "'", str42.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "" + "'", str68.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "hi!" + "'", str69.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75.equals(false));
    }

    @Test
    public void test860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test860");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setPassword("");
        int int10 = student7.getId();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap11 = student7.borrowed;
        team_001.Magazine magazine14 = new team_001.Magazine("", "hi!");
        int int15 = magazine14.ID;
        boolean boolean16 = student7.borrowItem((team_001.Item) magazine14);
        student7.setEmail("");
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap19 = student7.getSubcribed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 19622 + "'", int10 == 19622);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap11);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22647 + "'", int15 == 22647);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap19);
    }

    @Test
    public void test861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test861");
        team_001.visitor visitor3 = new team_001.visitor("", "hi!", "");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        team_001.VirtualBook virtualBook14 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int15 = student11.checkOverdue((team_001.Item) virtualBook14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        team_001.Student student23 = new team_001.Student("", "", "hi!", strList21);
        team_001.VirtualBook virtualBook26 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int27 = student23.checkOverdue((team_001.Item) virtualBook26);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap28 = student23.borrowed;
        team_001.BorrowedIterator borrowedIterator29 = new team_001.BorrowedIterator(itemMap28);
        student11.borrowed = itemMap28;
        visitor3.setBorrowed(itemMap28);
        team_001.BorrowedIterator borrowedIterator32 = new team_001.BorrowedIterator(itemMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap28);
    }

    @Test
    public void test862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test862");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        int int12 = student7.getId();
        java.lang.String str13 = student7.getUsername();
        java.lang.String str14 = student7.getUsername();
        team_001.VirtualBook virtualBook17 = new team_001.VirtualBook("hi!", "");
        student7.returnItem((team_001.Item) virtualBook17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19626 + "'", int12 == 19626);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
    }

    @Test
    public void test863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test863");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.Client client25 = userBuilder0.buildFaculty();
        team_001.LibraryFacade libraryFacade28 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        team_001.Student student36 = new team_001.Student("", "", "hi!", strList34);
        student36.setEmail("hi!");
        team_001.Magazine magazine41 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean42 = student36.isBorrowed((team_001.Item) magazine41);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        team_001.Student student50 = new team_001.Student("", "", "hi!", strList48);
        team_001.VirtualBook virtualBook53 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int54 = student50.checkOverdue((team_001.Item) virtualBook53);
        java.lang.Boolean boolean55 = student36.isBorrowed((team_001.Item) virtualBook53);
        student36.setPassword("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap58 = student36.borrowed;
        team_001.Item item59 = null;
        int int60 = libraryFacade28.checkOverdue((team_001.Client) student36, item59);
        team_001.UserBuilder userBuilder61 = new team_001.UserBuilder();
        team_001.Client client62 = userBuilder61.buildVisitor();
        team_001.LibraryFacade libraryFacade65 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        libraryFacade65.bookKeeping("hi!", strList69);
        team_001.LibraryFacade libraryFacade75 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray78 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        libraryFacade75.bookKeeping("hi!", strList79);
        libraryFacade65.bookKeeping("", strList79);
        team_001.Library library83 = libraryFacade65.getLibrary();
        team_001.UserBuilder userBuilder84 = userBuilder61.setLibrary(library83);
        team_001.Client client85 = userBuilder84.buildStudent();
        team_001.visitor visitor89 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter92 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str93 = newsletter92.getTitle();
        visitor89.subscribe(newsletter92);
        int int95 = libraryFacade28.checkOverdue(client85, (team_001.Item) newsletter92);
        int int96 = client25.checkOverdue((team_001.Item) newsletter92);
        java.lang.String str97 = client25.getUsername();
        java.lang.String str98 = client25.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str93 + "' != '" + "" + "'", str93.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test864");
        team_001.CD cD2 = team_001.ItemFactory.createCD("hi!", "hi!");
        int int3 = cD2.ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD2);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22710 + "'", int3 == 22710);
    }

    @Test
    public void test865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test865");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.visitor visitor12 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine15 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean16 = libraryFacade2.borrowItem((team_001.Client) visitor12, (team_001.Item) magazine15);
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        team_001.Client client18 = userBuilder17.buildVisitor();
        team_001.LibraryFacade libraryFacade21 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        libraryFacade21.bookKeeping("hi!", strList25);
        team_001.LibraryFacade libraryFacade31 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        libraryFacade31.bookKeeping("hi!", strList35);
        libraryFacade21.bookKeeping("", strList35);
        team_001.Library library39 = libraryFacade21.getLibrary();
        team_001.UserBuilder userBuilder40 = userBuilder17.setLibrary(library39);
        userBuilder40.email = "";
        team_001.Client client43 = userBuilder40.buildStudent();
        team_001.CD cD46 = team_001.ItemFactory.createCD("hi!", "hi!");
        java.lang.Object obj47 = cD46.clone();
        boolean boolean48 = libraryFacade2.borrowItem(client43, (team_001.Item) cD46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test866");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setPassword("");
        int int10 = student7.getId();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap11 = student7.borrowed;
        team_001.BorrowedIterator borrowedIterator12 = new team_001.BorrowedIterator(itemMap11);
        team_001.BorrowedIterator borrowedIterator13 = new team_001.BorrowedIterator(itemMap11);
        boolean boolean14 = borrowedIterator13.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator13.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 19637 + "'", int10 == 19637);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test867");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        team_001.UserBuilder userBuilder3 = new team_001.UserBuilder();
        team_001.Client client4 = userBuilder3.buildVisitor();
        team_001.Library library5 = null;
        team_001.UserBuilder userBuilder6 = userBuilder3.setLibrary(library5);
        java.lang.String str7 = userBuilder3.email;
        team_001.Client client8 = userBuilder3.buildFaculty();
        team_001.Client client9 = userBuilder3.buildVisitor();
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        team_001.LibraryFacade libraryFacade22 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        libraryFacade22.bookKeeping("hi!", strList26);
        libraryFacade12.bookKeeping("", strList26);
        team_001.Library library30 = libraryFacade12.getLibrary();
        team_001.Library library31 = libraryFacade12.getLibrary();
        team_001.Faculty faculty35 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook38 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean39 = libraryFacade12.borrowItem((team_001.Client) faculty35, (team_001.Item) virtualBook38);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        team_001.Student student47 = new team_001.Student("", "", "hi!", strList45);
        student47.setEmail("hi!");
        student47.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap52 = student47.borrowed;
        student47.setUsername("");
        team_001.Newsletter newsletter57 = new team_001.Newsletter("hi!", "hi!");
        student47.unsubscribe(newsletter57);
        java.lang.Object obj59 = newsletter57.clone();
        faculty35.unsubscribe(newsletter57);
        boolean boolean61 = client9.borrowItem((team_001.Item) newsletter57);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        team_001.Student student69 = new team_001.Student("", "", "hi!", strList67);
        team_001.VirtualBook virtualBook72 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int73 = student69.checkOverdue((team_001.Item) virtualBook72);
        virtualBook72.ID = 10;
        virtualBook72.ID = 884;
        int int78 = virtualBook72.getID();
        boolean boolean79 = libraryFacade2.borrowItem(client9, (team_001.Item) virtualBook72);
        team_001.Library library80 = libraryFacade2.getLibrary();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 884 + "'", int78 == 884);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library80);
    }

    @Test
    public void test868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test868");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        team_001.Client client9 = userManagement1.writeUser("hi!", "", "hi!", "");
        team_001.Client client14 = userManagement1.writeUser("hi!", "", "", "hi!");
        boolean boolean17 = userManagement1.readUsers("hi!", "");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test869");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        java.lang.String str6 = userBuilder0.password;
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        team_001.Client client8 = userBuilder7.buildVisitor();
        java.lang.String str9 = userBuilder7.password;
        userBuilder7.password = "hi!";
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        team_001.Library library21 = libraryFacade14.getLibrary();
        team_001.UserBuilder userBuilder22 = userBuilder7.setLibrary(library21);
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library21);
        userBuilder23.password = "";
        userBuilder23.email = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
    }

    @Test
    public void test870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test870");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        java.lang.String str6 = userManagement1.getType("");
        java.lang.String str8 = userManagement1.getType("");
        boolean boolean11 = userManagement1.readUsers("hi!", "hi!");
        boolean boolean14 = userManagement1.readUsers("hi!", "");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test871");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade8 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        libraryFacade8.bookKeeping("hi!", strList12);
        team_001.Library library15 = libraryFacade8.getLibrary();
        team_001.UserBuilder userBuilder16 = userBuilder0.setLibrary(library15);
        userBuilder16.email = "";
        team_001.Client client19 = userBuilder16.buildStudent();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client19);
    }

    @Test
    public void test872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test872");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        java.lang.String str6 = userBuilder0.password;
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        team_001.Client client8 = userBuilder7.buildVisitor();
        java.lang.String str9 = userBuilder7.password;
        userBuilder7.password = "hi!";
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        team_001.Library library21 = libraryFacade14.getLibrary();
        team_001.UserBuilder userBuilder22 = userBuilder7.setLibrary(library21);
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library21);
        userBuilder0.password = "hi!";
        team_001.UserBuilder userBuilder26 = new team_001.UserBuilder();
        userBuilder26.email = "hi!";
        team_001.Library library29 = userBuilder26.lib;
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        libraryFacade42.bookKeeping("hi!", strList46);
        libraryFacade32.bookKeeping("", strList46);
        team_001.Library library50 = libraryFacade32.getLibrary();
        team_001.UserBuilder userBuilder51 = userBuilder26.setLibrary(library50);
        team_001.UserBuilder userBuilder52 = new team_001.UserBuilder();
        userBuilder52.email = "hi!";
        team_001.Library library55 = userBuilder52.lib;
        team_001.LibraryFacade libraryFacade58 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        libraryFacade58.bookKeeping("hi!", strList62);
        team_001.LibraryFacade libraryFacade68 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        libraryFacade68.bookKeeping("hi!", strList72);
        libraryFacade58.bookKeeping("", strList72);
        team_001.Library library76 = libraryFacade58.getLibrary();
        team_001.UserBuilder userBuilder77 = userBuilder52.setLibrary(library76);
        team_001.UserBuilder userBuilder78 = userBuilder51.setLibrary(library76);
        team_001.UserBuilder userBuilder79 = new team_001.UserBuilder();
        userBuilder79.email = "hi!";
        team_001.LibraryFacade libraryFacade84 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.Library library85 = libraryFacade84.getLibrary();
        team_001.UserBuilder userBuilder86 = userBuilder79.setLibrary(library85);
        userBuilder51.lib = library85;
        team_001.UserBuilder userBuilder88 = userBuilder0.setLibrary(library85);
        userBuilder0.email = "";
        team_001.UserBuilder userBuilder92 = userBuilder0.setUsername("");
        team_001.Library library93 = userBuilder0.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library93);
    }

    @Test
    public void test873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test873");
        team_001.VirtualBook virtualBook2 = team_001.ItemFactory.createVirtualBook("hi!", "");
        java.lang.String str3 = virtualBook2.getAuthor();
        int int4 = virtualBook2.getID();
        int int5 = virtualBook2.ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22816 + "'", int4 == 22816);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22816 + "'", int5 == 22816);
    }

    @Test
    public void test874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test874");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        boolean boolean4 = userManagement1.readUsers("hi!", "hi!");
        team_001.Client client9 = userManagement1.writeUser("hi!", "", "", "hi!");
        java.lang.String str11 = userManagement1.getType("hi!");
        team_001.Client client16 = userManagement1.writeUser("", "", "", "");
        java.lang.String str17 = client16.getUsername();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "" + "'", str17.equals(""));
    }

    @Test
    public void test875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test875");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.Library library25 = userBuilder23.lib;
        java.lang.String str26 = userBuilder23.email;
        team_001.UserBuilder userBuilder27 = new team_001.UserBuilder();
        team_001.Client client28 = userBuilder27.buildVisitor();
        team_001.UserBuilder userBuilder30 = userBuilder27.setPassword("hi!");
        userBuilder27.password = "hi!";
        java.lang.String str33 = userBuilder27.password;
        team_001.Client client34 = userBuilder27.buildNonFacultyStaff();
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "");
        team_001.Library library38 = libraryFacade37.getLibrary();
        userBuilder27.lib = library38;
        team_001.UserBuilder userBuilder40 = userBuilder23.setLibrary(library38);
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder42 = userBuilder40.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "hi!" + "'", str33.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder40);
    }

    @Test
    public void test876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test876");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        java.lang.String str4 = userBuilder0.email;
        java.lang.String str5 = userBuilder0.email;
        team_001.UserBuilder userBuilder7 = userBuilder0.setUsername("");
        java.lang.String str8 = userBuilder0.password;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder10 = userBuilder0.setEmail("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test877");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.VirtualBook virtualBook10 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) virtualBook10);
        int int12 = student7.getId();
        java.lang.String str13 = student7.getUsername();
        java.lang.String str14 = student7.getUsername();
        student7.setId(246);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19663 + "'", int12 == 19663);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
    }

    @Test
    public void test878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test878");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        userBuilder17.email = "hi!";
        team_001.Library library20 = userBuilder17.lib;
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Library library41 = libraryFacade23.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder17.setLibrary(library41);
        userBuilder0.lib = library41;
        team_001.Client client44 = userBuilder0.buildNonFacultyStaff();
        team_001.Client client45 = userBuilder0.buildVisitor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client45);
    }

    @Test
    public void test879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test879");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.Client client4 = userBuilder0.buildVisitor();
        team_001.Client client5 = userBuilder0.buildFaculty();
        java.lang.String str6 = userBuilder0.password;
        team_001.UserBuilder userBuilder7 = new team_001.UserBuilder();
        userBuilder7.email = "hi!";
        team_001.Library library10 = userBuilder7.lib;
        team_001.Client client11 = userBuilder7.buildVisitor();
        team_001.Client client12 = userBuilder7.buildFaculty();
        java.lang.String str13 = userBuilder7.password;
        team_001.UserBuilder userBuilder14 = new team_001.UserBuilder();
        team_001.Client client15 = userBuilder14.buildVisitor();
        java.lang.String str16 = userBuilder14.password;
        userBuilder14.password = "hi!";
        team_001.LibraryFacade libraryFacade21 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        libraryFacade21.bookKeeping("hi!", strList25);
        team_001.Library library28 = libraryFacade21.getLibrary();
        team_001.UserBuilder userBuilder29 = userBuilder14.setLibrary(library28);
        team_001.UserBuilder userBuilder30 = userBuilder7.setLibrary(library28);
        userBuilder0.lib = library28;
        team_001.UserBuilder userBuilder33 = userBuilder0.setUsername("hi!");
        java.lang.String str34 = userBuilder0.email;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "hi!" + "'", str34.equals("hi!"));
    }

    @Test
    public void test880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test880");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Magazine magazine10 = new team_001.Magazine("", "hi!");
        student7.returnItem((team_001.Item) magazine10);
        java.lang.String str12 = student7.getEmail();
        student7.setPassword("");
        team_001.VirtualBook virtualBook17 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook17.ID = '4';
        int int20 = student7.checkOverdue((team_001.Item) virtualBook17);
        student7.setUsername("");
        team_001.Faculty faculty26 = new team_001.Faculty("hi!", "hi!", "");
        java.util.ArrayList<java.lang.String> strList27 = faculty26.getCourses();
        team_001.CD cD30 = new team_001.CD("", "");
        java.lang.Boolean boolean31 = faculty26.isBorrowed((team_001.Item) cD30);
        boolean boolean32 = student7.borrowItem((team_001.Item) cD30);
        java.lang.Object obj33 = cD30.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj33);
    }

    @Test
    public void test881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test881");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        java.lang.String str48 = userBuilder47.password;
        team_001.UserBuilder userBuilder50 = userBuilder47.setPassword("hi!");
        team_001.Client client51 = userBuilder50.buildStudent();
        team_001.Client client52 = userBuilder50.buildStudent();
        team_001.LibraryFacade libraryFacade55 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        libraryFacade55.bookKeeping("hi!", strList59);
        team_001.LibraryFacade libraryFacade65 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        libraryFacade65.bookKeeping("hi!", strList69);
        libraryFacade55.bookKeeping("", strList69);
        team_001.Library library73 = libraryFacade55.getLibrary();
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        team_001.Student student81 = new team_001.Student("", "", "hi!", strList79);
        team_001.Newsletter newsletter84 = new team_001.Newsletter("hi!", "hi!");
        int int85 = student81.checkOverdue((team_001.Item) newsletter84);
        team_001.Magazine magazine88 = team_001.ItemFactory.createMagazine("", "");
        magazine88.ID = 1961;
        boolean boolean91 = libraryFacade55.borrowItem((team_001.Client) student81, (team_001.Item) magazine88);
        int int92 = magazine88.getID();
        client52.returnItem((team_001.Item) magazine88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1961 + "'", int92 == 1961);
    }

    @Test
    public void test882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test882");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        faculty25.setId((int) (byte) -1);
        java.lang.String str32 = faculty25.getPassword();
        team_001.Newsletter newsletter35 = new team_001.Newsletter("hi!", "hi!");
        faculty25.unsubscribe(newsletter35);
        faculty25.setUsername("hi!");
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        team_001.Student student46 = new team_001.Student("", "", "hi!", strList44);
        student46.setEmail("hi!");
        student46.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap51 = student46.borrowed;
        team_001.UserBuilder userBuilder52 = new team_001.UserBuilder();
        team_001.Client client53 = userBuilder52.buildVisitor();
        team_001.LibraryFacade libraryFacade56 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        libraryFacade56.bookKeeping("hi!", strList60);
        team_001.LibraryFacade libraryFacade66 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray69 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        libraryFacade66.bookKeeping("hi!", strList70);
        libraryFacade56.bookKeeping("", strList70);
        team_001.Library library74 = libraryFacade56.getLibrary();
        team_001.UserBuilder userBuilder75 = userBuilder52.setLibrary(library74);
        team_001.Client client76 = userBuilder75.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder78 = userBuilder75.setPassword("hi!");
        team_001.Library library79 = userBuilder75.lib;
        team_001.Client client80 = userBuilder75.buildStudent();
        team_001.Newsletter newsletter83 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str84 = newsletter83.getTitle();
        java.lang.String str85 = newsletter83.getAuthor();
        client80.unsubscribe(newsletter83);
        int int87 = student46.checkOverdue((team_001.Item) newsletter83);
        faculty25.subscribe(newsletter83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "" + "'", str32.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str84 + "' != '" + "" + "'", str84.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str85 + "' != '" + "hi!" + "'", str85.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test883");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Client client27 = userBuilder26.buildStudent();
        client27.setPassword("");
        team_001.CD cD32 = team_001.ItemFactory.createCD("hi!", "hi!");
        java.lang.Object obj33 = cD32.clone();
        client27.returnItem((team_001.Item) cD32);
        client27.setPassword("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj33);
    }

    @Test
    public void test884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test884");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.Library library25 = userBuilder23.lib;
        team_001.Client client26 = userBuilder23.buildNonFacultyStaff();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client26);
    }

    @Test
    public void test885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test885");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setPassword("");
        int int10 = student7.getId();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap11 = student7.borrowed;
        team_001.BorrowedIterator borrowedIterator12 = new team_001.BorrowedIterator(itemMap11);
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator12.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 19692 + "'", int10 == 19692);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap11);
    }

    @Test
    public void test886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test886");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade8 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        libraryFacade8.bookKeeping("hi!", strList12);
        team_001.Library library15 = libraryFacade8.getLibrary();
        team_001.UserBuilder userBuilder16 = userBuilder0.setLibrary(library15);
        team_001.Library library17 = userBuilder0.lib;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library17);
    }

    @Test
    public void test887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test887");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        team_001.Client client6 = userManagement1.writeUser("hi!", "", "", "hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
    }

    @Test
    public void test888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test888");
        team_001.NonFacultyStaff nonFacultyStaff3 = new team_001.NonFacultyStaff("hi!", "", "");
        java.lang.String str4 = nonFacultyStaff3.getUsername();
        team_001.UserBuilder userBuilder5 = new team_001.UserBuilder();
        team_001.Client client6 = userBuilder5.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap7 = client6.getSubcribed();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        team_001.Student student15 = new team_001.Student("", "", "hi!", strList13);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap16 = student15.getSubcribed();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        student24.setEmail("hi!");
        team_001.Magazine magazine29 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean30 = student24.isBorrowed((team_001.Item) magazine29);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        team_001.Student student38 = new team_001.Student("", "", "hi!", strList36);
        team_001.VirtualBook virtualBook41 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int42 = student38.checkOverdue((team_001.Item) virtualBook41);
        java.lang.Boolean boolean43 = student24.isBorrowed((team_001.Item) virtualBook41);
        java.lang.String str44 = virtualBook41.getTitle();
        student15.returnItem((team_001.Item) virtualBook41);
        virtualBook41.ID = 10;
        java.lang.Boolean boolean48 = client6.isBorrowed((team_001.Item) virtualBook41);
        team_001.UserBuilder userBuilder49 = new team_001.UserBuilder();
        team_001.Client client50 = userBuilder49.buildVisitor();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        team_001.Student student58 = new team_001.Student("", "", "hi!", strList56);
        team_001.VirtualBook virtualBook61 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int62 = student58.checkOverdue((team_001.Item) virtualBook61);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap63 = student58.borrowed;
        team_001.BorrowedIterator borrowedIterator64 = new team_001.BorrowedIterator(itemMap63);
        java.util.ArrayList<team_001.Item> itemList65 = client50.checkItemsOverdue(borrowedIterator64);
        java.util.ArrayList<team_001.Item> itemList66 = client6.checkItemsOverdue(borrowedIterator64);
        java.util.ArrayList<team_001.Item> itemList67 = nonFacultyStaff3.checkItemsOverdue(borrowedIterator64);
        boolean boolean68 = borrowedIterator64.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "hi!" + "'", str44.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test889");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        libraryFacade2.bookKeeping("", strList27);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap31 = libraryFacade2.getInventory();
        team_001.UserBuilder userBuilder32 = new team_001.UserBuilder();
        team_001.Client client33 = userBuilder32.buildVisitor();
        java.lang.String str34 = userBuilder32.password;
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        team_001.LibraryFacade libraryFacade47 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        libraryFacade47.bookKeeping("hi!", strList51);
        libraryFacade37.bookKeeping("", strList51);
        team_001.Library library55 = libraryFacade37.getLibrary();
        team_001.UserBuilder userBuilder56 = userBuilder32.setLibrary(library55);
        team_001.Client client57 = userBuilder32.buildVisitor();
        java.lang.String str58 = userBuilder32.password;
        team_001.Client client59 = userBuilder32.buildVisitor();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap60 = client59.borrowed;
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        team_001.Student student68 = new team_001.Student("", "", "hi!", strList66);
        student68.setEmail("hi!");
        team_001.Magazine magazine73 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean74 = student68.isBorrowed((team_001.Item) magazine73);
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        team_001.Student student82 = new team_001.Student("", "", "hi!", strList80);
        team_001.VirtualBook virtualBook85 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int86 = student82.checkOverdue((team_001.Item) virtualBook85);
        java.lang.Boolean boolean87 = student68.isBorrowed((team_001.Item) virtualBook85);
        java.lang.String str88 = virtualBook85.getTitle();
        int int89 = virtualBook85.getID();
        libraryFacade2.returnItem(client59, (team_001.Item) virtualBook85);
        team_001.Library library91 = libraryFacade2.getLibrary();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str88 + "' != '" + "hi!" + "'", str88.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 23106 + "'", int89 == 23106);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library91);
    }

    @Test
    public void test890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test890");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.lang.String str8 = student7.getEmail();
        student7.setUsername("hi!");
        student7.setEmail("hi!");
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap13 = student7.getSubcribed();
        team_001.UserBuilder userBuilder14 = new team_001.UserBuilder();
        team_001.Client client15 = userBuilder14.buildVisitor();
        team_001.UserBuilder userBuilder17 = userBuilder14.setPassword("hi!");
        userBuilder14.password = "hi!";
        team_001.LibraryFacade libraryFacade22 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        libraryFacade22.bookKeeping("hi!", strList26);
        team_001.Library library29 = libraryFacade22.getLibrary();
        team_001.UserBuilder userBuilder30 = userBuilder14.setLibrary(library29);
        team_001.Client client31 = userBuilder30.buildStudent();
        client31.setPassword("");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        team_001.Student student41 = new team_001.Student("", "", "hi!", strList39);
        team_001.Magazine magazine44 = new team_001.Magazine("", "hi!");
        student41.returnItem((team_001.Item) magazine44);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        team_001.Magazine magazine56 = new team_001.Magazine("", "hi!");
        student53.returnItem((team_001.Item) magazine56);
        java.lang.String str58 = student53.getEmail();
        student53.setPassword("");
        team_001.VirtualBook virtualBook63 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook63.ID = '4';
        int int66 = student53.checkOverdue((team_001.Item) virtualBook63);
        java.lang.String str67 = virtualBook63.getTitle();
        boolean boolean68 = student41.borrowItem((team_001.Item) virtualBook63);
        team_001.Newsletter newsletter71 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean72 = student41.borrowItem((team_001.Item) newsletter71);
        int int73 = newsletter71.ID;
        java.lang.String str74 = newsletter71.getTitle();
        client31.unsubscribe(newsletter71);
        student7.subscribe(newsletter71);
        int int77 = newsletter71.getID();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "" + "'", str58.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "hi!" + "'", str67.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 23135 + "'", int73 == 23135);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "hi!" + "'", str74.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 23135 + "'", int77 == 23135);
    }

    @Test
    public void test891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test891");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Client client27 = userBuilder26.buildStudent();
        java.lang.String str28 = client27.getEmail();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        team_001.Student student36 = new team_001.Student("", "", "hi!", strList34);
        java.lang.String str37 = student36.getEmail();
        student36.setUsername("hi!");
        student36.setPassword("");
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        team_001.Student student49 = new team_001.Student("", "", "hi!", strList47);
        team_001.Magazine magazine52 = new team_001.Magazine("", "hi!");
        student49.returnItem((team_001.Item) magazine52);
        java.lang.String str54 = student49.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap55 = null;
        student49.borrowed = itemMap55;
        java.lang.String str57 = student49.getPassword();
        team_001.visitor visitor61 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter64 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str65 = newsletter64.getTitle();
        visitor61.subscribe(newsletter64);
        student49.subscribe(newsletter64);
        student36.unsubscribe(newsletter64);
        java.lang.Object obj69 = newsletter64.clone();
        client27.subscribe(newsletter64);
        java.lang.String str71 = client27.getUsername();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "" + "'", str37.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "" + "'", str54.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "hi!" + "'", str57.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test892");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap8 = student7.getSubcribed();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        team_001.Student student16 = new team_001.Student("", "", "hi!", strList14);
        student16.setEmail("hi!");
        team_001.Magazine magazine21 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean22 = student16.isBorrowed((team_001.Item) magazine21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        team_001.Student student30 = new team_001.Student("", "", "hi!", strList28);
        team_001.VirtualBook virtualBook33 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int34 = student30.checkOverdue((team_001.Item) virtualBook33);
        java.lang.Boolean boolean35 = student16.isBorrowed((team_001.Item) virtualBook33);
        java.lang.String str36 = virtualBook33.getTitle();
        student7.returnItem((team_001.Item) virtualBook33);
        int int38 = virtualBook33.ID;
        java.lang.Object obj39 = virtualBook33.clone();
        int int40 = virtualBook33.ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "hi!" + "'", str36.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 23184 + "'", int38 == 23184);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj39);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 23184 + "'", int40 == 23184);
    }

    @Test
    public void test893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test893");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.UserBuilder userBuilder27 = new team_001.UserBuilder();
        team_001.Client client28 = userBuilder27.buildVisitor();
        java.lang.String str29 = userBuilder27.password;
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        team_001.LibraryFacade libraryFacade42 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        libraryFacade42.bookKeeping("hi!", strList46);
        libraryFacade32.bookKeeping("", strList46);
        team_001.Library library50 = libraryFacade32.getLibrary();
        team_001.UserBuilder userBuilder51 = userBuilder27.setLibrary(library50);
        team_001.Client client52 = userBuilder27.buildVisitor();
        java.lang.String str53 = userBuilder27.password;
        team_001.UserBuilder userBuilder54 = new team_001.UserBuilder();
        team_001.Client client55 = userBuilder54.buildVisitor();
        java.lang.String str56 = userBuilder54.password;
        userBuilder54.password = "hi!";
        team_001.LibraryFacade libraryFacade61 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        libraryFacade61.bookKeeping("hi!", strList65);
        team_001.Library library68 = libraryFacade61.getLibrary();
        team_001.UserBuilder userBuilder69 = userBuilder54.setLibrary(library68);
        userBuilder69.password = "";
        team_001.LibraryFacade libraryFacade74 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray77 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        libraryFacade74.bookKeeping("hi!", strList78);
        team_001.LibraryFacade libraryFacade84 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray87 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        libraryFacade84.bookKeeping("hi!", strList88);
        libraryFacade74.bookKeeping("", strList88);
        team_001.Library library92 = libraryFacade74.getLibrary();
        team_001.Library library93 = libraryFacade74.getLibrary();
        userBuilder69.lib = library93;
        team_001.UserBuilder userBuilder95 = userBuilder27.setLibrary(library93);
        team_001.Library library96 = userBuilder95.lib;
        team_001.UserBuilder userBuilder97 = userBuilder23.setLibrary(library96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder97);
    }

    @Test
    public void test894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test894");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap2 = client1.getSubcribed();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap11 = student10.getSubcribed();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        student19.setEmail("hi!");
        team_001.Magazine magazine24 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean25 = student19.isBorrowed((team_001.Item) magazine24);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        team_001.Student student33 = new team_001.Student("", "", "hi!", strList31);
        team_001.VirtualBook virtualBook36 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int37 = student33.checkOverdue((team_001.Item) virtualBook36);
        java.lang.Boolean boolean38 = student19.isBorrowed((team_001.Item) virtualBook36);
        java.lang.String str39 = virtualBook36.getTitle();
        student10.returnItem((team_001.Item) virtualBook36);
        virtualBook36.ID = 10;
        java.lang.Boolean boolean43 = client1.isBorrowed((team_001.Item) virtualBook36);
        team_001.UserBuilder userBuilder44 = new team_001.UserBuilder();
        team_001.Client client45 = userBuilder44.buildVisitor();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        team_001.VirtualBook virtualBook56 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int57 = student53.checkOverdue((team_001.Item) virtualBook56);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap58 = student53.borrowed;
        team_001.BorrowedIterator borrowedIterator59 = new team_001.BorrowedIterator(itemMap58);
        java.util.ArrayList<team_001.Item> itemList60 = client45.checkItemsOverdue(borrowedIterator59);
        java.util.ArrayList<team_001.Item> itemList61 = client1.checkItemsOverdue(borrowedIterator59);
        java.lang.String str62 = client1.getPassword();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap63 = client1.getSubcribed();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        team_001.Student student74 = new team_001.Student("", "", "hi!", strList72);
        team_001.Student student75 = new team_001.Student("", "hi!", "", strList72);
        team_001.PhysicalBook physicalBook78 = team_001.ItemFactory.createPhysicalBook("hi!", "hi!");
        student75.returnItem((team_001.Item) physicalBook78);
        int int80 = student75.getId();
        java.lang.String str81 = student75.getPassword();
        team_001.Faculty faculty85 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter88 = new team_001.Newsletter("hi!", "");
        faculty85.subscribe(newsletter88);
        student75.subscribe(newsletter88);
        int int91 = client1.checkOverdue((team_001.Item) newsletter88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook78);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 19734 + "'", int80 == 19734);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str81 + "' != '" + "" + "'", str81.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test895");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        java.lang.String str4 = userBuilder0.email;
        java.lang.String str5 = userBuilder0.email;
        team_001.UserBuilder userBuilder7 = userBuilder0.setUsername("");
        team_001.UserBuilder userBuilder8 = new team_001.UserBuilder();
        team_001.Client client9 = userBuilder8.buildVisitor();
        team_001.UserBuilder userBuilder11 = userBuilder8.setPassword("hi!");
        userBuilder8.password = "hi!";
        java.lang.String str14 = userBuilder8.password;
        team_001.Client client15 = userBuilder8.buildNonFacultyStaff();
        team_001.LibraryFacade libraryFacade18 = new team_001.LibraryFacade("", "");
        team_001.Library library19 = libraryFacade18.getLibrary();
        userBuilder8.lib = library19;
        team_001.UserBuilder userBuilder21 = userBuilder0.setLibrary(library19);
        team_001.Client client22 = userBuilder0.buildFaculty();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!" + "'", str14.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client22);
    }

    @Test
    public void test896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test896");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "");
        team_001.Library library3 = libraryFacade2.getLibrary();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap12 = student11.getSubcribed();
        team_001.CD cD15 = team_001.ItemFactory.createCD("hi!", "");
        student11.returnItem((team_001.Item) cD15);
        student11.setEmail("hi!");
        team_001.Faculty faculty22 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter25 = new team_001.Newsletter("hi!", "");
        faculty22.subscribe(newsletter25);
        team_001.PhysicalBook physicalBook29 = new team_001.PhysicalBook("", "");
        faculty22.returnItem((team_001.Item) physicalBook29);
        libraryFacade2.returnItem((team_001.Client) student11, (team_001.Item) physicalBook29);
        team_001.CD cD34 = team_001.ItemFactory.createCD("hi!", "");
        int int35 = cD34.getID();
        boolean boolean36 = student11.borrowItem((team_001.Item) cD34);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        team_001.Student student44 = new team_001.Student("", "", "hi!", strList42);
        team_001.Newsletter newsletter47 = new team_001.Newsletter("hi!", "hi!");
        int int48 = student44.checkOverdue((team_001.Item) newsletter47);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap49 = student44.borrowed;
        student11.setBorrowed(itemMap49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 23288 + "'", int35 == 23288);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap49);
    }

    @Test
    public void test897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test897");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.Client client6 = userBuilder0.buildVisitor();
        java.lang.String str7 = userBuilder0.password;
        team_001.UserBuilder userBuilder8 = new team_001.UserBuilder();
        team_001.Client client9 = userBuilder8.buildVisitor();
        java.lang.String str10 = userBuilder8.password;
        userBuilder8.password = "hi!";
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        team_001.Library library22 = libraryFacade15.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder8.setLibrary(library22);
        java.lang.String str24 = userBuilder8.email;
        team_001.UserBuilder userBuilder25 = new team_001.UserBuilder();
        userBuilder25.email = "hi!";
        team_001.Library library28 = userBuilder25.lib;
        team_001.LibraryFacade libraryFacade31 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        libraryFacade31.bookKeeping("hi!", strList35);
        team_001.LibraryFacade libraryFacade41 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        libraryFacade41.bookKeeping("hi!", strList45);
        libraryFacade31.bookKeeping("", strList45);
        team_001.Library library49 = libraryFacade31.getLibrary();
        team_001.UserBuilder userBuilder50 = userBuilder25.setLibrary(library49);
        userBuilder8.lib = library49;
        team_001.UserBuilder userBuilder52 = userBuilder0.setLibrary(library49);
        team_001.Client client53 = userBuilder52.buildNonFacultyStaff();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client53);
    }

    @Test
    public void test898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test898");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        team_001.Magazine magazine43 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean44 = student10.borrowItem((team_001.Item) magazine43);
        team_001.Newsletter newsletter47 = new team_001.Newsletter("hi!", "");
        student10.unsubscribe(newsletter47);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap49 = student10.borrowed;
        team_001.BorrowedIterator borrowedIterator50 = new team_001.BorrowedIterator(itemMap49);
        boolean boolean51 = borrowedIterator50.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test899");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        team_001.LibraryFacade libraryFacade18 = new team_001.LibraryFacade("hi!", "");
        team_001.Library library19 = libraryFacade18.getLibrary();
        userBuilder15.lib = library19;
        team_001.UserBuilder userBuilder21 = new team_001.UserBuilder();
        team_001.Client client22 = userBuilder21.buildVisitor();
        java.lang.String str23 = userBuilder21.password;
        userBuilder21.password = "hi!";
        team_001.LibraryFacade libraryFacade28 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        libraryFacade28.bookKeeping("hi!", strList32);
        team_001.Library library35 = libraryFacade28.getLibrary();
        team_001.UserBuilder userBuilder36 = userBuilder21.setLibrary(library35);
        team_001.UserBuilder userBuilder37 = new team_001.UserBuilder();
        team_001.Client client38 = userBuilder37.buildVisitor();
        team_001.LibraryFacade libraryFacade41 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        libraryFacade41.bookKeeping("hi!", strList45);
        team_001.LibraryFacade libraryFacade51 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        libraryFacade51.bookKeeping("hi!", strList55);
        libraryFacade41.bookKeeping("", strList55);
        team_001.Library library59 = libraryFacade41.getLibrary();
        team_001.UserBuilder userBuilder60 = userBuilder37.setLibrary(library59);
        team_001.Client client61 = userBuilder60.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder63 = userBuilder60.setPassword("hi!");
        team_001.Library library64 = userBuilder60.lib;
        team_001.Client client65 = userBuilder60.buildStudent();
        team_001.UserBuilder userBuilder67 = userBuilder60.setUsername("");
        team_001.UserBuilder userBuilder68 = new team_001.UserBuilder();
        team_001.Client client69 = userBuilder68.buildVisitor();
        team_001.UserBuilder userBuilder71 = userBuilder68.setPassword("hi!");
        userBuilder68.password = "hi!";
        team_001.LibraryFacade libraryFacade76 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray79 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        libraryFacade76.bookKeeping("hi!", strList80);
        team_001.Library library83 = libraryFacade76.getLibrary();
        team_001.UserBuilder userBuilder84 = userBuilder68.setLibrary(library83);
        team_001.UserBuilder userBuilder85 = userBuilder67.setLibrary(library83);
        team_001.Library library86 = userBuilder85.lib;
        userBuilder36.lib = library86;
        team_001.UserBuilder userBuilder88 = userBuilder15.setLibrary(library86);
        team_001.Client client89 = userBuilder15.buildVisitor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client89);
    }

    @Test
    public void test900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test900");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        team_001.Student student9 = new team_001.Student("", "", "hi!", strList7);
        team_001.VirtualBook virtualBook12 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int13 = student9.checkOverdue((team_001.Item) virtualBook12);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap14 = student9.borrowed;
        team_001.BorrowedIterator borrowedIterator15 = new team_001.BorrowedIterator(itemMap14);
        java.util.ArrayList<team_001.Item> itemList16 = client1.checkItemsOverdue(borrowedIterator15);
        team_001.Magazine magazine19 = new team_001.Magazine("hi!", "");
        int int20 = client1.checkOverdue((team_001.Item) magazine19);
        java.lang.String str21 = client1.getEmail();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        team_001.Student student29 = new team_001.Student("", "", "hi!", strList27);
        team_001.VirtualBook virtualBook32 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int33 = student29.checkOverdue((team_001.Item) virtualBook32);
        virtualBook32.ID = 10;
        boolean boolean36 = client1.borrowItem((team_001.Item) virtualBook32);
        client1.setId(1668);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test901");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        team_001.Magazine magazine43 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean44 = student10.borrowItem((team_001.Item) magazine43);
        java.lang.Object obj45 = magazine43.clone();
        java.lang.Object obj46 = magazine43.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj46);
    }

    @Test
    public void test902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test902");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Student student11 = new team_001.Student("", "hi!", "", strList8);
        team_001.PhysicalBook physicalBook14 = team_001.ItemFactory.createPhysicalBook("hi!", "hi!");
        student11.returnItem((team_001.Item) physicalBook14);
        java.lang.String str16 = student11.getPassword();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        team_001.Student student24 = new team_001.Student("", "", "hi!", strList22);
        team_001.VirtualBook virtualBook27 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int28 = student24.checkOverdue((team_001.Item) virtualBook27);
        int int29 = student24.getId();
        student24.setUsername("");
        team_001.LibraryFacade libraryFacade34 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        team_001.Student student42 = new team_001.Student("", "", "hi!", strList40);
        team_001.Magazine magazine45 = new team_001.Magazine("", "hi!");
        student42.returnItem((team_001.Item) magazine45);
        java.lang.String str47 = student42.getEmail();
        team_001.CD cD50 = new team_001.CD("", "");
        boolean boolean51 = libraryFacade34.borrowItem((team_001.Client) student42, (team_001.Item) cD50);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        team_001.Student student59 = new team_001.Student("", "", "hi!", strList57);
        student59.setEmail("hi!");
        team_001.Magazine magazine64 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean65 = student59.isBorrowed((team_001.Item) magazine64);
        boolean boolean66 = student42.borrowItem((team_001.Item) magazine64);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        team_001.Student student74 = new team_001.Student("", "", "hi!", strList72);
        team_001.VirtualBook virtualBook77 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int78 = student74.checkOverdue((team_001.Item) virtualBook77);
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap79 = student74.borrowed;
        team_001.BorrowedIterator borrowedIterator80 = new team_001.BorrowedIterator(itemMap79);
        student42.borrowed = itemMap79;
        student24.borrowed = itemMap79;
        student11.borrowed = itemMap79;
        java.lang.Class<?> wildcardClass84 = itemMap79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(physicalBook14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 19762 + "'", int29 == 19762);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "" + "'", str47.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test903");
        team_001.visitor visitor3 = new team_001.visitor("", "", "hi!");
        team_001.LibraryFacade libraryFacade6 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        libraryFacade6.bookKeeping("hi!", strList10);
        team_001.Library library13 = libraryFacade6.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap14 = libraryFacade6.getInventory();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap15 = libraryFacade6.getInventory();
        team_001.NonFacultyStaff nonFacultyStaff19 = new team_001.NonFacultyStaff("", "hi!", "hi!");
        team_001.LibraryFacade libraryFacade22 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        libraryFacade22.bookKeeping("hi!", strList26);
        team_001.LibraryFacade libraryFacade32 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        libraryFacade32.bookKeeping("hi!", strList36);
        libraryFacade22.bookKeeping("", strList36);
        team_001.Library library40 = libraryFacade22.getLibrary();
        team_001.Library library41 = libraryFacade22.getLibrary();
        team_001.Faculty faculty45 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook48 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean49 = libraryFacade22.borrowItem((team_001.Client) faculty45, (team_001.Item) virtualBook48);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        team_001.Student student57 = new team_001.Student("", "", "hi!", strList55);
        student57.setEmail("hi!");
        student57.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap62 = student57.borrowed;
        student57.setUsername("");
        team_001.Newsletter newsletter67 = new team_001.Newsletter("hi!", "hi!");
        student57.unsubscribe(newsletter67);
        java.lang.Object obj69 = newsletter67.clone();
        faculty45.unsubscribe(newsletter67);
        libraryFacade6.returnItem((team_001.Client) nonFacultyStaff19, (team_001.Item) newsletter67);
        visitor3.subscribe(newsletter67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj69);
    }

    @Test
    public void test904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test904");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        java.lang.String str5 = userBuilder0.password;
        team_001.Client client6 = userBuilder0.buildFaculty();
        java.lang.String str7 = userBuilder0.password;
        java.lang.String str8 = userBuilder0.email;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test905");
        team_001.NonFacultyStaff nonFacultyStaff3 = new team_001.NonFacultyStaff("hi!", "hi!", "");
        int int4 = nonFacultyStaff3.getId();
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19772 + "'", int4 == 19772);
    }

    @Test
    public void test906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test906");
        team_001.LibraryFacade libraryFacade8 = new team_001.LibraryFacade("", "");
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        team_001.Student student17 = new team_001.Student("", "", "hi!", strList15);
        libraryFacade8.bookKeeping("hi!", strList15);
        team_001.Student student19 = new team_001.Student("hi!", "hi!", "", strList15);
        team_001.Student student20 = new team_001.Student("hi!", "", "hi!", strList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test907");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        team_001.Magazine magazine12 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean13 = student7.isBorrowed((team_001.Item) magazine12);
        student7.setPassword("hi!");
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap16 = student7.getSubcribed();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap17 = student7.getSubcribed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap17);
    }

    @Test
    public void test908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test908");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        userBuilder17.email = "hi!";
        team_001.Library library20 = userBuilder17.lib;
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Library library41 = libraryFacade23.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder17.setLibrary(library41);
        userBuilder0.lib = library41;
        team_001.Client client44 = userBuilder0.buildFaculty();
        userBuilder0.password = "hi!";
        team_001.Client client47 = userBuilder0.buildVisitor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client47);
    }

    @Test
    public void test909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test909");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        userBuilder15.password = "";
        team_001.LibraryFacade libraryFacade20 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        libraryFacade20.bookKeeping("hi!", strList24);
        team_001.LibraryFacade libraryFacade30 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        libraryFacade30.bookKeeping("hi!", strList34);
        libraryFacade20.bookKeeping("", strList34);
        team_001.Library library38 = libraryFacade20.getLibrary();
        team_001.Library library39 = libraryFacade20.getLibrary();
        userBuilder15.lib = library39;
        team_001.LibraryFacade libraryFacade43 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        libraryFacade43.bookKeeping("hi!", strList47);
        team_001.LibraryFacade libraryFacade53 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        libraryFacade53.bookKeeping("hi!", strList57);
        libraryFacade43.bookKeeping("", strList57);
        team_001.Library library61 = libraryFacade43.getLibrary();
        team_001.Library library62 = libraryFacade43.getLibrary();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        team_001.Student student70 = new team_001.Student("", "", "hi!", strList68);
        student70.setEmail("hi!");
        student70.setEmail("hi!");
        team_001.PhysicalBook physicalBook77 = new team_001.PhysicalBook("", "hi!");
        boolean boolean78 = libraryFacade43.borrowItem((team_001.Client) student70, (team_001.Item) physicalBook77);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap79 = libraryFacade43.getInventory();
        team_001.Library library80 = libraryFacade43.getLibrary();
        userBuilder15.lib = library80;
        team_001.UserBuilder userBuilder83 = userBuilder15.setUsername("");
        team_001.Client client84 = userBuilder83.buildVisitor();
        client84.setUsername("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client84);
    }

    @Test
    public void test910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test910");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap2 = client1.getSubcribed();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap11 = student10.getSubcribed();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        team_001.Student student19 = new team_001.Student("", "", "hi!", strList17);
        student19.setEmail("hi!");
        team_001.Magazine magazine24 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean25 = student19.isBorrowed((team_001.Item) magazine24);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        team_001.Student student33 = new team_001.Student("", "", "hi!", strList31);
        team_001.VirtualBook virtualBook36 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int37 = student33.checkOverdue((team_001.Item) virtualBook36);
        java.lang.Boolean boolean38 = student19.isBorrowed((team_001.Item) virtualBook36);
        java.lang.String str39 = virtualBook36.getTitle();
        student10.returnItem((team_001.Item) virtualBook36);
        virtualBook36.ID = 10;
        java.lang.Boolean boolean43 = client1.isBorrowed((team_001.Item) virtualBook36);
        java.lang.String str44 = virtualBook36.getAuthor();
        int int45 = virtualBook36.getID();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "hi!" + "'", str44.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
    }

    @Test
    public void test911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test911");
        team_001.LibraryFacade libraryFacade11 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        libraryFacade11.bookKeeping("hi!", strList15);
        team_001.LibraryFacade libraryFacade21 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        libraryFacade21.bookKeeping("hi!", strList25);
        libraryFacade11.bookKeeping("", strList25);
        team_001.Library library29 = libraryFacade11.getLibrary();
        team_001.Library library30 = libraryFacade11.getLibrary();
        team_001.Faculty faculty34 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook37 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean38 = libraryFacade11.borrowItem((team_001.Client) faculty34, (team_001.Item) virtualBook37);
        java.util.ArrayList<java.lang.String> strList39 = faculty34.getCourses();
        java.util.ArrayList<java.lang.String> strList40 = faculty34.getCourses();
        java.util.ArrayList<java.lang.String> strList41 = faculty34.getCourses();
        team_001.Student student42 = new team_001.Student("", "hi!", "hi!", strList41);
        team_001.Student student43 = new team_001.Student("", "hi!", "hi!", strList41);
        team_001.Student student44 = new team_001.Student("", "", "hi!", strList41);
        student44.setId(0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList41);
    }

    @Test
    public void test912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test912");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder26 = userBuilder23.setPassword("hi!");
        team_001.Library library27 = userBuilder23.lib;
        team_001.Client client28 = userBuilder23.buildStudent();
        team_001.LibraryFacade libraryFacade31 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        libraryFacade31.bookKeeping("hi!", strList35);
        team_001.visitor visitor41 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine44 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean45 = libraryFacade31.borrowItem((team_001.Client) visitor41, (team_001.Item) magazine44);
        java.lang.Boolean boolean46 = client28.isBorrowed((team_001.Item) magazine44);
        java.lang.String str47 = client28.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "hi!" + "'", str47.equals("hi!"));
    }

    @Test
    public void test913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test913");
        team_001.VirtualBook virtualBook2 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int3 = virtualBook2.ID;
        java.lang.String str4 = virtualBook2.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook2);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 23586 + "'", int3 == 23586);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
    }

    @Test
    public void test914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test914");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade8 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        libraryFacade8.bookKeeping("hi!", strList12);
        team_001.Library library15 = libraryFacade8.getLibrary();
        team_001.UserBuilder userBuilder16 = userBuilder0.setLibrary(library15);
        team_001.UserBuilder userBuilder18 = userBuilder0.setUsername("");
        team_001.Client client19 = userBuilder0.buildNonFacultyStaff();
        java.lang.String str20 = client19.getPassword();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "hi!" + "'", str20.equals("hi!"));
    }

    @Test
    public void test915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test915");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        team_001.Newsletter newsletter10 = new team_001.Newsletter("hi!", "hi!");
        int int11 = student7.checkOverdue((team_001.Item) newsletter10);
        student7.setEmail("");
        team_001.UserBuilder userBuilder14 = new team_001.UserBuilder();
        team_001.Client client15 = userBuilder14.buildVisitor();
        team_001.UserBuilder userBuilder17 = userBuilder14.setPassword("hi!");
        userBuilder14.password = "hi!";
        java.lang.String str20 = userBuilder14.password;
        java.lang.String str21 = userBuilder14.password;
        team_001.Client client22 = userBuilder14.buildNonFacultyStaff();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        team_001.Student student30 = new team_001.Student("", "", "hi!", strList28);
        java.lang.String str31 = student30.getEmail();
        student30.setUsername("hi!");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        team_001.Student student41 = new team_001.Student("", "", "hi!", strList39);
        team_001.VirtualBook virtualBook44 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int45 = student41.checkOverdue((team_001.Item) virtualBook44);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        team_001.Student student53 = new team_001.Student("", "", "hi!", strList51);
        student53.setEmail("hi!");
        student53.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap58 = student53.borrowed;
        student53.setUsername("");
        team_001.Newsletter newsletter63 = new team_001.Newsletter("hi!", "hi!");
        student53.unsubscribe(newsletter63);
        java.lang.Object obj65 = newsletter63.clone();
        student41.subscribe(newsletter63);
        java.lang.String str67 = newsletter63.getAuthor();
        student30.subscribe(newsletter63);
        client22.unsubscribe(newsletter63);
        student7.unsubscribe(newsletter63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "hi!" + "'", str20.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "hi!" + "'", str21.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "" + "'", str31.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "hi!" + "'", str67.equals("hi!"));
    }

    @Test
    public void test916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test916");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        team_001.CD cD18 = new team_001.CD("", "");
        boolean boolean19 = libraryFacade2.borrowItem((team_001.Client) student10, (team_001.Item) cD18);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Faculty faculty28 = new team_001.Faculty("hi!", "hi!", "");
        java.util.ArrayList<java.lang.String> strList29 = faculty28.getCourses();
        team_001.Student student30 = new team_001.Student("hi!", "", "hi!", strList29);
        libraryFacade2.bookKeeping("", strList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test917");
        team_001.VirtualBook virtualBook2 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook2.ID = '4';
        virtualBook2.ID = (short) 100;
        java.lang.String str7 = virtualBook2.getAuthor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
    }

    @Test
    public void test918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test918");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "");
        team_001.Library library3 = libraryFacade2.getLibrary();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        team_001.Student student11 = new team_001.Student("", "", "hi!", strList9);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap12 = student11.getSubcribed();
        team_001.CD cD15 = team_001.ItemFactory.createCD("hi!", "");
        student11.returnItem((team_001.Item) cD15);
        student11.setEmail("hi!");
        team_001.Faculty faculty22 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter25 = new team_001.Newsletter("hi!", "");
        faculty22.subscribe(newsletter25);
        team_001.PhysicalBook physicalBook29 = new team_001.PhysicalBook("", "");
        faculty22.returnItem((team_001.Item) physicalBook29);
        libraryFacade2.returnItem((team_001.Client) student11, (team_001.Item) physicalBook29);
        team_001.UserBuilder userBuilder32 = new team_001.UserBuilder();
        team_001.Client client33 = userBuilder32.buildVisitor();
        team_001.LibraryFacade libraryFacade36 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        libraryFacade36.bookKeeping("hi!", strList40);
        team_001.LibraryFacade libraryFacade46 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        libraryFacade46.bookKeeping("hi!", strList50);
        libraryFacade36.bookKeeping("", strList50);
        team_001.Library library54 = libraryFacade36.getLibrary();
        team_001.UserBuilder userBuilder55 = userBuilder32.setLibrary(library54);
        team_001.Client client56 = userBuilder55.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder58 = userBuilder55.setPassword("hi!");
        team_001.Client client59 = userBuilder55.buildNonFacultyStaff();
        team_001.Magazine magazine62 = new team_001.Magazine("", "hi!");
        magazine62.ID = 6821;
        java.lang.String str65 = magazine62.getTitle();
        libraryFacade2.returnItem(client59, (team_001.Item) magazine62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(cD15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
    }

    @Test
    public void test919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test919");
        team_001.NonFacultyStaff nonFacultyStaff3 = new team_001.NonFacultyStaff("hi!", "", "");
        java.lang.String str4 = nonFacultyStaff3.getUsername();
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.LibraryFacade libraryFacade17 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        libraryFacade17.bookKeeping("hi!", strList21);
        libraryFacade7.bookKeeping("", strList21);
        team_001.Library library25 = libraryFacade7.getLibrary();
        team_001.Library library26 = libraryFacade7.getLibrary();
        team_001.Faculty faculty30 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook33 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean34 = libraryFacade7.borrowItem((team_001.Client) faculty30, (team_001.Item) virtualBook33);
        java.util.ArrayList<java.lang.String> strList35 = faculty30.getCourses();
        team_001.LibraryFacade libraryFacade38 = new team_001.LibraryFacade("hi!", "");
        team_001.Faculty faculty42 = new team_001.Faculty("", "", "hi!");
        team_001.visitor visitor46 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter49 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str50 = newsletter49.getTitle();
        visitor46.subscribe(newsletter49);
        boolean boolean52 = libraryFacade38.borrowItem((team_001.Client) faculty42, (team_001.Item) newsletter49);
        int int53 = faculty30.checkOverdue((team_001.Item) newsletter49);
        boolean boolean54 = nonFacultyStaff3.borrowItem((team_001.Item) newsletter49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "" + "'", str50.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test920");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        userBuilder17.email = "hi!";
        team_001.Library library20 = userBuilder17.lib;
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Library library41 = libraryFacade23.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder17.setLibrary(library41);
        userBuilder0.lib = library41;
        team_001.Client client44 = userBuilder0.buildFaculty();
        team_001.UserBuilder userBuilder46 = userBuilder0.setUsername("hi!");
        userBuilder0.email = "hi!";
        java.lang.String str49 = userBuilder0.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "hi!" + "'", str49.equals("hi!"));
    }

    @Test
    public void test921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test921");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.Library library6 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder7 = userBuilder0.setLibrary(library6);
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder9 = userBuilder0.setPassword("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid password format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder7);
    }

    @Test
    public void test922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test922");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.Client client2 = userBuilder0.buildNonFacultyStaff();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        team_001.Student student22 = new team_001.Student("", "", "hi!", strList20);
        team_001.Magazine magazine25 = new team_001.Magazine("", "hi!");
        student22.returnItem((team_001.Item) magazine25);
        java.lang.String str27 = student22.getEmail();
        student22.setPassword("");
        team_001.VirtualBook virtualBook32 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook32.ID = '4';
        int int35 = student22.checkOverdue((team_001.Item) virtualBook32);
        java.lang.String str36 = virtualBook32.getTitle();
        boolean boolean37 = student10.borrowItem((team_001.Item) virtualBook32);
        client2.returnItem((team_001.Item) virtualBook32);
        client2.setId(1416);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "hi!" + "'", str36.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test923");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        team_001.Magazine magazine12 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean13 = student7.isBorrowed((team_001.Item) magazine12);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        team_001.Student student21 = new team_001.Student("", "", "hi!", strList19);
        team_001.VirtualBook virtualBook24 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int25 = student21.checkOverdue((team_001.Item) virtualBook24);
        java.lang.Boolean boolean26 = student7.isBorrowed((team_001.Item) virtualBook24);
        student7.setPassword("");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        team_001.Student student36 = new team_001.Student("", "", "hi!", strList34);
        student36.setPassword("");
        int int39 = student36.getId();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap40 = student36.borrowed;
        team_001.BorrowedIterator borrowedIterator41 = new team_001.BorrowedIterator(itemMap40);
        team_001.BorrowedIterator borrowedIterator42 = new team_001.BorrowedIterator(itemMap40);
        team_001.BorrowedIterator borrowedIterator43 = new team_001.BorrowedIterator(itemMap40);
        java.util.ArrayList<team_001.Item> itemList44 = student7.checkItemsOverdue(borrowedIterator43);
        // The following exception was thrown during execution in test generation
        try {
            borrowedIterator43.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 19823 + "'", int39 == 19823);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList44);
    }

    @Test
    public void test924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test924");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.Client client48 = userBuilder47.buildNonFacultyStaff();
        team_001.Client client49 = userBuilder47.buildNonFacultyStaff();
        team_001.Client client50 = userBuilder47.buildFaculty();
        team_001.UserBuilder userBuilder52 = userBuilder47.setUsername("");
        java.lang.String str53 = userBuilder52.email;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test925");
        team_001.LibraryFacade libraryFacade11 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        libraryFacade11.bookKeeping("hi!", strList15);
        team_001.LibraryFacade libraryFacade21 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        libraryFacade21.bookKeeping("hi!", strList25);
        libraryFacade11.bookKeeping("", strList25);
        team_001.Student student29 = new team_001.Student("hi!", "", "hi!", strList25);
        team_001.Student student30 = new team_001.Student("hi!", "", "hi!", strList25);
        team_001.Student student31 = new team_001.Student("", "hi!", "hi!", strList25);
        java.lang.String str32 = student31.getUsername();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "" + "'", str32.equals(""));
    }

    @Test
    public void test926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test926");
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.Library library12 = libraryFacade5.getLibrary();
        team_001.Library library13 = libraryFacade5.getLibrary();
        team_001.Faculty faculty18 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter21 = new team_001.Newsletter("hi!", "");
        faculty18.subscribe(newsletter21);
        java.util.ArrayList<java.lang.String> strList23 = faculty18.getCourses();
        faculty18.setUsername("hi!");
        java.util.ArrayList<java.lang.String> strList26 = faculty18.getCourses();
        libraryFacade5.bookKeeping("hi!", strList26);
        team_001.Student student28 = new team_001.Student("", "hi!", "hi!", strList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList26);
    }

    @Test
    public void test927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test927");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        team_001.Student student15 = new team_001.Student("", "", "hi!", strList13);
        team_001.Magazine magazine18 = new team_001.Magazine("", "hi!");
        student15.returnItem((team_001.Item) magazine18);
        java.lang.String str20 = student15.getEmail();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap21 = null;
        student15.borrowed = itemMap21;
        java.lang.String str23 = student15.getPassword();
        team_001.visitor visitor27 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter30 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str31 = newsletter30.getTitle();
        visitor27.subscribe(newsletter30);
        student15.subscribe(newsletter30);
        student7.subscribe(newsletter30);
        team_001.UserManagement userManagement36 = new team_001.UserManagement("");
        team_001.Client client41 = userManagement36.writeUser("", "hi!", "hi!", "hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap42 = client41.borrowed;
        team_001.BorrowedIterator borrowedIterator43 = new team_001.BorrowedIterator(itemMap42);
        java.util.ArrayList<team_001.Item> itemList44 = student7.checkItemsOverdue(borrowedIterator43);
        student7.setId(82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "" + "'", str20.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "hi!" + "'", str23.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "" + "'", str31.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemList44);
    }

    @Test
    public void test928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test928");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.Client client5 = userBuilder0.buildVisitor();
        team_001.Client client6 = userBuilder0.buildNonFacultyStaff();
        java.lang.String str7 = userBuilder0.email;
        userBuilder0.email = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test929");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        team_001.Student student48 = new team_001.Student("", "", "hi!", strList46);
        team_001.Magazine magazine51 = new team_001.Magazine("", "hi!");
        student48.returnItem((team_001.Item) magazine51);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        team_001.Student student60 = new team_001.Student("", "", "hi!", strList58);
        team_001.Magazine magazine63 = new team_001.Magazine("", "hi!");
        student60.returnItem((team_001.Item) magazine63);
        java.lang.String str65 = student60.getEmail();
        student60.setPassword("");
        team_001.VirtualBook virtualBook70 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook70.ID = '4';
        int int73 = student60.checkOverdue((team_001.Item) virtualBook70);
        java.lang.String str74 = virtualBook70.getTitle();
        boolean boolean75 = student48.borrowItem((team_001.Item) virtualBook70);
        student10.returnItem((team_001.Item) virtualBook70);
        team_001.Newsletter newsletter79 = team_001.ItemFactory.createNewsLetter("", "hi!");
        student10.subscribe(newsletter79);
        newsletter79.ID = 7007;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "hi!" + "'", str74.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter79);
    }

    @Test
    public void test930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test930");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        team_001.Student student10 = new team_001.Student("", "", "hi!", strList8);
        team_001.Magazine magazine13 = new team_001.Magazine("", "hi!");
        student10.returnItem((team_001.Item) magazine13);
        java.lang.String str15 = student10.getEmail();
        student10.setPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        team_001.Student student25 = new team_001.Student("", "", "hi!", strList23);
        team_001.Magazine magazine28 = new team_001.Magazine("", "hi!");
        student25.returnItem((team_001.Item) magazine28);
        java.lang.String str30 = student25.getEmail();
        student25.setPassword("");
        team_001.VirtualBook virtualBook35 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook35.ID = '4';
        int int38 = student25.checkOverdue((team_001.Item) virtualBook35);
        java.lang.String str39 = virtualBook35.getTitle();
        int int40 = libraryFacade2.checkOverdue((team_001.Client) student10, (team_001.Item) virtualBook35);
        team_001.Magazine magazine43 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean44 = student10.borrowItem((team_001.Item) magazine43);
        team_001.Newsletter newsletter47 = new team_001.Newsletter("hi!", "");
        student10.unsubscribe(newsletter47);
        java.lang.Object obj49 = newsletter47.clone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!" + "'", str39.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj49);
    }

    @Test
    public void test931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test931");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap8 = student7.getSubcribed();
        student7.setPassword("hi!");
        java.lang.String str11 = student7.getUsername();
        java.lang.String str12 = student7.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
    }

    @Test
    public void test932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test932");
        team_001.CD cD2 = new team_001.CD("hi!", "");
        java.lang.String str3 = cD2.getAuthor();
        java.lang.Object obj4 = cD2.clone();
        java.lang.Object obj5 = cD2.clone();
        int int6 = cD2.ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 23879 + "'", int6 == 23879);
    }

    @Test
    public void test933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test933");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.Library library9 = libraryFacade2.getLibrary();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap10 = libraryFacade2.getInventory();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        java.lang.String str19 = student18.getEmail();
        student18.setUsername("hi!");
        student18.setPassword("");
        team_001.VirtualBook virtualBook26 = new team_001.VirtualBook("hi!", "");
        int int27 = libraryFacade2.checkOverdue((team_001.Client) student18, (team_001.Item) virtualBook26);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap28 = libraryFacade2.getInventory();
        team_001.Faculty faculty33 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter36 = new team_001.Newsletter("hi!", "");
        faculty33.subscribe(newsletter36);
        java.util.ArrayList<java.lang.String> strList38 = faculty33.getCourses();
        java.util.ArrayList<java.lang.String> strList39 = faculty33.getCourses();
        libraryFacade2.bookKeeping("hi!", strList39);
        team_001.Client client41 = null;
        team_001.LibraryFacade libraryFacade44 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        team_001.Student student52 = new team_001.Student("", "", "hi!", strList50);
        team_001.Magazine magazine55 = new team_001.Magazine("", "hi!");
        student52.returnItem((team_001.Item) magazine55);
        java.lang.String str57 = student52.getEmail();
        team_001.CD cD60 = new team_001.CD("", "");
        boolean boolean61 = libraryFacade44.borrowItem((team_001.Client) student52, (team_001.Item) cD60);
        team_001.LibraryFacade libraryFacade65 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        libraryFacade65.bookKeeping("hi!", strList69);
        libraryFacade44.bookKeeping("", strList69);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap73 = libraryFacade44.getInventory();
        team_001.Faculty faculty77 = new team_001.Faculty("hi!", "", "");
        team_001.PhysicalBook physicalBook80 = new team_001.PhysicalBook("", "");
        java.lang.String str81 = physicalBook80.getAuthor();
        libraryFacade44.returnItem((team_001.Client) faculty77, (team_001.Item) physicalBook80);
        // The following exception was thrown during execution in test generation
        try {
            int int83 = libraryFacade2.checkOverdue(client41, (team_001.Item) physicalBook80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"team_001.Client.checkOverdue(team_001.Item)\" because \"client\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "" + "'", str19.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "" + "'", str57.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str81 + "' != '" + "" + "'", str81.equals(""));
    }

    @Test
    public void test934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test934");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        java.lang.String str4 = userBuilder0.email;
        java.lang.String str5 = userBuilder0.email;
        userBuilder0.email = "";
        userBuilder0.email = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
    }

    @Test
    public void test935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test935");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        student7.setEmail("hi!");
        team_001.Magazine magazine12 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean13 = student7.isBorrowed((team_001.Item) magazine12);
        student7.setEmail("hi!");
        team_001.Faculty faculty19 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter22 = new team_001.Newsletter("hi!", "");
        faculty19.subscribe(newsletter22);
        java.util.ArrayList<java.lang.String> strList24 = faculty19.getCourses();
        faculty19.setUsername("hi!");
        java.util.ArrayList<java.lang.String> strList27 = faculty19.getCourses();
        java.util.ArrayList<java.lang.String> strList28 = faculty19.getCourses();
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap29 = faculty19.borrowed;
        student7.borrowed = itemMap29;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap29);
    }

    @Test
    public void test936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test936");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.UserBuilder userBuilder3 = userBuilder0.setPassword("hi!");
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade8 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        libraryFacade8.bookKeeping("hi!", strList12);
        team_001.Library library15 = libraryFacade8.getLibrary();
        team_001.UserBuilder userBuilder16 = userBuilder0.setLibrary(library15);
        team_001.Client client17 = userBuilder16.buildStudent();
        client17.setPassword("");
        java.lang.String str20 = client17.getEmail();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test937");
        team_001.Client.current_id = 7026;
    }

    @Test
    public void test938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test938");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        team_001.Student student29 = new team_001.Student("", "", "hi!", strList27);
        student29.setEmail("hi!");
        student29.setEmail("hi!");
        team_001.PhysicalBook physicalBook36 = new team_001.PhysicalBook("", "hi!");
        boolean boolean37 = libraryFacade2.borrowItem((team_001.Client) student29, (team_001.Item) physicalBook36);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap38 = libraryFacade2.getInventory();
        team_001.Library library39 = libraryFacade2.getLibrary();
        team_001.UserBuilder userBuilder40 = new team_001.UserBuilder();
        team_001.Client client41 = userBuilder40.buildVisitor();
        team_001.LibraryFacade libraryFacade44 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        libraryFacade44.bookKeeping("hi!", strList48);
        team_001.LibraryFacade libraryFacade54 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        libraryFacade54.bookKeeping("hi!", strList58);
        libraryFacade44.bookKeeping("", strList58);
        team_001.Library library62 = libraryFacade44.getLibrary();
        team_001.UserBuilder userBuilder63 = userBuilder40.setLibrary(library62);
        team_001.Client client64 = userBuilder40.buildVisitor();
        int int65 = client64.getId();
        team_001.Item item66 = null;
        int int67 = libraryFacade2.checkOverdue(client64, item66);
        team_001.Library library68 = libraryFacade2.getLibrary();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 7029 + "'", int65 == 7029);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library68);
    }

    @Test
    public void test939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test939");
        team_001.UserManagement userManagement1 = new team_001.UserManagement("");
        team_001.Client client6 = userManagement1.writeUser("", "hi!", "hi!", "hi!");
        boolean boolean9 = userManagement1.readUsers("hi!", "hi!");
        java.lang.String str11 = userManagement1.getType("");
        team_001.Client client16 = userManagement1.writeUser("", "hi!", "hi!", "hi!");
        boolean boolean19 = userManagement1.readUsers("", "");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test940");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.Client client5 = userBuilder0.buildVisitor();
        team_001.Client client6 = userBuilder0.buildFaculty();
        team_001.Client client7 = userBuilder0.buildStudent();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client7);
    }

    @Test
    public void test941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test941");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.UserBuilder userBuilder24 = userBuilder0.setLibrary(library23);
        team_001.LibraryFacade libraryFacade27 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        libraryFacade27.bookKeeping("hi!", strList31);
        team_001.LibraryFacade libraryFacade37 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        libraryFacade37.bookKeeping("hi!", strList41);
        libraryFacade27.bookKeeping("", strList41);
        team_001.Library library45 = libraryFacade27.getLibrary();
        team_001.Library library46 = libraryFacade27.getLibrary();
        team_001.UserBuilder userBuilder47 = userBuilder24.setLibrary(library46);
        team_001.Client client48 = userBuilder24.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder50 = userBuilder24.setUsername("");
        team_001.Client client51 = userBuilder24.buildFaculty();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client51);
    }

    @Test
    public void test942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test942");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        java.lang.String str2 = userBuilder0.password;
        userBuilder0.password = "hi!";
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        libraryFacade7.bookKeeping("hi!", strList11);
        team_001.Library library14 = libraryFacade7.getLibrary();
        team_001.UserBuilder userBuilder15 = userBuilder0.setLibrary(library14);
        java.lang.String str16 = userBuilder0.email;
        team_001.UserBuilder userBuilder17 = new team_001.UserBuilder();
        userBuilder17.email = "hi!";
        team_001.Library library20 = userBuilder17.lib;
        team_001.LibraryFacade libraryFacade23 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        libraryFacade23.bookKeeping("hi!", strList27);
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        libraryFacade33.bookKeeping("hi!", strList37);
        libraryFacade23.bookKeeping("", strList37);
        team_001.Library library41 = libraryFacade23.getLibrary();
        team_001.UserBuilder userBuilder42 = userBuilder17.setLibrary(library41);
        userBuilder0.lib = library41;
        userBuilder0.email = "";
        userBuilder0.password = "hi!";
        userBuilder0.email = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder42);
    }

    @Test
    public void test943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test943");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        team_001.Student student7 = new team_001.Student("", "", "hi!", strList5);
        java.lang.String str8 = student7.getEmail();
        student7.setUsername("hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        team_001.VirtualBook virtualBook21 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        int int22 = student18.checkOverdue((team_001.Item) virtualBook21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        team_001.Student student30 = new team_001.Student("", "", "hi!", strList28);
        student30.setEmail("hi!");
        student30.setEmail("hi!");
        java.util.HashMap<team_001.Item, java.time.LocalDate> itemMap35 = student30.borrowed;
        student30.setUsername("");
        team_001.Newsletter newsletter40 = new team_001.Newsletter("hi!", "hi!");
        student30.unsubscribe(newsletter40);
        java.lang.Object obj42 = newsletter40.clone();
        student18.subscribe(newsletter40);
        java.lang.String str44 = newsletter40.getAuthor();
        student7.subscribe(newsletter40);
        team_001.LibraryFacade libraryFacade48 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        libraryFacade48.bookKeeping("hi!", strList52);
        team_001.visitor visitor58 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Magazine magazine61 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        boolean boolean62 = libraryFacade48.borrowItem((team_001.Client) visitor58, (team_001.Item) magazine61);
        magazine61.ID = 269;
        boolean boolean65 = student7.borrowItem((team_001.Item) magazine61);
        team_001.UserBuilder userBuilder66 = new team_001.UserBuilder();
        team_001.Client client67 = userBuilder66.buildVisitor();
        team_001.LibraryFacade libraryFacade70 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray73 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        libraryFacade70.bookKeeping("hi!", strList74);
        team_001.LibraryFacade libraryFacade80 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray83 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        libraryFacade80.bookKeeping("hi!", strList84);
        libraryFacade70.bookKeeping("", strList84);
        team_001.Library library88 = libraryFacade70.getLibrary();
        team_001.UserBuilder userBuilder89 = userBuilder66.setLibrary(library88);
        team_001.Client client90 = userBuilder66.buildVisitor();
        java.lang.String str91 = client90.getEmail();
        team_001.Newsletter newsletter94 = team_001.ItemFactory.createNewsLetter("", "hi!");
        client90.unsubscribe(newsletter94);
        boolean boolean96 = student7.borrowItem((team_001.Item) newsletter94);
        int int97 = newsletter94.getID();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(itemMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "hi!" + "'", str44.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int97 + "' != '" + 24026 + "'", int97 == 24026);
    }

    @Test
    public void test944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test944");
        team_001.LibraryFacade libraryFacade5 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        libraryFacade5.bookKeeping("hi!", strList9);
        team_001.LibraryFacade libraryFacade15 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        libraryFacade15.bookKeeping("hi!", strList19);
        libraryFacade5.bookKeeping("", strList19);
        team_001.Library library23 = libraryFacade5.getLibrary();
        team_001.Library library24 = libraryFacade5.getLibrary();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        team_001.Student student32 = new team_001.Student("", "", "hi!", strList30);
        student32.setEmail("hi!");
        student32.setEmail("hi!");
        team_001.PhysicalBook physicalBook39 = new team_001.PhysicalBook("", "hi!");
        boolean boolean40 = libraryFacade5.borrowItem((team_001.Client) student32, (team_001.Item) physicalBook39);
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap41 = libraryFacade5.getInventory();
        java.util.HashMap<java.lang.Integer, team_001.Item> intMap42 = libraryFacade5.getInventory();
        team_001.Faculty faculty50 = new team_001.Faculty("hi!", "hi!", "");
        java.util.ArrayList<java.lang.String> strList51 = faculty50.getCourses();
        team_001.Student student52 = new team_001.Student("hi!", "", "hi!", strList51);
        libraryFacade5.bookKeeping("", strList51);
        team_001.Student student54 = new team_001.Student("", "hi!", "hi!", strList51);
        team_001.Magazine magazine57 = team_001.ItemFactory.createMagazine("hi!", "hi!");
        magazine57.ID = 1563;
        int int60 = student54.checkOverdue((team_001.Item) magazine57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(magazine57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test945");
        team_001.NonFacultyStaff nonFacultyStaff3 = new team_001.NonFacultyStaff("", "", "hi!");
        java.lang.String str4 = nonFacultyStaff3.getUsername();
        team_001.LibraryFacade libraryFacade7 = new team_001.LibraryFacade("hi!", "hi!");
        team_001.LibraryFacade libraryFacade10 = new team_001.LibraryFacade("hi!", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        team_001.Student student18 = new team_001.Student("", "", "hi!", strList16);
        team_001.Magazine magazine21 = new team_001.Magazine("", "hi!");
        student18.returnItem((team_001.Item) magazine21);
        java.lang.String str23 = student18.getEmail();
        team_001.CD cD26 = new team_001.CD("", "");
        boolean boolean27 = libraryFacade10.borrowItem((team_001.Client) student18, (team_001.Item) cD26);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        team_001.Student student35 = new team_001.Student("", "", "hi!", strList33);
        student35.setEmail("hi!");
        team_001.Magazine magazine40 = new team_001.Magazine("", "hi!");
        java.lang.Boolean boolean41 = student35.isBorrowed((team_001.Item) magazine40);
        boolean boolean42 = student18.borrowItem((team_001.Item) magazine40);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        team_001.Student student50 = new team_001.Student("", "", "hi!", strList48);
        team_001.Magazine magazine53 = new team_001.Magazine("", "hi!");
        student50.returnItem((team_001.Item) magazine53);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        team_001.Student student62 = new team_001.Student("", "", "hi!", strList60);
        team_001.Magazine magazine65 = new team_001.Magazine("", "hi!");
        student62.returnItem((team_001.Item) magazine65);
        java.lang.String str67 = student62.getEmail();
        student62.setPassword("");
        team_001.VirtualBook virtualBook72 = team_001.ItemFactory.createVirtualBook("hi!", "hi!");
        virtualBook72.ID = '4';
        int int75 = student62.checkOverdue((team_001.Item) virtualBook72);
        java.lang.String str76 = virtualBook72.getTitle();
        boolean boolean77 = student50.borrowItem((team_001.Item) virtualBook72);
        team_001.Newsletter newsletter80 = new team_001.Newsletter("hi!", "hi!");
        boolean boolean81 = student50.borrowItem((team_001.Item) newsletter80);
        int int82 = newsletter80.ID;
        int int83 = libraryFacade7.checkOverdue((team_001.Client) student18, (team_001.Item) newsletter80);
        boolean boolean84 = nonFacultyStaff3.borrowItem((team_001.Item) newsletter80);
        nonFacultyStaff3.setPassword("");
        nonFacultyStaff3.setUsername("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "" + "'", str4.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "" + "'", str23.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41.equals(false));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "" + "'", str67.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "hi!" + "'", str76.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 24080 + "'", int82 == 24080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test946");
        team_001.LibraryFacade libraryFacade2 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        libraryFacade2.bookKeeping("hi!", strList6);
        team_001.LibraryFacade libraryFacade12 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        libraryFacade12.bookKeeping("hi!", strList16);
        libraryFacade2.bookKeeping("", strList16);
        team_001.Library library20 = libraryFacade2.getLibrary();
        team_001.Library library21 = libraryFacade2.getLibrary();
        team_001.Faculty faculty25 = new team_001.Faculty("hi!", "hi!", "");
        team_001.VirtualBook virtualBook28 = team_001.ItemFactory.createVirtualBook("", "");
        boolean boolean29 = libraryFacade2.borrowItem((team_001.Client) faculty25, (team_001.Item) virtualBook28);
        java.util.ArrayList<java.lang.String> strList30 = faculty25.getCourses();
        team_001.LibraryFacade libraryFacade33 = new team_001.LibraryFacade("hi!", "");
        team_001.Faculty faculty37 = new team_001.Faculty("", "", "hi!");
        team_001.visitor visitor41 = new team_001.visitor("hi!", "hi!", "hi!");
        team_001.Newsletter newsletter44 = team_001.ItemFactory.createNewsLetter("", "hi!");
        java.lang.String str45 = newsletter44.getTitle();
        visitor41.subscribe(newsletter44);
        boolean boolean47 = libraryFacade33.borrowItem((team_001.Client) faculty37, (team_001.Item) newsletter44);
        int int48 = faculty25.checkOverdue((team_001.Item) newsletter44);
        faculty25.setId(7775);
        java.lang.Class<?> wildcardClass51 = faculty25.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(virtualBook28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletter44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "" + "'", str45.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test947");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildStudent();
        team_001.UserBuilder userBuilder2 = new team_001.UserBuilder();
        team_001.Client client3 = userBuilder2.buildVisitor();
        team_001.UserBuilder userBuilder5 = userBuilder2.setPassword("hi!");
        userBuilder2.password = "hi!";
        team_001.Client client8 = userBuilder2.buildStudent();
        team_001.Library library9 = userBuilder2.lib;
        team_001.UserBuilder userBuilder10 = new team_001.UserBuilder();
        userBuilder10.email = "hi!";
        team_001.Library library13 = userBuilder10.lib;
        team_001.LibraryFacade libraryFacade16 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        libraryFacade16.bookKeeping("hi!", strList20);
        team_001.LibraryFacade libraryFacade26 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        libraryFacade26.bookKeeping("hi!", strList30);
        libraryFacade16.bookKeeping("", strList30);
        team_001.Library library34 = libraryFacade16.getLibrary();
        team_001.UserBuilder userBuilder35 = userBuilder10.setLibrary(library34);
        userBuilder2.lib = library34;
        userBuilder0.lib = library34;
        // The following exception was thrown during execution in test generation
        try {
            team_001.UserBuilder userBuilder39 = userBuilder0.setEmail("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid email format");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder35);
    }

    @Test
    public void test948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test948");
        team_001.Faculty faculty3 = new team_001.Faculty("", "hi!", "hi!");
        team_001.Newsletter newsletter6 = new team_001.Newsletter("hi!", "");
        faculty3.subscribe(newsletter6);
        java.util.ArrayList<java.lang.String> strList8 = faculty3.getCourses();
        faculty3.setUsername("hi!");
        java.util.ArrayList<java.lang.String> strList11 = faculty3.getCourses();
        java.util.HashMap<team_001.Newsletter, java.lang.String> newsletterMap12 = faculty3.getSubcribed();
        faculty3.setEmail("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(newsletterMap12);
    }

    @Test
    public void test949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test949");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        team_001.Client client24 = userBuilder23.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder25 = new team_001.UserBuilder();
        team_001.Client client26 = userBuilder25.buildVisitor();
        team_001.LibraryFacade libraryFacade29 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        libraryFacade29.bookKeeping("hi!", strList33);
        team_001.LibraryFacade libraryFacade39 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        libraryFacade39.bookKeeping("hi!", strList43);
        libraryFacade29.bookKeeping("", strList43);
        team_001.Library library47 = libraryFacade29.getLibrary();
        team_001.UserBuilder userBuilder48 = userBuilder25.setLibrary(library47);
        team_001.Client client49 = userBuilder48.buildNonFacultyStaff();
        team_001.UserBuilder userBuilder51 = userBuilder48.setPassword("hi!");
        team_001.Library library52 = userBuilder48.lib;
        team_001.UserBuilder userBuilder54 = userBuilder48.setUsername("hi!");
        team_001.Client client55 = userBuilder48.buildVisitor();
        java.lang.String str56 = userBuilder48.password;
        team_001.Library library57 = userBuilder48.lib;
        team_001.UserBuilder userBuilder58 = userBuilder23.setLibrary(library57);
        team_001.Client client59 = userBuilder23.buildNonFacultyStaff();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "hi!" + "'", str56.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client59);
    }

    @Test
    public void test950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test950");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        team_001.Client client1 = userBuilder0.buildVisitor();
        team_001.LibraryFacade libraryFacade4 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        libraryFacade4.bookKeeping("hi!", strList8);
        team_001.LibraryFacade libraryFacade14 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        libraryFacade14.bookKeeping("hi!", strList18);
        libraryFacade4.bookKeeping("", strList18);
        team_001.Library library22 = libraryFacade4.getLibrary();
        team_001.UserBuilder userBuilder23 = userBuilder0.setLibrary(library22);
        userBuilder23.email = "";
        java.lang.String str26 = userBuilder23.password;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test951");
        team_001.UserBuilder userBuilder0 = new team_001.UserBuilder();
        userBuilder0.email = "hi!";
        team_001.Library library3 = userBuilder0.lib;
        team_001.LibraryFacade libraryFacade6 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        libraryFacade6.bookKeeping("hi!", strList10);
        team_001.LibraryFacade libraryFacade16 = new team_001.LibraryFacade("", "hi!");
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        libraryFacade16.bookKeeping("hi!", strList20);
        libraryFacade6.bookKeeping("", strList20);
        team_001.Library library24 = libraryFacade6.getLibrary();
        team_001.UserBuilder userBuilder25 = userBuilder0.setLibrary(library24);
        userBuilder25.email = "";
        team_001.Library library28 = userBuilder25.lib;
        team_001.Client client29 = userBuilder25.buildNonFacultyStaff();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(library3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(userBuilder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(library28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(client29);
    }
}
